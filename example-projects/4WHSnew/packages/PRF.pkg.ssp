package PRF {
    params {
        n: Integer,
      prf: fn Bits(n), Integer, Integer, Bits(n), Bits(n), Bool ->  Bits(n),
        b: Bool
    }
    
    state {
          LTK:   Table(Integer, Bits(n)),       /* administrative kid, keys    */
          H:     Table(Integer, Bool),          /* administrative kid, honesty */
          PRF:   Table((Integer,Integer,Integer,Bits(n),Bits(n),Bool), Bits(n)), /* output keys */
          kid_:  Integer,                       /* counter */
    }

oracle NewKey(ltk: Maybe(Bits(n))) -> Integer {
      kid_ <- (kid_ + 1);
      if (ltk == None)
      {
        ltk_ <-$Bits(n);
        LTK[kid_] <- Some(ltk_);
        H[kid_]   <- Some(true); 
      }
      else {
        LTK[kid_] <- ltk;
        H[kid_]   <- Some(false);}
      return kid_;
    }

    oracle Eval(h: Integer, a: Integer, aa: Integer, c: Bits(n), d: Bits(n), e: Bool) -> Bits(n) {
        assert not (LTK[h] == None);
        if ((H[h] == Some(false)) or not b)
            {
              k <- Unwrap(LTK[h]);
              return prf(k,a,aa,c,d,e);
            }
        if (PRF[(h,a,aa,c,d,e)] == None) {
                        temp <-$Bits(n);
            PRF[(h,a,aa,c,d,e)] <- Some(temp);
        }
        y <- PRF[(h,a,aa,c,d,e)];
        return Unwrap(y);
    }
    oracle Exists(h: Integer) {
        assert not (LTK[h] == None);
    }
}