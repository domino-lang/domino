composition MODSec0 {
  const w: Integer;
  const n: Integer;
  const d: Integer;
  const m: Integer;
  const p: Integer;
  const zeron: Bits(n);
  const zerom: Bits(m);
  const encn: fn Bits(n),Bits(n),Bits(n) -> Bits(m);
  const encm: fn Bits(n),Bits(m),Bits(n) -> Bits(p);

  instance mod = Mod {
    params {
        w: w,
        d: d,
        p: p,
        n: n,
    }
  }

for dd: 1 <= dd <= (d+1) {
  instance keys[dd] = Keys {
    params {
      n:  n,
    }

    types {
      Handle: Integer,
    }
  }
  instance modgb[dd] = MODGB {
    params {
        w: w,
        p: p,
        n: n,
    }
  }

    instance gate[dd] = Gate {
    params {
        n: n,
        m: m,
        p: p,
        zeron: zeron,
    }
  }
    instance enc[dd] = Enc0 {
    params {
        n: n,
        m: m,
        p: p,
        encn: encn,
        encm: encm
    }
  }
}


      for dd: 1 <= dd <= d { 
           compose {
             mod: {
              with index [dd] GBL: modgb,
             }
             modgb[dd]: {
              with index [dd] GBLG: gate,
             }
             gate[dd]: {
              with index [dd] ENCM: enc,
              with index [dd] ENCN: enc,
              with index [(dd + 1)] GETKEYSIN: keys,
             }
             enc[dd]: {
              with index [dd] GETKEYSOUT: keys,
             }
             }
             }

  compose {
    adversary: {
      Garble:   mod,
    },

    mod: {
      with index [1] GETAOUT:   keys,
      with index [1] SETBIT:    keys,
      with index [(d+1)] GETKEYSIN:   keys,
    },
  }
}
