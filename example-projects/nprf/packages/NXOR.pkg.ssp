package NXOR {
    types {
        HandleIn,
        /* HandleOut = (HandleIn, HandleIn, HandleIn), */
        /* Key = Bits(n), */
    }

    params {
        sortnhdl: fn Table(Integer, HandleIn) -> Table(Integer, HandleIn),
        len: fn Table(Integer, HandleIn) -> Integer,
        n: Integer,
    }

    import oracles {
        Get(hdl: HandleIn) -> Bits(n),
        PR(hdl: HandleIn) -> Bool,
        Set(hdl: Table(Integer, HandleIn), k: Bits(n), pr: Bool),
    }

    oracle Xor(handles: Table(Integer, HandleIn)) {
        l <- len(handles);

        hdl1 <- Unwrap(handles[0]);
        k <- invoke Get(hdl1);
        pr <- invoke PR(hdl1);
        
        for i: 0 < i < n {
            hdl <- Unwrap(handles[i]);
            k_ <- invoke Get(hdl);
            pr_ <- invoke PR(hdl);

            k <- (k xor k_);
            pr <- (pr or pr_);
        } 
        
        hdl_out <- sortnhdl(handles);

        _ <- invoke Set(hdl_out, k, pr);
    }
}