package Ev {
    params {
        n: Integer,
        w: Integer,
        d: Integer,
    }

    state {
    }

    import oracles {
        GETBIT(h: Integer) -> Bool,
        SETBIT(h: Integer, zz:Bool) -> (),
    }



    oracle EVAL(C: Table(Integer, Table(Integer,(Integer,Integer, Table((Bool,Bool),Bool))))) -> () 
    {
        temppre  <- new Table(Integer,Bool);
        temppost <- new Table(Integer,Bool);
        for i: 0 <= i <= w {
        bit        <- invoke GETBIT(i);
        temppre[i] <- Some(bit);}
        for j:  1 <= j <= d {
        assert not (C[j] == None as Table(Integer,(Integer,Integer, Table((Bool,Bool),Bool))));
             layer    <- Unwrap(C[j]);
             for ii: 1 <= ii <= w {
             gate     <- Unwrap(layer[ii]);
             (l,r,op) <- parse gate;
             assert not (op[(true,  true)] == None as Bool);
             assert not (op[(true, false)] == None as Bool);
             assert not (op[(false, true)] == None as Bool);
             assert not (op[(false,false)] == None as Bool);
             zl <- Unwrap(temppre[l]);
             zr <- Unwrap(temppre[r]);
             temppost[ii] <- op[(zl,zr)];}
             tempre <- temppost;}
        for iii: 1 <= iii <= w {
        bit <- Unwrap(temppost[iii]);
        _ <- invoke SETBIT(iii,bit);}
        return ;
    }

}