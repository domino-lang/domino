proof AEProto {
    const n: Integer;
    const prf: fn Bits(n),Bits(m) -> Bits(n);
    const enc: fn Bits(n),Bits(n),Bits(n) -> Bits(n);
    const dec: fn Bits(n),Bits(n),Bits(n) -> Bits(n);
  
    instance real = Real {
        params {
            n: n,
	    prf: prf,
            enc: enc,
            dec: dec,
        }
    }

    instance Indcpa1_inst = Indcpa1 {
        params {
            n: n,
            m: m,
            p: p,
            zerom: zerom,
            zeron: zeron,
            encm: encm,
            encn: encn,
        }
    }

    instance VeryLeft_inst = VeryLeft {
        params {
            n: n,
            m: m,
            p: p,
            zerom: zerom,
            zeron: zeron,
            encm: encm,
            encn: encn,
        }
    }
    instance Left_inst = Left {
        params {
            n: n,
            m: m,
            p: p,
            zerom: zerom,
            zeron: zeron,
            encm: encm,
            encn: encn,
        }
    }
    instance Right_inst = Right {
        params {
            n: n,
            m: m,
            p: p,
            zerom: zerom,
            zeron: zeron,
            encm: encm,
            encn: encn,
        }
    }

    instance Indcpamod0_inst = Indcpamod0 {
        params {
            n: n,
            m: m,
            p: p,
            zerom: zerom,
            zeron: zeron,
            encm: encm,
            encn: encn,
        }
    }
    
    instance Indcpamon0_inst = Indcpamon0 {
        params {
            n: n,
            m: m,
            p: p,
            zerom: zerom,
            zeron: zeron,
            encm: encm,
            encn: encn,
        }
    }

    assumptions {
        Indcpa: Indcpa0_inst ~ Indcpa1_inst
    }

    gamehops {
        reduction VeryLeft_inst Left_inst {
            assumption Indcpa

            map Indcpa0_inst VeryLeft_inst {
                keys_top: keys_top
                enc: enc
            }

            map Indcpa1_inst Left_inst {
                keys_top: keys_top
                enc: enc
            }
        }

        equivalence Left_inst Right_inst {
            GETAOUT: {
                invariant: [
                    ./invariant-GBLG.smt2
                ]

                lemmas {
                    invariant-GETAOUT-post: []
                    aborts-equal-GETAOUT:   []
                    same-output-GETAOUT:    [no-abort-GETAOUT]
                }
            }
            SETBIT: {
                invariant: [
                    ./invariant-GBLG.smt2
                ]

                lemmas {
                    invariant-SETBIT-post: []
                    aborts-equal-SETBIT:   []
                    same-output-SETBIT:    [no-abort-SETBIT]
                }
            }
            GETKEYSIN: {
                invariant: [
                    ./invariant-GBLG.smt2
                ]

                lemmas {
                    invariant-GETKEYSIN-post: []
                    aborts-equal-GETKEYSIN:   []
                    same-output-GETKEYSIN:    [no-abort-GETKEYSIN]
                }
            }
            GBLG: {
                invariant: [
                    ./invariant-GBLG.smt2
                ]

                lemmas {
                    right-all-aborts: []
                    right-all-aborts-inverse: []
                    left-all-aborts: []
                    left-inverse-all-aborts: []
                    aborts-equal: [ left-all-aborts , left-inverse-all-aborts , right-all-aborts , right-all-aborts-inverse ]
                    top-whole-left-neu-right-neu: [ no-abort , left-inverse-all-aborts , right-all-aborts-inverse ,]
                    bot-left-neu: [ no-abort , left-all-aborts , left-inverse-all-aborts ]
                    bot-right-neu: [ no-abort , right-all-aborts , right-all-aborts-inverse ]
                    temp: [ no-abort , left-all-aborts , left-inverse-all-aborts , right-all-aborts , right-all-aborts-inverse , bot-left-neu , bot-right-neu ]
                    same-output: [ temp , no-abort , left-all-aborts , left-inverse-all-aborts , right-all-aborts , right-all-aborts-inverse , bot-left-neu , bot-right-neu ]
                    invariant-GBLG-post: [ temp , no-abort , left-all-aborts , left-inverse-all-aborts , right-all-aborts , right-all-aborts-inverse , bot-left-neu , bot-right-neu ]
                }
            }
        }

    }

}
