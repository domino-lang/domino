theorem Modularize {
    const n: Integer;
    const m: Integer;
    const prf: fn Bits(n),Bits(n) -> Bits(n);
    const enc: fn Bits(n),Bits(n),Bits(n) -> Bits(m);
    const dec: fn Bits(n),Bits(m)         -> Bits(n);
  
    instance real = Real {
        params {
            n: n,
            m: m,
            prf: prf,
            enc: enc,
            dec: dec,
        }
    }

    instance monprfreal = Monprfreal {
        params {
            n  : n  ,
  	        prf: prf,
        }
    }

    instance modprfreal = Modprfreal {
        params {
            n  : n  ,
  	        prf: prf,
        }
    }


    assumptions {
    }

    gamehops {
    equivalence modprfreal monprfreal 
        {
            Eval: 
            {
                invariant: [
                    ./theorem/invariant-PRF.smt2
                ]

                lemmas {
                    aborts-equal-Eval:   []
                    invariant-Eval:      [no-abort-Eval]
                    same-output-Eval:    [no-abort-Eval]
                }
            }
            Get: 
            {
                invariant: [
                    ./theorem/invariant-PRF.smt2
                ]

                lemmas {
                    aborts-equal-Get:   []
                    invariant-Get:      [no-abort-Get]
                    same-output-Get:    [no-abort-Get]
                }
            }
        }

    }
}
