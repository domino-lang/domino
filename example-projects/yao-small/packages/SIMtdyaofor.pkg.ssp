package SIMtdyaofor {
    params {
        w: Integer,
        d: Integer,
        p: Integer,
        n: Integer,
     encn: fn Bits(n),Bits(n),Bits(n) -> Bits(m),
     encm: fn Bits(n),Bits(m),Bits(n) -> Bits(p),
    zeron: Bits(n),
    }

    import oracles {
        GETBIT(j: Integer) -> Bool,
    }

    state {
        Ctilde: Table(Integer, Table(Integer, Table(Bits(p), Bool))),
        dinf:   Table(Integer, Table(Bool, Bits(n))),
        S:      Table(Integer, Table(Integer, Table(Bool, Bits(n))))
    }

    oracle GBL(C: Table(Integer, Table(Integer,(Integer,Integer, Table((Bool,Bool),Bool))))) 
                 -> Table(Integer, Table(Integer, Table(Bits(p), Bool)))
                     {
        ZZ          <-                new Table(Integer, Table(Bool,Bits(n)));
        ZZZ         <-                               new Table(Bool,Bits(n)) ;
        layertilde  <-                new Table(Integer, Table(Bits(p),Bool));
        gtilde      <-                               new Table(Bits(p),Bool);
            for j: 1 <= j <= w {
                r  <-$ Bits(n);
                rr <-$ Bits(n);
         ZZZ[true]  <-  Some(r);
         ZZZ[false] <-  Some(rr);
              ZZ[j] <-  Some(ZZZ);
                 }
              S[0] <-  Some(ZZ);
        for i: 1 <= i <= d {
             assert (not (C[i] == None as Table(Integer,(Integer,Integer, Table((Bool,Bool),Bool)))));
             assert (Ctilde[i] == None as Table(Integer, Table(Bits(p), Bool)));
             for jj: 1 <= jj <= w {
             layer    <- Unwrap(C[i]);
             gate     <- Unwrap(layer[j]);
             (l,r,op) <- parse gate;
             assert (not (op[(true,  true)] == None as Bool));
             assert (not (op[(true, false)] == None as Bool));
             assert (not (op[(false, true)] == None as Bool));
             assert (not (op[(false,false)] == None as Bool));
                 r  <-$ Bits(n);
                 rr <-$ Bits(n);
         ZZZ[true]  <-  Some(r);
         ZZZ[false] <-  Some(rr);
              ZZ[j] <-  Some(ZZZ);
                dl   <- true; 
                dr   <- true;
             k       <- zeron;
             XX      <- Unwrap(S[(i-1)]);
             ZZZ     <- Unwrap(XX[l]);
             kleft   <- Unwrap(ZZZ[bl]);
             ZZZ     <- Unwrap(XX[r]);
             kright  <- Unwrap(ZZZ[br]);
             rrr     <-$ Bits(n);
             rrrr    <-$ Bits(n);
             cin     <-  encn(kleft,k,rrr);
             c       <-  encm(kright,cin,rrrr);
             gtilde[c] <- Some(true); 
                    dl <- false; 
                    dr <- true;
             k       <- zeron;
             XX      <- Unwrap(S[(i-1)]);
             ZZZ     <- Unwrap(XX[l]);
             kleft   <- Unwrap(ZZZ[bl]);
             ZZZ     <- Unwrap(XX[r]);
             kright  <- Unwrap(ZZZ[br]);
             rrr     <-$ Bits(n);
             rrrr    <-$ Bits(n);
             cin     <-  encn(kleft,k,rrr);
             c       <-  encm(kright,cin,rrrr);
             gtilde[c] <- Some(true); 
                   dl  <- true; 
                   dr  <- false;
             k       <- zeron;
             XX      <- Unwrap(S[(i-1)]);
             ZZZ     <- Unwrap(XX[l]);
             kleft   <- Unwrap(ZZZ[bl]);
             ZZZ     <- Unwrap(XX[r]);
             kright  <- Unwrap(ZZZ[br]);
             rrr     <-$ Bits(n);
             rrrr    <-$ Bits(n);
             cin     <-  encn(kleft,k,rrr);
             c       <-  encm(kright,cin,rrrr);
             gtilde[c] <- Some(true); 
                   dl  <- false; 
                   dr  <- false;
             ZZZ     <- Unwrap(ZZ[ji]);
             k       <- Unwrap(ZZZ[false]);
             XX      <- Unwrap(S[(i-1)]);
             ZZZ     <- Unwrap(XX[l]);
             kleft   <- Unwrap(ZZZ[bl]);
             ZZZ     <- Unwrap(XX[r]);
             kright   <- Unwrap(ZZZ[br]);
             rrr     <-$ Bits(n);
             rrrr    <-$ Bits(n);
             cin     <-  encn(kleft,k,rrr);
             c       <-  encm(kright,cin,rrrr);
             gtilde[c] <- Some(true);
             layertilde[jj] <- Some(gtilde);
             }
              S[ii]     <- Some(ZZ);
             Ctilde[ii] <- Some(layertilde);
             }
        return Ctilde;
    }

    oracle GETDINF() 
                 -> Table(Integer, Table(Bool,Bits(n)))
                     {
                  T <- Unwrap(S[(d)]);
               temp <- new Table(Bool,Bits(n));
           temptemp <- new Table(Bool,Bits(n));
                  for j: 0 <= j <= w {
               temp <- Unwrap(T[j]);
                  z <- invoke GETBIT(j);
        temptemp[z] <- temp[false];
               notz <- not z;
     temptemp[notz] <- temp[true]; 
            dinf[j] <- Some(temptemp);
                  }
                  return dinf;          
                     }
    oracle GETA(j: integer) 
                 -> Bits(n)
                     {
                       TT  <- Unwrap(S[0]);
                       TTT <- Unwrap(TT[j]);
                       k   <- Unwrap(TTT[false]);
                       return k;
                     }

}