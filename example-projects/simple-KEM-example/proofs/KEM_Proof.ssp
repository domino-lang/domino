proof KEM_Proof {
    const    kgen: fn Bits(256)             ->  Bits(256);            /* takes sk, returns pk  */
    const  encaps: fn (Bits(256),Bits(256)) -> (Bits(256),Bits(256)); /* (pk,rand) -> (ctxt,k) */
    const  decaps: fn (Bits(256),Bits(256)) ->  Bits(256);            /* (sk,ctxt) -> k        */

    instance CPA_real = CPA {
        params {
        isideal: false,
           kgen: kgen,
         encaps: encaps,
         decaps: decaps,
        }
    }

    instance CPA_ideal = CPA {
        params {
        isideal: true,
           kgen: kgen,
         encaps: encaps,
         decaps: decaps,
        }
    }

    instance Prot_real = CPA {
        params {
        isideal: false,
           kgen: kgen,
         encaps: encaps,
         decaps: decaps,
        }
    }

    instance Prot_ideal = CPA {
        params {
        isideal: true,
           kgen: kgen,
         encaps: encaps,
         decaps: decaps,
        }
    }

    assumptions {
        CPA:     CPA_real    ~ CPA_ideal 
    }

    gamehops 
    {
        equivalence KX H1_0 {
            Send1: {
                invariant: [
                    ./proofs/invariant-KX-Red-H1.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
             Send2: {
                invariant: [
                    ./proofs/invariant-KX-Red-H1.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
             Send3: {
                invariant: [
                    ./proofs/invariant-KX-Red-H1.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            Send4: {
                invariant: [
                    ./proofs/invariant-KX-Red-H1.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            Send5: {
                invariant: [
                    ./proofs/invariant-KX-Red-H1.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            NewKey: {
                invariant: [
                    ./proofs/invariant-KX-Red-H1.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            NewSession: {
                invariant: [
                    ./proofs/invariant-KX-Red-H1.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            Test: {
                invariant: [
                    ./proofs/invariant-KX-Red-H1.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            Reveal: {
                invariant: [
                    ./proofs/invariant-KX-Red-H1.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            SameKey: {
                invariant: [
                    ./proofs/invariant-KX-Red-H1.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            AtLeast: {
                invariant: [
                    ./proofs/invariant-KX-Red-H1.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            AtMost: {
                invariant: [
                    ./proofs/invariant-KX-Red-H1.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
        }
        reduction H1_0 H1_1  
        {
            assumption nonces

            map Noncesreal H1_0  {
                nonces    : Nonces
            }

            map Noncesideal H1_1 {
                nonces    : Nonces
            }
        }

        reduction H2_0 H2_1  
        {
            assumption collres

            map CRreal H2_0  {
                cr: CR
            }

            map CRideal H2_1 {
                cr: CR
            }
        }

        reduction H3_1 H3_0  
        {
            assumption collres

            map CRreal H3_0  {
                cr: CR
            }

            map CRideal H3_1 {
                cr: CR
            }
        }

        reduction H6_1 H6_0  
        {
            assumption prf

            map PRFreal H6_0  {
			   PRF: PRF
            }

            map PRFideal H6_1 {
			   PRF: PRF
            }
        }

    }
}