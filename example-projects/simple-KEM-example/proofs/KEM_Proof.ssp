proof KEM_Proof {
    const isideal_kem_cpa_security: Bool;
    const    kgen: fn Bits(256)             ->  Bits(256);            /* takes sk, returns pk  */
    const  encaps: fn Bits(256),Bits(256) -> (Bits(256),Bits(256)); /* (pk,rand) -> (ctxt,k) */
    const  decaps: fn Bits(256),Bits(256) ->  Bits(256);            /* (sk,ctxt) -> k        */

    instance CPA_real = CPA {
        params {
        isideal: false,
           kgen: kgen,
         encaps: encaps,
         decaps: decaps,
        }
    }

    instance CPA_ideal = CPA {
        params {
        isideal: true,
           kgen: kgen,
         encaps: encaps,
         decaps: decaps,
        }
    }

    instance Prot = Prot {
        params {
        isideal_kem_cpa_security: isideal_kem_cpa_security,
           kgen: kgen,
         encaps: encaps,
         decaps: decaps,
        }
    }

    instance H1_kem_correctness_real = H1 {
        params {
        isideal_kem_cpa_security: isideal_kem_cpa_security,
        isideal_kem_correctness: false,
           kgen: kgen,
         encaps: encaps,
         decaps: decaps,
        }
    }

    instance H1_kem_correctness_ideal = H1 {
        params {
        isideal_kem_cpa_security: isideal_kem_cpa_security,
        isideal_kem_correctness: true,
           kgen: kgen,
         encaps: encaps,
         decaps: decaps,
        }
    }

    assumptions {
        CPA:     CPA_real    ~ CPA_ideal 
    }

    gamehops 
    {
        equivalence Prot H1_kem_correctness_real {
            GetPK: {
                invariant: [
                    ./proofs/invariant-KEM_Proof-Prot_Real-H1_Real.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            Run: {
                invariant: [
                    ./proofs/invariant-KEM_Proof-Prot_Real-H1_Real.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            TestSender: {
                invariant: [
                    ./proofs/invariant-KEM_Proof-Prot_Real-H1_Real.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            TestReceiver: {
                invariant: [
                    ./proofs/invariant-KEM_Proof-Prot_Real-H1_Real.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
        }
    }
}
