theorem WHSProto {
    const b: Bool;
    const n: Integer;
    const m: Integer;
    const zeron: Bits(n);
    const prf: fn Bits(n), Integer, Integer, Bits(n), Bits(n), Bool ->  Bits(n);
    const mac: fn Bits(n), Bits(n), Integer -> Bits(n);
  
    instance Noncesideal = Nonces {
        params {
            b  : true,
            n  : n   ,
        }
    }

    instance Noncesreal = Nonces {
        params {
            b  : false,
            n  : n    ,
        }
    }

    instance PRFideal = PRF {
        params {
            b  : true,
            n  : n   ,
  	        prf: prf ,
        }
    }

    instance PRFreal = PRF {
        params {
            b  : false,
            n  : n    ,
  	        prf: prf  ,
        }
    }

    instance KX = KX {
        params {
            b       : b ,
            n       : n    ,
            zeron   : zeron,
  	        prf     : prf  ,
            mac     : mac  ,
        }
    }

    instance KX_Red_0 = KX_Red {
        params {
            bnonces : false,
            b       : b    ,
            n       : n    ,
            zeron   : zeron,
  	        prf     : prf  ,
            mac     : mac  ,
        }
    }

    instance KX_Red_1 = KX_Red {
        params {
            bnonces : true,
            b       : b    ,
            n       : n    ,
            zeron   : zeron,
  	        prf     : prf  ,
            mac     : mac  ,
        }
    }

    instance H1 = H1 {
        params {
        b: b,
        n: n,
        zeron: zeron,
        prf: prf,
        mac: mac,
        }
    }

    instance H1_Red_0 = H1_Red {
        params {
        b: b,
        n: n,
        zeron: zeron,
        prf: prf,
        mac: mac,
        bprf: false,
        }
    }

    instance H1_Red_1 = H1_Red {
        params {
        b: b,
        n: n,
        zeron: zeron,
        prf: prf,
        mac: mac,
        bprf: true,
        }
    }

        instance H2_0 = H2 {
        params {
        b: false,
        n: n,
        zeron: zeron,
        prf: prf,
        mac: mac,
        }
    }

        instance H2_1 = H2 {
        params {
        b: true,
        n: n,
        zeron: zeron,
        prf: prf,
        mac: mac,
        }
    }


    assumptions {
        prf:    PRFreal    ~ PRFideal
        nonces: Noncesreal ~ Noncesideal
    }

    gamehops 
    {

        equivalence KX KX_Red_0 {
            Send1: {
                invariant: [
                    ./theorem/invariant-KX-KX-Red.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }

            Send2: {
                invariant: [
                    ./theorem/invariant-KX-KX-Red.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }

            Send3: {
                invariant: [
                    ./theorem/invariant-KX-KX-Red.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }

            Send4: {
                invariant: [
                    ./theorem/invariant-KX-KX-Red.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }

            Send5: {
                invariant: [
                    ./theorem/invariant-KX-KX-Red.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }

            NewKey: {
                invariant: [
                    ./theorem/invariant-KX-KX-Red.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }

            NewSession: {
                invariant: [
                    ./theorem/invariant-KX-KX-Red.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }

            Reveal: {
                invariant: [
                    ./theorem/invariant-KX-KX-Red.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }

            Test: {
                invariant: [
                    ./theorem/invariant-KX-KX-Red.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }

        }

        reduction KX_Red_0 KX_Red_1  
        {
            assumption nonces

            map Noncesreal KX_Red_0  {
                nonces    : Nonces
            }

            map Noncesideal KX_Red_1 {
                nonces    : Nonces
            }
        }

        equivalence KX_Red_1 H1 {
            UsefulOracle: {
                invariant: [
                    ./theorem/invariant-KX-Red-H1.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
        }

        reduction H1_Red_0 H1_Red_1  
        {
            assumption prf

            map PRFreal H1_Red_0  {
                PRF    : PRF
            }

            map PRFideal H1_Red_1 {
                PRF    : PRF
            }
        }

    }
}