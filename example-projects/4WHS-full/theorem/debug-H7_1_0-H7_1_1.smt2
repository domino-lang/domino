(define-fun <relation-lemma-false-H7_1_0-H7_1_1-AtLeast>
    ((H710-old <GameState_H7_<$<!n!>$>>)
     (H711-old <GameState_H7_<$<!n!>$>>)
     (H710-return <OracleReturn_H7_<$<!n!>$>_KX_noprfkey_<$<!n!>$>_AtLeast>)
     (H711-return <OracleReturn_H7_<$<!n!>$>_KX_noprfkey_<$<!n!>$>_AtLeast>)
     (sid (Tuple5 Int Int Bits_256 Bits_256 Bits_256)))
  Bool
  false)

(define-fun <relation-lemma-false-H7_1_0-H7_1_1-Test>
    ((H710-old <GameState_H7_<$<!n!>$>>)
     (H711-old <GameState_H7_<$<!n!>$>>)
     (H710-return <OracleReturn_H7_<$<!n!>$>_KX_noprfkey_<$<!n!>$>_Test>)
     (H711-return <OracleReturn_H7_<$<!n!>$>_KX_noprfkey_<$<!n!>$>_Test>)
     (ctr Int))
  Bool
  false)




(define-fun <relation-lemma-debug-H7_1_0-H7_1_1-Test>
    ((H710-old <GameState_H7_<$<!n!>$>>)
     (H711-old <GameState_H7_<$<!n!>$>>)
     (H710-return <OracleReturn_H7_<$<!n!>$>_KX_noprfkey_<$<!n!>$>_Test>)
     (H711-return <OracleReturn_H7_<$<!n!>$>_KX_noprfkey_<$<!n!>$>_Test>)
     (ctr Int))
  Bool
  (let ((state-H710 (<oracle-return-H7-<$<!n!>$>-KX_noprfkey-<$<!n!>$>-Test-game-state> H710-return))
        (state-H711 (<oracle-return-H7-<$<!n!>$>-KX_noprfkey-<$<!n!>$>-Test-game-state> H711-return))
        (retval0 (<oracle-return-H7-<$<!n!>$>-KX_noprfkey-<$<!n!>$>-Test-return-value-or-abort> H710-return))
        (retval1 (<oracle-return-H7-<$<!n!>$>-KX_noprfkey-<$<!n!>$>-Test-return-value-or-abort> H711-return)))
    (let ((nonces-H710 (<game-H7-<$<!n!>$>-pkgstate-Nonces> state-H710))
          (nonces-H711 (<game-H7-<$<!n!>$>-pkgstate-Nonces>  state-H711))
          (mac-H710 (<game-H7-<$<!n!>$>-pkgstate-MAC> state-H710))
          (mac-H711 (<game-H7-<$<!n!>$>-pkgstate-MAC>  state-H711))
          (game-H710 (<game-H7-<$<!n!>$>-pkgstate-KX> state-H710))
          (game-H710-old (<game-H7-<$<!n!>$>-pkgstate-KX> H710-old))
          (game-H711 (<game-H7-<$<!n!>$>-pkgstate-KX>  state-H711))
          (game-H711-old (<game-H7-<$<!n!>$>-pkgstate-KX>  H711-old))
          (prf-H710 (<game-H7-<$<!n!>$>-pkgstate-PRF> state-H710))
          (prf-H710-old (<game-H7-<$<!n!>$>-pkgstate-PRF> H710-old))
          (prf-H711 (<game-H7-<$<!n!>$>-pkgstate-PRF>  state-H711)))
      (let ((ctr0 (<pkg-state-KX_noprfkey-<$<!n!>$>-ctr_> game-H710))
            (ctr1 (<pkg-state-KX_noprfkey-<$<!n!>$>-ctr_> game-H711))
            (State0 (<pkg-state-KX_noprfkey-<$<!n!>$>-State> game-H710))
            (State1 (<pkg-state-KX_noprfkey-<$<!n!>$>-State> game-H711))
            (RevTested0 (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTested> game-H710))
            (RevTested0-old (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTested> game-H710-old))
            (RevTested1 (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTested> game-H711))
            (RevTestEval0 (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTestEval> game-H710))
            (RevTestEval0-old (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTestEval> game-H710-old))
            (RevTestEval1 (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTestEval> game-H711))
            (RevTestEval1-old (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTestEval> game-H711-old))
            (Fresh0 (<pkg-state-KX_noprfkey-<$<!n!>$>-Fresh> game-H710))
            (Fresh1 (<pkg-state-KX_noprfkey-<$<!n!>$>-Fresh> game-H711))
            (Nonces0 (<pkg-state-Nonces-<$<!n!>$>-Nonces> nonces-H710))
            (Nonces1 (<pkg-state-Nonces-<$<!n!>$>-Nonces> nonces-H711))
            (Keys0 (<pkg-state-MAC-<$<!n!>$>-Keys> mac-H710))
            (Keys1 (<pkg-state-MAC-<$<!n!>$>-Keys> mac-H711))
            (Values0 (<pkg-state-MAC-<$<!n!>$>-Values> mac-H710))
            (Values1 (<pkg-state-MAC-<$<!n!>$>-Values> mac-H711))
            (Ltk0 (<pkg-state-PRF-<$<!n!>$>-LTK> prf-H710))
            (Ltk1 (<pkg-state-PRF-<$<!n!>$>-LTK> prf-H711))
            (Prf0 (<pkg-state-PRF-<$<!n!>$>-PRF> prf-H710))
            (Prf0-old (<pkg-state-PRF-<$<!n!>$>-PRF> prf-H710-old))
            (Prf1 (<pkg-state-PRF-<$<!n!>$>-PRF> prf-H711))
            (H0 (<pkg-state-PRF-<$<!n!>$>-H> prf-H710))
            (H1 (<pkg-state-PRF-<$<!n!>$>-H> prf-H711)))
        (and

         (=> (not (= retval0 retval1))
             (let ((state (select State0 ctr)))
               (let  ((U    (el11-1  (maybe-get state)))
                      (u    (el11-2  (maybe-get state)))
                      (V    (el11-3  (maybe-get state)))
                      (kid  (el11-4  (maybe-get state)))
                      (acc  (el11-5  (maybe-get state)))
                      (k    (el11-6  (maybe-get state)))
                      (ni   (el11-7  (maybe-get state)))
                      (nr   (el11-8  (maybe-get state)))
                      (kmac (el11-9  (maybe-get state)))
                      (sid  (el11-10 (maybe-get state)))
                      (mess (el11-11 (maybe-get state))))
                   (is-mk-none (select Prf0-old (mk-tuple6 kid U V (maybe-get ni) (maybe-get nr) true))))))

         
             )))))




(define-fun <relation-lemma-debug-H7_1_0-H7_1_1-AtLeast>
    ((H710-old <GameState_H7_<$<!n!>$>>)
     (H711-old <GameState_H7_<$<!n!>$>>)
     (H710-return <OracleReturn_H7_<$<!n!>$>_KX_noprfkey_<$<!n!>$>_AtLeast>)
     (H711-return <OracleReturn_H7_<$<!n!>$>_KX_noprfkey_<$<!n!>$>_AtLeast>)
     (sid (Tuple5 Int Int Bits_256 Bits_256 Bits_256)))
  Bool
  (let ((state-H710 (<oracle-return-H7-<$<!n!>$>-KX_noprfkey-<$<!n!>$>-AtLeast-game-state> H710-return))
        (state-H711 (<oracle-return-H7-<$<!n!>$>-KX_noprfkey-<$<!n!>$>-AtLeast-game-state> H711-return))
        (retval0 (<oracle-return-H7-<$<!n!>$>-KX_noprfkey-<$<!n!>$>-AtLeast-return-value-or-abort> H710-return))
        (retval1 (<oracle-return-H7-<$<!n!>$>-KX_noprfkey-<$<!n!>$>-AtLeast-return-value-or-abort> H711-return)))
    (let ((nonces-H710 (<game-H7-<$<!n!>$>-pkgstate-Nonces> state-H710))
          (nonces-H711 (<game-H7-<$<!n!>$>-pkgstate-Nonces>  state-H711))
          (mac-H710 (<game-H7-<$<!n!>$>-pkgstate-MAC> state-H710))
          (mac-H711 (<game-H7-<$<!n!>$>-pkgstate-MAC>  state-H711))
          (game-H710 (<game-H7-<$<!n!>$>-pkgstate-KX> state-H710))
          (game-H710-old (<game-H7-<$<!n!>$>-pkgstate-KX> H710-old))
          (game-H711 (<game-H7-<$<!n!>$>-pkgstate-KX>  state-H711))
          (game-H711-old (<game-H7-<$<!n!>$>-pkgstate-KX>  H711-old))
          (prf-H710 (<game-H7-<$<!n!>$>-pkgstate-PRF> state-H710))
          (prf-H710-old (<game-H7-<$<!n!>$>-pkgstate-PRF> H710-old))
          (prf-H711 (<game-H7-<$<!n!>$>-pkgstate-PRF>  state-H711)))
      (let ((ctr0 (<pkg-state-KX_noprfkey-<$<!n!>$>-ctr_> game-H710))
            (ctr1 (<pkg-state-KX_noprfkey-<$<!n!>$>-ctr_> game-H711))
            (State0 (<pkg-state-KX_noprfkey-<$<!n!>$>-State> game-H710))
            (State1 (<pkg-state-KX_noprfkey-<$<!n!>$>-State> game-H711))
          (First0 (<pkg-state-KX_noprfkey-<$<!n!>$>-First> game-H710))
          (First1 (<pkg-state-KX_noprfkey-<$<!n!>$>-First> game-H711))
          (Second0 (<pkg-state-KX_noprfkey-<$<!n!>$>-Second> game-H710))
          (Second1 (<pkg-state-KX_noprfkey-<$<!n!>$>-Second> game-H711))
            (RevTested0 (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTested> game-H710))
            (RevTested0-old (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTested> game-H710-old))
            (RevTested1 (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTested> game-H711))
            (RevTestEval0 (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTestEval> game-H710))
            (RevTestEval0-old (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTestEval> game-H710-old))
            (RevTestEval1 (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTestEval> game-H711))
            (RevTestEval1-old (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTestEval> game-H711-old))
            (Fresh0 (<pkg-state-KX_noprfkey-<$<!n!>$>-Fresh> game-H710))
            (Fresh1 (<pkg-state-KX_noprfkey-<$<!n!>$>-Fresh> game-H711))
            (Nonces0 (<pkg-state-Nonces-<$<!n!>$>-Nonces> nonces-H710))
            (Nonces1 (<pkg-state-Nonces-<$<!n!>$>-Nonces> nonces-H711))
            (Keys0 (<pkg-state-MAC-<$<!n!>$>-Keys> mac-H710))
            (Keys1 (<pkg-state-MAC-<$<!n!>$>-Keys> mac-H711))
            (Values0 (<pkg-state-MAC-<$<!n!>$>-Values> mac-H710))
            (Values1 (<pkg-state-MAC-<$<!n!>$>-Values> mac-H711))
            (kid0 (<pkg-state-PRF-<$<!n!>$>-kid_> prf-H710))
            (kid1 (<pkg-state-PRF-<$<!n!>$>-kid_> prf-H711))
            (Ltk0 (<pkg-state-PRF-<$<!n!>$>-LTK> prf-H710))
            (Ltk1 (<pkg-state-PRF-<$<!n!>$>-LTK> prf-H711))
            (Prf0 (<pkg-state-PRF-<$<!n!>$>-PRF> prf-H710))
            (Prf0-old (<pkg-state-PRF-<$<!n!>$>-PRF> prf-H710-old))
            (Prf1 (<pkg-state-PRF-<$<!n!>$>-PRF> prf-H711))
            (H0 (<pkg-state-PRF-<$<!n!>$>-H> prf-H710))
            (H1 (<pkg-state-PRF-<$<!n!>$>-H> prf-H711)))
        (and (= nonces-H710 nonces-H711)
           (= Ltk0 Ltk1)
           (= H0 H1)
           (= kid0 kid1)
           (= ctr0 ctr1)
           (= State0 State1)
           (= RevTested0 RevTested1)
           (= Fresh0 Fresh1)
           (= Keys0 Keys1)
           (= Values0 Values1)
           (= First0 First1)
           (= Second0 Second1)
           
           (freshness-and-honesty-matches State0 Fresh0 H0)
           (revtesteval-matches-sometimes State0 RevTestEval0 RevTestEval1 RevTested0)
           (no-overwriting-prf kid0 Prf0 H0 Keys0 Ltk0)
           (no-overwriting-game State0 ctr0)
           (sid-is-wellformed State0 Prf0 Fresh0 Keys0)
           (sid-matches State0 Prf0)
           (own-nonce-is-unique State0 Nonces0)
           (revtesteval-populated RevTestEval0 H0 Prf0)
           (revtesteval-populated RevTestEval1 H1 Prf1)
           (prfeval-has-matching-session Prf0 RevTestEval0 RevTestEval1 RevTested0 State0 Fresh0 Keys0)
           (key-not-computed-unless-test-or-reveal State0 RevTested0 Prf0 H0 Keys0)
           (mac-keys-equal-in-prf Prf0 Prf1)
           (kmac-and-tau-are-computed-correctly State0 Prf0 H0 Ltk0 Fresh0 Keys0)
           (kmac-and-tau-are-computed-correctly State1 Prf1 H1 Ltk1 Fresh1 Keys1)
           (stuff-not-initialized-early State0 Fresh0 Keys0)
           (mac-table-wellformed Keys0 Values0)

           (no-ideal-values-for-dishonest-keys H0 Prf0 Keys0)

           (sessions-in-first-exist First0 State0)
           (sessions-in-first-exist Second0 State0)

           (honest-sid-have-tau-in-mac State0 Fresh0 Values0)
           (first-set-by-initiator State0 First0 Fresh0 Values0)
           ;;(honest-sessions-to-first-and-second State0 Fresh0 First0 Second0)

           )))))



(define-fun <relation-lemma-debug-H7_1_0-H7_1_1-Send5>
    ((H710-old <GameState_H7_<$<!n!>$>>)
     (H711-old <GameState_H7_<$<!n!>$>>)
     (H710-return <OracleReturn_H7_<$<!n!>$>_KX_noprfkey_<$<!n!>$>_Send5>)
     (H711-return <OracleReturn_H7_<$<!n!>$>_KX_noprfkey_<$<!n!>$>_Send5>)
     (ctr Int) (msg Bits_256))
  Bool
  (let ((state-H710 (<oracle-return-H7-<$<!n!>$>-KX_noprfkey-<$<!n!>$>-Send5-game-state> H710-return))
        (state-H711 (<oracle-return-H7-<$<!n!>$>-KX_noprfkey-<$<!n!>$>-Send5-game-state> H711-return))
        (retval0 (<oracle-return-H7-<$<!n!>$>-KX_noprfkey-<$<!n!>$>-Send5-return-value-or-abort> H710-return))
        (retval1 (<oracle-return-H7-<$<!n!>$>-KX_noprfkey-<$<!n!>$>-Send5-return-value-or-abort> H711-return)))
    (let ((nonces-H710 (<game-H7-<$<!n!>$>-pkgstate-Nonces> state-H710))
          (nonces-H711 (<game-H7-<$<!n!>$>-pkgstate-Nonces>  state-H711))
          (mac-H710 (<game-H7-<$<!n!>$>-pkgstate-MAC> state-H710))
          (mac-H711 (<game-H7-<$<!n!>$>-pkgstate-MAC>  state-H711))
          (game-H710 (<game-H7-<$<!n!>$>-pkgstate-KX> state-H710))
          (game-H710-old (<game-H7-<$<!n!>$>-pkgstate-KX> H710-old))
          (game-H711 (<game-H7-<$<!n!>$>-pkgstate-KX>  state-H711))
          (game-H711-old (<game-H7-<$<!n!>$>-pkgstate-KX>  H711-old))
          (prf-H710 (<game-H7-<$<!n!>$>-pkgstate-PRF> state-H710))
          (prf-H710-old (<game-H7-<$<!n!>$>-pkgstate-PRF> H710-old))
          (prf-H711 (<game-H7-<$<!n!>$>-pkgstate-PRF>  state-H711)))
      (let ((ctr0 (<pkg-state-KX_noprfkey-<$<!n!>$>-ctr_> game-H710))
            (ctr1 (<pkg-state-KX_noprfkey-<$<!n!>$>-ctr_> game-H711))
            (State0 (<pkg-state-KX_noprfkey-<$<!n!>$>-State> game-H710))
            (State1 (<pkg-state-KX_noprfkey-<$<!n!>$>-State> game-H711))
          (First0 (<pkg-state-KX_noprfkey-<$<!n!>$>-First> game-H710))
          (First1 (<pkg-state-KX_noprfkey-<$<!n!>$>-First> game-H711))
          (Second0 (<pkg-state-KX_noprfkey-<$<!n!>$>-Second> game-H710))
          (Second1 (<pkg-state-KX_noprfkey-<$<!n!>$>-Second> game-H711))
            (RevTested0 (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTested> game-H710))
            (RevTested0-old (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTested> game-H710-old))
            (RevTested1 (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTested> game-H711))
            (RevTestEval0 (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTestEval> game-H710))
            (RevTestEval0-old (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTestEval> game-H710-old))
            (RevTestEval1 (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTestEval> game-H711))
            (RevTestEval1-old (<pkg-state-KX_noprfkey-<$<!n!>$>-RevTestEval> game-H711-old))
            (Fresh0 (<pkg-state-KX_noprfkey-<$<!n!>$>-Fresh> game-H710))
            (Fresh1 (<pkg-state-KX_noprfkey-<$<!n!>$>-Fresh> game-H711))
            (Nonces0 (<pkg-state-Nonces-<$<!n!>$>-Nonces> nonces-H710))
            (Nonces1 (<pkg-state-Nonces-<$<!n!>$>-Nonces> nonces-H711))
            (Keys0 (<pkg-state-MAC-<$<!n!>$>-Keys> mac-H710))
            (Keys1 (<pkg-state-MAC-<$<!n!>$>-Keys> mac-H711))
            (Values0 (<pkg-state-MAC-<$<!n!>$>-Values> mac-H710))
            (Values1 (<pkg-state-MAC-<$<!n!>$>-Values> mac-H711))
            (kid0 (<pkg-state-PRF-<$<!n!>$>-kid_> prf-H710))
            (kid1 (<pkg-state-PRF-<$<!n!>$>-kid_> prf-H711))
            (Ltk0 (<pkg-state-PRF-<$<!n!>$>-LTK> prf-H710))
            (Ltk1 (<pkg-state-PRF-<$<!n!>$>-LTK> prf-H711))
            (Prf0 (<pkg-state-PRF-<$<!n!>$>-PRF> prf-H710))
            (Prf0-old (<pkg-state-PRF-<$<!n!>$>-PRF> prf-H710-old))
            (Prf1 (<pkg-state-PRF-<$<!n!>$>-PRF> prf-H711))
            (H0 (<pkg-state-PRF-<$<!n!>$>-H> prf-H710))
            (H1 (<pkg-state-PRF-<$<!n!>$>-H> prf-H711)))
        (and (= nonces-H710 nonces-H711)
           (= Ltk0 Ltk1)
           (= H0 H1)
           (= kid0 kid1)
           (= ctr0 ctr1)
           (= State0 State1)
           (= RevTested0 RevTested1)
           (= Fresh0 Fresh1)
           (= Keys0 Keys1)
           (= Values0 Values1)
           (= First0 First1)
           (= Second0 Second1)
           
           (freshness-and-honesty-matches State0 Fresh0 H0)
           (revtesteval-matches-sometimes State0 RevTestEval0 RevTestEval1 RevTested0)
           (no-overwriting-prf kid0 Prf0 H0 Keys0 Ltk0)
           (no-overwriting-game State0 ctr0)
           (sid-is-wellformed State0 Prf0 Fresh0 Keys0)
           (sid-matches State0 Prf0)
           (own-nonce-is-unique State0 Nonces0)
           (revtesteval-populated RevTestEval0 H0 Prf0)
           (revtesteval-populated RevTestEval1 H1 Prf1)
           (prfeval-has-matching-session Prf0 RevTestEval0 RevTestEval1 RevTested0 State0 Fresh0 Keys0)
           (key-not-computed-unless-test-or-reveal State0 RevTested0 Prf0 H0 Keys0)
           (mac-keys-equal-in-prf Prf0 Prf1)
           (kmac-and-tau-are-computed-correctly State0 Prf0 H0 Ltk0 Fresh0 Keys0)
           (kmac-and-tau-are-computed-correctly State1 Prf1 H1 Ltk1 Fresh1 Keys1)
           (stuff-not-initialized-early State0 Fresh0 Keys0)
           (mac-table-wellformed Keys0 Values0)

           (no-ideal-values-for-dishonest-keys H0 Prf0 Keys0)

           (sessions-in-first-exist First0 State0)
           (sessions-in-first-exist Second0 State0)

           (four-mac-implies-three-mac Values0)
           (three-mac-implies-two-mac Values0)

           ;;(two-mac-implies-first Values0 First0)
           ;;(three-mac-implies-second Values0 Second0)

           (initiator-accepts-with-msg-2-only Values0 Fresh0 State0)
           (initiator-accepts-with-mac-four-only Values0 Fresh0 State0)
           (initiator-msg-2-with-mac-four-only Values0 Fresh0 State0)
           ;;(initiator-accepts-with-mac-four-only Values0 Fresh0 State0)
           (responder-accepts-with-mac-three-only Values0 Fresh0 State0)
           
           (honest-sid-have-tau-in-mac State0 Fresh0 Values0)
           (first-set-by-initiator State0 First0 Fresh0 Values0)
           ;;(honest-sessions-to-first-and-second State0 Fresh0 First0 Second0)

           )))))
