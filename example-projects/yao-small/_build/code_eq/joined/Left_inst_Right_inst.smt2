(set-logic ALL)
(declare-sort Bits_m 0)
(declare-sort Bits_n 0)
(declare-sort Bits_p 0)
(declare-datatypes ((Maybe 1)
)
 ((par (T)
 ((mk-some (maybe-get T)
)
 (mk-none)
)
)
)
)
(declare-datatypes ((ReturnValue 1)
)
 ((par (T)
 ((mk-return-value (return-value T)
)
 (mk-abort)
)
)
)
)
(declare-datatypes ((Tuple1 1)
)
 ((par (T1)
 ((mk-tuple1 (el1 T1)
)
)
)
)
)
(declare-datatypes ((Tuple2 2)
)
 ((par (T1 T2)
 ((mk-tuple2 (el1 T1)
 (el2 T2)
)
)
)
)
)
(declare-datatypes ((Tuple3 3)
)
 ((par (T1 T2 T3)
 ((mk-tuple3 (el1 T1)
 (el2 T2)
 (el3 T3)
)
)
)
)
)
(declare-datatypes ((Tuple4 4)
)
 ((par (T1 T2 T3 T4)
 ((mk-tuple4 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
)
)
)
)
)
(declare-datatypes ((Tuple5 5)
)
 ((par (T1 T2 T3 T4 T5)
 ((mk-tuple5 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
)
)
)
)
)
(declare-datatypes ((Tuple6 6)
)
 ((par (T1 T2 T3 T4 T5 T6)
 ((mk-tuple6 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
)
)
)
)
)
(declare-datatypes ((Tuple7 7)
)
 ((par (T1 T2 T3 T4 T5 T6 T7)
 ((mk-tuple7 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
)
)
)
)
)
(declare-datatypes ((Tuple8 8)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8)
 ((mk-tuple8 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
)
)
)
)
)
(declare-datatypes ((Tuple9 9)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9)
 ((mk-tuple9 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
)
)
)
)
)
(declare-datatypes ((Tuple10 10)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10)
 ((mk-tuple10 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
)
)
)
)
)
(declare-datatypes ((Tuple11 11)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11)
 ((mk-tuple11 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
)
)
)
)
)
(declare-datatypes ((Tuple12 12)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12)
 ((mk-tuple12 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
)
)
)
)
)
(declare-datatypes ((Tuple13 13)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13)
 ((mk-tuple13 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
)
)
)
)
)
(declare-datatypes ((Tuple14 14)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14)
 ((mk-tuple14 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
)
)
)
)
)
(declare-datatypes ((Tuple15 15)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15)
 ((mk-tuple15 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
)
)
)
)
)
(declare-datatypes ((Tuple16 16)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16)
 ((mk-tuple16 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
)
)
)
)
)
(declare-datatypes ((Tuple17 17)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17)
 ((mk-tuple17 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
)
)
)
)
)
(declare-datatypes ((Tuple18 18)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18)
 ((mk-tuple18 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
)
)
)
)
)
(declare-datatypes ((Tuple19 19)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19)
 ((mk-tuple19 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
)
)
)
)
)
(declare-datatypes ((Tuple20 20)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20)
 ((mk-tuple20 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
)
)
)
)
)
(declare-datatypes ((Tuple21 21)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21)
 ((mk-tuple21 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
)
)
)
)
)
(declare-datatypes ((Tuple22 22)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22)
 ((mk-tuple22 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
)
)
)
)
)
(declare-datatypes ((Tuple23 23)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23)
 ((mk-tuple23 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
)
)
)
)
)
(declare-datatypes ((Tuple24 24)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23 T24)
 ((mk-tuple24 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
 (el24 T24)
)
)
)
)
)
(declare-datatypes ((Tuple25 25)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23 T24 T25)
 ((mk-tuple25 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
 (el24 T24)
 (el25 T25)
)
)
)
)
)
(declare-datatypes ((Tuple26 26)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23 T24 T25 T26)
 ((mk-tuple26 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
 (el24 T24)
 (el25 T25)
 (el26 T26)
)
)
)
)
)
(declare-datatypes ((Tuple27 27)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23 T24 T25 T26 T27)
 ((mk-tuple27 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
 (el24 T24)
 (el25 T25)
 (el26 T26)
 (el27 T27)
)
)
)
)
)
(declare-datatypes ((Tuple28 28)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23 T24 T25 T26 T27 T28)
 ((mk-tuple28 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
 (el24 T24)
 (el25 T25)
 (el26 T26)
 (el27 T27)
 (el28 T28)
)
)
)
)
)
(declare-datatypes ((Tuple29 29)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23 T24 T25 T26 T27 T28 T29)
 ((mk-tuple29 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
 (el24 T24)
 (el25 T25)
 (el26 T26)
 (el27 T27)
 (el28 T28)
 (el29 T29)
)
)
)
)
)
(declare-datatypes ((Tuple30 30)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23 T24 T25 T26 T27 T28 T29 T30)
 ((mk-tuple30 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
 (el24 T24)
 (el25 T25)
 (el26 T26)
 (el27 T27)
 (el28 T28)
 (el29 T29)
 (el30 T30)
)
)
)
)
)
(declare-datatypes ((Tuple31 31)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23 T24 T25 T26 T27 T28 T29 T30 T31)
 ((mk-tuple31 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
 (el24 T24)
 (el25 T25)
 (el26 T26)
 (el27 T27)
 (el28 T28)
 (el29 T29)
 (el30 T30)
 (el31 T31)
)
)
)
)
)
(declare-datatype Empty ((mk-empty)
)
)
(declare-fun __sample-rand-Left-Bits_m (Int Int)
 Bits_m)
(declare-fun __sample-rand-Left-Bits_n (Int Int)
 Bits_n)
(declare-fun __sample-rand-Left-Bits_p (Int Int)
 Bits_p)
(declare-fun __func-Left-encm (Bits_n Bits_m Bits_n)
 Bits_p)
(declare-fun __func-Left-encn (Bits_n Bits_n Bits_n)
 Bits_m)
(declare-datatype State_Left_keys_top ((mk-state-Left-keys_top (state-Left-keys_top-T (Array Int (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (state-Left-keys_top-z (Array Int (Maybe Bool)
)
)
 (state-Left-keys_top-flag (Array Int (Maybe Bool)
)
)
)
)
)
(declare-datatype State_Left_keys_bottom ((mk-state-Left-keys_bottom (state-Left-keys_bottom-T (Array Int (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (state-Left-keys_bottom-z (Array Int (Maybe Bool)
)
)
 (state-Left-keys_bottom-flag (Array Int (Maybe Bool)
)
)
)
)
)
(declare-datatype State_Left_gate ((mk-state-Left-gate)
)
)
(declare-datatype State_Left_enc ((mk-state-Left-enc)
)
)
(declare-datatype CompositionState-Left ((mk-composition-state-Left (composition-pkgstate-Left-keys_top State_Left_keys_top)
 (composition-pkgstate-Left-keys_bottom State_Left_keys_bottom)
 (composition-pkgstate-Left-gate State_Left_gate)
 (composition-pkgstate-Left-enc State_Left_enc)
 (composition-param-Left-m Int)
 (composition-param-Left-n Int)
 (composition-param-Left-p Int)
 (composition-param-Left-zerom Bits_m)
 (composition-param-Left-zeron Bits_n)
 (composition-rand-Left-0 Int)
 (composition-rand-Left-1 Int)
 (composition-rand-Left-2 Int)
 (composition-rand-Left-3 Int)
 (composition-rand-Left-4 Int)
 (composition-rand-Left-5 Int)
 (composition-rand-Left-6 Int)
 (composition-rand-Left-7 Int)
 (composition-rand-Left-8 Int)
 (composition-rand-Left-9 Int)
 (composition-rand-Left-10 Int)
 (composition-rand-Left-11 Int)
 (composition-rand-Left-12 Int)
)
)
)
(declare-datatype Return-Left-keys_top-GETKEYSIN ((mk-return-Left-keys_top-GETKEYSIN (return-Left-keys_top-GETKEYSIN-game-state CompositionState-Left)
 (return-Left-keys_top-GETKEYSIN-return-value-or-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
)
(declare-datatype Return-Left-keys_top-GETAIN ((mk-return-Left-keys_top-GETAIN (return-Left-keys_top-GETAIN-game-state CompositionState-Left)
 (return-Left-keys_top-GETAIN-return-value-or-abort (ReturnValue Bits_n)
)
)
)
)
(declare-datatype Return-Left-keys_top-GETINAIN ((mk-return-Left-keys_top-GETINAIN (return-Left-keys_top-GETINAIN-game-state CompositionState-Left)
 (return-Left-keys_top-GETINAIN-return-value-or-abort (ReturnValue Bits_n)
)
)
)
)
(declare-datatype Return-Left-keys_top-GETAOUT ((mk-return-Left-keys_top-GETAOUT (return-Left-keys_top-GETAOUT-game-state CompositionState-Left)
 (return-Left-keys_top-GETAOUT-return-value-or-abort (ReturnValue Bits_n)
)
)
)
)
(declare-datatype Return-Left-keys_top-GETKEYSOUT ((mk-return-Left-keys_top-GETKEYSOUT (return-Left-keys_top-GETKEYSOUT-game-state CompositionState-Left)
 (return-Left-keys_top-GETKEYSOUT-return-value-or-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
)
(declare-datatype Return-Left-keys_top-GETBIT ((mk-return-Left-keys_top-GETBIT (return-Left-keys_top-GETBIT-game-state CompositionState-Left)
 (return-Left-keys_top-GETBIT-return-value-or-abort (ReturnValue Bool)
)
)
)
)
(declare-datatype Return-Left-keys_top-SETBIT ((mk-return-Left-keys_top-SETBIT (return-Left-keys_top-SETBIT-game-state CompositionState-Left)
 (return-Left-keys_top-SETBIT-return-value-or-abort (ReturnValue Empty)
)
)
)
)
(declare-datatype Return-Left-keys_bottom-GETKEYSIN ((mk-return-Left-keys_bottom-GETKEYSIN (return-Left-keys_bottom-GETKEYSIN-game-state CompositionState-Left)
 (return-Left-keys_bottom-GETKEYSIN-return-value-or-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
)
(declare-datatype Return-Left-keys_bottom-GETAIN ((mk-return-Left-keys_bottom-GETAIN (return-Left-keys_bottom-GETAIN-game-state CompositionState-Left)
 (return-Left-keys_bottom-GETAIN-return-value-or-abort (ReturnValue Bits_n)
)
)
)
)
(declare-datatype Return-Left-keys_bottom-GETINAIN ((mk-return-Left-keys_bottom-GETINAIN (return-Left-keys_bottom-GETINAIN-game-state CompositionState-Left)
 (return-Left-keys_bottom-GETINAIN-return-value-or-abort (ReturnValue Bits_n)
)
)
)
)
(declare-datatype Return-Left-keys_bottom-GETAOUT ((mk-return-Left-keys_bottom-GETAOUT (return-Left-keys_bottom-GETAOUT-game-state CompositionState-Left)
 (return-Left-keys_bottom-GETAOUT-return-value-or-abort (ReturnValue Bits_n)
)
)
)
)
(declare-datatype Return-Left-keys_bottom-GETKEYSOUT ((mk-return-Left-keys_bottom-GETKEYSOUT (return-Left-keys_bottom-GETKEYSOUT-game-state CompositionState-Left)
 (return-Left-keys_bottom-GETKEYSOUT-return-value-or-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
)
(declare-datatype Return-Left-keys_bottom-GETBIT ((mk-return-Left-keys_bottom-GETBIT (return-Left-keys_bottom-GETBIT-game-state CompositionState-Left)
 (return-Left-keys_bottom-GETBIT-return-value-or-abort (ReturnValue Bool)
)
)
)
)
(declare-datatype Return-Left-keys_bottom-SETBIT ((mk-return-Left-keys_bottom-SETBIT (return-Left-keys_bottom-SETBIT-game-state CompositionState-Left)
 (return-Left-keys_bottom-SETBIT-return-value-or-abort (ReturnValue Empty)
)
)
)
)
(declare-datatype Return-Left-gate-GBLG ((mk-return-Left-gate-GBLG (return-Left-gate-GBLG-game-state CompositionState-Left)
 (return-Left-gate-GBLG-return-value-or-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
(declare-datatype Return-Left-enc-ENCN ((mk-return-Left-enc-ENCN (return-Left-enc-ENCN-game-state CompositionState-Left)
 (return-Left-enc-ENCN-return-value-or-abort (ReturnValue Bits_m)
)
)
)
)
(declare-datatype Return-Left-enc-ENCM ((mk-return-Left-enc-ENCM (return-Left-enc-ENCM-game-state CompositionState-Left)
 (return-Left-enc-ENCM-return-value-or-abort (ReturnValue Bits_p)
)
)
)
)
; Composition of Left
(define-fun oracle-Left-keys_top-GETKEYSIN ((__global_state CompositionState-Left)
 (h Int)
)
 Return-Left-keys_top-GETKEYSIN (let ((__self_state (composition-pkgstate-Left-keys_top __global_state)
)
)
 (ite (= (select (state-Left-keys_top-flag __self_state)
 h)
 (mk-some true)
)
 (ite (= (select (state-Left-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Left-keys_top-GETKEYSIN __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Left-keys_top-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (let ((__global_state (mk-composition-state-Left __self_state (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_top-GETKEYSIN __global_state (mk-return-value Z)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Left __self_state (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_top-GETKEYSIN __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
)
)
)
(define-fun oracle-Left-keys_top-GETAIN ((__global_state CompositionState-Left)
 (h Int)
)
 Return-Left-keys_top-GETAIN (let ((__self_state (composition-pkgstate-Left-keys_top __global_state)
)
)
 (ite (= (select (state-Left-keys_top-flag __self_state)
 h)
 (mk-some true)
)
 (ite (= (select (state-Left-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Left-keys_top-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Left-keys_top-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (select (state-Left-keys_top-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Left-keys_top-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-2 (maybe-get (select (state-Left-keys_top-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z zz)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Left-keys_top-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-3 (maybe-get (select Z zz)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (mk-composition-state-Left __self_state (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_top-GETAIN __global_state (mk-return-value k)
)
)
)
)
)
)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Left __self_state (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_top-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
)
)
)
)
(define-fun oracle-Left-keys_top-GETINAIN ((__global_state CompositionState-Left)
 (h Int)
)
 Return-Left-keys_top-GETINAIN (let ((__self_state (composition-pkgstate-Left-keys_top __global_state)
)
)
 (ite (= (select (state-Left-keys_top-flag __self_state)
 h)
 (mk-some true)
)
 (ite (= (select (state-Left-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Left-keys_top-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Left-keys_top-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (select (state-Left-keys_top-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Left-keys_top-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-2 (maybe-get (select (state-Left-keys_top-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z (not zz)
)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Left-keys_top-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-3 (maybe-get (select Z (not zz)
)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (mk-composition-state-Left __self_state (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_top-GETINAIN __global_state (mk-return-value k)
)
)
)
)
)
)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Left __self_state (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_top-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
)
)
)
)
(define-fun oracle-Left-keys_top-GETAOUT ((__global_state CompositionState-Left)
 (h Int)
)
 Return-Left-keys_top-GETAOUT (let ((__self_state (composition-pkgstate-Left-keys_top __global_state)
)
)
 (ite (not (= (select (state-Left-keys_top-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
)
 (let ((__self_state (mk-state-Left-keys_top (state-Left-keys_top-T __self_state)
 (state-Left-keys_top-z __self_state)
 (store (state-Left-keys_top-flag __self_state)
 h (mk-some true)
)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (ite (= (select (state-Left-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((r (__sample-rand-Left-Bits_n 1 (composition-rand-Left-1 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (+ 1 (composition-rand-Left-1 __global_state)
)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (let ((Z (store Z true (mk-some r)
)
)
)
 (let ((rr (__sample-rand-Left-Bits_n 2 (composition-rand-Left-2 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (+ 1 (composition-rand-Left-2 __global_state)
)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (let ((Z (store Z false (mk-some rr)
)
)
)
 (let ((__self_state (mk-state-Left-keys_top (store (state-Left-keys_top-T __self_state)
 h (mk-some Z)
)
 (state-Left-keys_top-z __self_state)
 (state-Left-keys_top-flag __self_state)
)
)
)
 (ite (= (select (state-Left-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Left-keys_top-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Left-keys_top-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (select (state-Left-keys_top-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Left-keys_top-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-2 (maybe-get (select (state-Left-keys_top-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z zz)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Left-keys_top-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-3 (maybe-get (select Z zz)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (mk-composition-state-Left __self_state (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_top-GETAOUT __global_state (mk-return-value k)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (ite (= (select (state-Left-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Left-keys_top-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Left-keys_top-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (select (state-Left-keys_top-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Left-keys_top-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-2 (maybe-get (select (state-Left-keys_top-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z zz)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Left-keys_top-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-3 (maybe-get (select Z zz)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (mk-composition-state-Left __self_state (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_top-GETAOUT __global_state (mk-return-value k)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Left __self_state (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_top-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
)
)
)
)
(define-fun oracle-Left-keys_top-GETKEYSOUT ((__global_state CompositionState-Left)
 (h Int)
)
 Return-Left-keys_top-GETKEYSOUT (let ((__self_state (composition-pkgstate-Left-keys_top __global_state)
)
)
 (ite (not (= (select (state-Left-keys_top-flag __self_state)
 h)
 (mk-some true)
)
)
 (let ((__self_state (mk-state-Left-keys_top (state-Left-keys_top-T __self_state)
 (state-Left-keys_top-z __self_state)
 (store (state-Left-keys_top-flag __self_state)
 h (mk-some true)
)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (ite (= (select (state-Left-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((r (__sample-rand-Left-Bits_n 3 (composition-rand-Left-3 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (+ 1 (composition-rand-Left-3 __global_state)
)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (let ((Z (store Z true (mk-some r)
)
)
)
 (let ((rr (__sample-rand-Left-Bits_n 4 (composition-rand-Left-4 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (+ 1 (composition-rand-Left-4 __global_state)
)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (let ((Z (store Z false (mk-some rr)
)
)
)
 (let ((__self_state (mk-state-Left-keys_top (store (state-Left-keys_top-T __self_state)
 h (mk-some Z)
)
 (state-Left-keys_top-z __self_state)
 (state-Left-keys_top-flag __self_state)
)
)
)
 (ite (= (select (state-Left-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Left-keys_top-GETKEYSOUT __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Left-keys_top-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (let ((__global_state (mk-composition-state-Left __self_state (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_top-GETKEYSOUT __global_state (mk-return-value Z)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (ite (= (select (state-Left-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Left-keys_top-GETKEYSOUT __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Left-keys_top-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (let ((__global_state (mk-composition-state-Left __self_state (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_top-GETKEYSOUT __global_state (mk-return-value Z)
)
)
)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Left __self_state (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_top-GETKEYSOUT __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
)
)
)
(define-fun oracle-Left-keys_top-GETBIT ((__global_state CompositionState-Left)
 (h Int)
)
 Return-Left-keys_top-GETBIT (let ((__self_state (composition-pkgstate-Left-keys_top __global_state)
)
)
 (ite (not (= (select (state-Left-keys_top-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
)
 (ite (= (select (state-Left-keys_top-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Left-keys_top-GETBIT __global_state (as mk-abort (ReturnValue Bool)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Left-keys_top-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-1)
)
 (let ((__global_state (mk-composition-state-Left __self_state (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_top-GETBIT __global_state (mk-return-value zz)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Left __self_state (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_top-GETBIT __global_state (as mk-abort (ReturnValue Bool)
)
)
)
)
)
)
(define-fun oracle-Left-keys_top-SETBIT ((__global_state CompositionState-Left)
 (h Int)
 (zz Bool)
)
 Return-Left-keys_top-SETBIT (let ((__self_state (composition-pkgstate-Left-keys_top __global_state)
)
)
 (ite (= (select (state-Left-keys_top-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (let ((__self_state (mk-state-Left-keys_top (state-Left-keys_top-T __self_state)
 (store (state-Left-keys_top-z __self_state)
 h (mk-some zz)
)
 (state-Left-keys_top-flag __self_state)
)
)
)
 (let ((__global_state (mk-composition-state-Left __self_state (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_top-SETBIT __global_state (mk-return-value mk-empty)
)
)
)
 (let ((__global_state (mk-composition-state-Left __self_state (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_top-SETBIT __global_state (as mk-abort (ReturnValue Empty)
)
)
)
)
)
)
(define-fun oracle-Left-keys_bottom-GETKEYSIN ((__global_state CompositionState-Left)
 (h Int)
)
 Return-Left-keys_bottom-GETKEYSIN (let ((__self_state (composition-pkgstate-Left-keys_bottom __global_state)
)
)
 (ite (= (select (state-Left-keys_bottom-flag __self_state)
 h)
 (mk-some true)
)
 (ite (= (select (state-Left-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Left-keys_bottom-GETKEYSIN __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Left-keys_bottom-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 __self_state (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_bottom-GETKEYSIN __global_state (mk-return-value Z)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 __self_state (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_bottom-GETKEYSIN __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
)
)
)
(define-fun oracle-Left-keys_bottom-GETAIN ((__global_state CompositionState-Left)
 (h Int)
)
 Return-Left-keys_bottom-GETAIN (let ((__self_state (composition-pkgstate-Left-keys_bottom __global_state)
)
)
 (ite (= (select (state-Left-keys_bottom-flag __self_state)
 h)
 (mk-some true)
)
 (ite (= (select (state-Left-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Left-keys_bottom-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Left-keys_bottom-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (select (state-Left-keys_bottom-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Left-keys_bottom-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-2 (maybe-get (select (state-Left-keys_bottom-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z zz)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Left-keys_bottom-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-3 (maybe-get (select Z zz)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 __self_state (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_bottom-GETAIN __global_state (mk-return-value k)
)
)
)
)
)
)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 __self_state (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_bottom-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
)
)
)
)
(define-fun oracle-Left-keys_bottom-GETINAIN ((__global_state CompositionState-Left)
 (h Int)
)
 Return-Left-keys_bottom-GETINAIN (let ((__self_state (composition-pkgstate-Left-keys_bottom __global_state)
)
)
 (ite (= (select (state-Left-keys_bottom-flag __self_state)
 h)
 (mk-some true)
)
 (ite (= (select (state-Left-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Left-keys_bottom-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Left-keys_bottom-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (select (state-Left-keys_bottom-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Left-keys_bottom-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-2 (maybe-get (select (state-Left-keys_bottom-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z (not zz)
)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Left-keys_bottom-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-3 (maybe-get (select Z (not zz)
)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 __self_state (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_bottom-GETINAIN __global_state (mk-return-value k)
)
)
)
)
)
)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 __self_state (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_bottom-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
)
)
)
)
(define-fun oracle-Left-keys_bottom-GETAOUT ((__global_state CompositionState-Left)
 (h Int)
)
 Return-Left-keys_bottom-GETAOUT (let ((__self_state (composition-pkgstate-Left-keys_bottom __global_state)
)
)
 (ite (not (= (select (state-Left-keys_bottom-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
)
 (let ((__self_state (mk-state-Left-keys_bottom (state-Left-keys_bottom-T __self_state)
 (state-Left-keys_bottom-z __self_state)
 (store (state-Left-keys_bottom-flag __self_state)
 h (mk-some true)
)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (ite (= (select (state-Left-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((r (__sample-rand-Left-Bits_n 5 (composition-rand-Left-5 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (+ 1 (composition-rand-Left-5 __global_state)
)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (let ((Z (store Z true (mk-some r)
)
)
)
 (let ((rr (__sample-rand-Left-Bits_n 6 (composition-rand-Left-6 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (+ 1 (composition-rand-Left-6 __global_state)
)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (let ((Z (store Z false (mk-some rr)
)
)
)
 (let ((__self_state (mk-state-Left-keys_bottom (store (state-Left-keys_bottom-T __self_state)
 h (mk-some Z)
)
 (state-Left-keys_bottom-z __self_state)
 (state-Left-keys_bottom-flag __self_state)
)
)
)
 (ite (= (select (state-Left-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Left-keys_bottom-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Left-keys_bottom-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (select (state-Left-keys_bottom-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Left-keys_bottom-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-2 (maybe-get (select (state-Left-keys_bottom-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z zz)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Left-keys_bottom-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-3 (maybe-get (select Z zz)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 __self_state (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_bottom-GETAOUT __global_state (mk-return-value k)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (ite (= (select (state-Left-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Left-keys_bottom-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Left-keys_bottom-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (select (state-Left-keys_bottom-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Left-keys_bottom-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-2 (maybe-get (select (state-Left-keys_bottom-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z zz)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Left-keys_bottom-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-3 (maybe-get (select Z zz)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 __self_state (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_bottom-GETAOUT __global_state (mk-return-value k)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 __self_state (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_bottom-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
)
)
)
)
(define-fun oracle-Left-keys_bottom-GETKEYSOUT ((__global_state CompositionState-Left)
 (h Int)
)
 Return-Left-keys_bottom-GETKEYSOUT (let ((__self_state (composition-pkgstate-Left-keys_bottom __global_state)
)
)
 (ite (not (= (select (state-Left-keys_bottom-flag __self_state)
 h)
 (mk-some true)
)
)
 (let ((__self_state (mk-state-Left-keys_bottom (state-Left-keys_bottom-T __self_state)
 (state-Left-keys_bottom-z __self_state)
 (store (state-Left-keys_bottom-flag __self_state)
 h (mk-some true)
)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (ite (= (select (state-Left-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((r (__sample-rand-Left-Bits_n 7 (composition-rand-Left-7 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (+ 1 (composition-rand-Left-7 __global_state)
)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (let ((Z (store Z true (mk-some r)
)
)
)
 (let ((rr (__sample-rand-Left-Bits_n 8 (composition-rand-Left-8 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (+ 1 (composition-rand-Left-8 __global_state)
)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (let ((Z (store Z false (mk-some rr)
)
)
)
 (let ((__self_state (mk-state-Left-keys_bottom (store (state-Left-keys_bottom-T __self_state)
 h (mk-some Z)
)
 (state-Left-keys_bottom-z __self_state)
 (state-Left-keys_bottom-flag __self_state)
)
)
)
 (ite (= (select (state-Left-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Left-keys_bottom-GETKEYSOUT __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Left-keys_bottom-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 __self_state (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_bottom-GETKEYSOUT __global_state (mk-return-value Z)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (ite (= (select (state-Left-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Left-keys_bottom-GETKEYSOUT __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Left-keys_bottom-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 __self_state (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_bottom-GETKEYSOUT __global_state (mk-return-value Z)
)
)
)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 __self_state (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_bottom-GETKEYSOUT __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
)
)
)
(define-fun oracle-Left-keys_bottom-GETBIT ((__global_state CompositionState-Left)
 (h Int)
)
 Return-Left-keys_bottom-GETBIT (let ((__self_state (composition-pkgstate-Left-keys_bottom __global_state)
)
)
 (ite (not (= (select (state-Left-keys_bottom-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
)
 (ite (= (select (state-Left-keys_bottom-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Left-keys_bottom-GETBIT __global_state (as mk-abort (ReturnValue Bool)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Left-keys_bottom-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-1)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 __self_state (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_bottom-GETBIT __global_state (mk-return-value zz)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 __self_state (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_bottom-GETBIT __global_state (as mk-abort (ReturnValue Bool)
)
)
)
)
)
)
(define-fun oracle-Left-keys_bottom-SETBIT ((__global_state CompositionState-Left)
 (h Int)
 (zz Bool)
)
 Return-Left-keys_bottom-SETBIT (let ((__self_state (composition-pkgstate-Left-keys_bottom __global_state)
)
)
 (ite (= (select (state-Left-keys_bottom-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (let ((__self_state (mk-state-Left-keys_bottom (state-Left-keys_bottom-T __self_state)
 (store (state-Left-keys_bottom-z __self_state)
 h (mk-some zz)
)
 (state-Left-keys_bottom-flag __self_state)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 __self_state (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_bottom-SETBIT __global_state (mk-return-value mk-empty)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 __self_state (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-keys_bottom-SETBIT __global_state (as mk-abort (ReturnValue Empty)
)
)
)
)
)
)
(define-fun oracle-Left-enc-ENCN ((__global_state CompositionState-Left)
 (j Int)
 (d Bool)
 (nzero Bits_n)
 (none Bits_n)
)
 Return-Left-enc-ENCN (let ((__self_state (composition-pkgstate-Left-enc __global_state)
)
)
 (let ((__ret (oracle-Left-keys_top-GETKEYSIN __global_state j)
)
)
 (ite (= __ret (mk-return-Left-keys_top-GETKEYSIN __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
 (let ((__global_state (return-Left-keys_top-GETKEYSIN-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 __self_state (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-enc-ENCN __global_state (as mk-abort (ReturnValue Bits_m)
)
)
)
)
 (let ((__global_state (return-Left-keys_top-GETKEYSIN-game-state __ret)
)
 (K (return-value (return-Left-keys_top-GETKEYSIN-return-value-or-abort __ret)
)
)
)
 (let ((__ret (oracle-Left-keys_top-GETBIT __global_state j)
)
)
 (ite (= __ret (mk-return-Left-keys_top-GETBIT __global_state (as mk-abort (ReturnValue Bool)
)
)
)
 (let ((__global_state (return-Left-keys_top-GETBIT-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 __self_state (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-enc-ENCN __global_state (as mk-abort (ReturnValue Bits_m)
)
)
)
)
 (let ((__global_state (return-Left-keys_top-GETBIT-game-state __ret)
)
 (z (return-value (return-Left-keys_top-GETBIT-return-value-or-abort __ret)
)
)
)
 (let ((r (__sample-rand-Left-Bits_n 9 (composition-rand-Left-9 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (+ 1 (composition-rand-Left-9 __global_state)
)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (let ((c (__sample-rand-Left-Bits_m 10 (composition-rand-Left-10 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (+ 1 (composition-rand-Left-10 __global_state)
)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (ite (= d z)
 (ite (= (select K z)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Left-enc-ENCN __global_state (as mk-abort (ReturnValue Bits_m)
)
)
 (let ((unwrap-1 (maybe-get (select K z)
)
)
)
 (let ((c (__func-Left-encn unwrap-1 nzero r)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 __self_state (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-enc-ENCN __global_state (mk-return-value c)
)
)
)
)
)
 (ite (= (select K z)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Left-enc-ENCN __global_state (as mk-abort (ReturnValue Bits_m)
)
)
 (let ((unwrap-2 (maybe-get (select K z)
)
)
)
 (let ((c (__func-Left-encn unwrap-2 none r)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 __self_state (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-enc-ENCN __global_state (mk-return-value c)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define-fun oracle-Left-enc-ENCM ((__global_state CompositionState-Left)
 (j Int)
 (d Bool)
 (mzero Bits_m)
 (mone Bits_m)
)
 Return-Left-enc-ENCM (let ((__self_state (composition-pkgstate-Left-enc __global_state)
)
)
 (let ((__ret (oracle-Left-keys_top-GETKEYSIN __global_state j)
)
)
 (ite (= __ret (mk-return-Left-keys_top-GETKEYSIN __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
 (let ((__global_state (return-Left-keys_top-GETKEYSIN-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 __self_state (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-enc-ENCM __global_state (as mk-abort (ReturnValue Bits_p)
)
)
)
)
 (let ((__global_state (return-Left-keys_top-GETKEYSIN-game-state __ret)
)
 (K (return-value (return-Left-keys_top-GETKEYSIN-return-value-or-abort __ret)
)
)
)
 (let ((__ret (oracle-Left-keys_top-GETBIT __global_state j)
)
)
 (ite (= __ret (mk-return-Left-keys_top-GETBIT __global_state (as mk-abort (ReturnValue Bool)
)
)
)
 (let ((__global_state (return-Left-keys_top-GETBIT-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 __self_state (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-enc-ENCM __global_state (as mk-abort (ReturnValue Bits_p)
)
)
)
)
 (let ((__global_state (return-Left-keys_top-GETBIT-game-state __ret)
)
 (z (return-value (return-Left-keys_top-GETBIT-return-value-or-abort __ret)
)
)
)
 (let ((r (__sample-rand-Left-Bits_n 11 (composition-rand-Left-11 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (+ 1 (composition-rand-Left-11 __global_state)
)
 (composition-rand-Left-12 __global_state)
)
)
)
 (let ((c (__sample-rand-Left-Bits_p 12 (composition-rand-Left-12 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (+ 1 (composition-rand-Left-12 __global_state)
)
)
)
)
 (ite (= d z)
 (ite (= (select K z)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Left-enc-ENCM __global_state (as mk-abort (ReturnValue Bits_p)
)
)
 (let ((unwrap-1 (maybe-get (select K z)
)
)
)
 (let ((c (__func-Left-encm unwrap-1 mzero r)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 __self_state (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-enc-ENCM __global_state (mk-return-value c)
)
)
)
)
)
 (ite (= (select K z)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Left-enc-ENCM __global_state (as mk-abort (ReturnValue Bits_p)
)
)
 (let ((unwrap-2 (maybe-get (select K z)
)
)
)
 (let ((c (__func-Left-encm unwrap-2 mone r)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 (composition-pkgstate-Left-gate __global_state)
 __self_state (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-enc-ENCM __global_state (mk-return-value c)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define-fun oracle-Left-gate-GBLG ((__global_state CompositionState-Left)
 (h Int)
 (l Int)
 (r Int)
 (op (Array (Tuple2 Bool Bool)
 (Maybe Bool)
)
)
 (j Int)
)
 Return-Left-gate-GBLG (let ((__self_state (composition-pkgstate-Left-gate __global_state)
)
)
 (let ((C ((as const (Array Bits_p (Maybe Bool)
)
)
 (as mk-none (Maybe Bool)
)
)
)
)
 (let ((__ret (oracle-Left-keys_bottom-GETKEYSOUT __global_state j)
)
)
 (ite (= __ret (mk-return-Left-keys_bottom-GETKEYSOUT __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
 (let ((__global_state (return-Left-keys_bottom-GETKEYSOUT-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 __self_state (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Left-keys_bottom-GETKEYSOUT-game-state __ret)
)
 (Z (return-value (return-Left-keys_bottom-GETKEYSOUT-return-value-or-abort __ret)
)
)
)
 (let ((bl false)
)
 (let ((br false)
)
 (ite (= (select op (mk-tuple2 bl br)
)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-1 (maybe-get (select op (mk-tuple2 bl br)
)
)
)
)
 (let ((bj unwrap-1)
)
 (ite (= (select Z bj)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-2 (maybe-get (select Z bj)
)
)
)
 (let ((kzero unwrap-2)
)
 (let ((__ret (oracle-Left-enc-ENCN __global_state l bl kzero (composition-param-Left-zeron __global_state)
)
)
)
 (ite (= __ret (mk-return-Left-enc-ENCN __global_state (as mk-abort (ReturnValue Bits_m)
)
)
)
 (let ((__global_state (return-Left-enc-ENCN-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 __self_state (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Left-enc-ENCN-game-state __ret)
)
 (czeroin (return-value (return-Left-enc-ENCN-return-value-or-abort __ret)
)
)
)
 (let ((__ret (oracle-Left-enc-ENCN __global_state l bl (composition-param-Left-zeron __global_state)
 (composition-param-Left-zeron __global_state)
)
)
)
 (ite (= __ret (mk-return-Left-enc-ENCN __global_state (as mk-abort (ReturnValue Bits_m)
)
)
)
 (let ((__global_state (return-Left-enc-ENCN-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 __self_state (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Left-enc-ENCN-game-state __ret)
)
 (conein (return-value (return-Left-enc-ENCN-return-value-or-abort __ret)
)
)
)
 (let ((__ret (oracle-Left-enc-ENCM __global_state r br conein czeroin)
)
)
 (ite (= __ret (mk-return-Left-enc-ENCM __global_state (as mk-abort (ReturnValue Bits_p)
)
)
)
 (let ((__global_state (return-Left-enc-ENCM-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 __self_state (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Left-enc-ENCM-game-state __ret)
)
 (cout (return-value (return-Left-enc-ENCM-return-value-or-abort __ret)
)
)
)
 (let ((C ((as const (Array Bits_p (Maybe Bool)
)
)
 (as mk-none (Maybe Bool)
)
)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((bl true)
)
 (let ((br false)
)
 (ite (= (select op (mk-tuple2 bl br)
)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-3 (maybe-get (select op (mk-tuple2 bl br)
)
)
)
)
 (let ((bj unwrap-3)
)
 (ite (= (select Z bj)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-4 (maybe-get (select Z bj)
)
)
)
 (let ((kzero unwrap-4)
)
 (let ((__ret (oracle-Left-enc-ENCN __global_state l bl kzero (composition-param-Left-zeron __global_state)
)
)
)
 (ite (= __ret (mk-return-Left-enc-ENCN __global_state (as mk-abort (ReturnValue Bits_m)
)
)
)
 (let ((__global_state (return-Left-enc-ENCN-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 __self_state (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Left-enc-ENCN-game-state __ret)
)
 (czeroin (return-value (return-Left-enc-ENCN-return-value-or-abort __ret)
)
)
)
 (let ((__ret (oracle-Left-enc-ENCN __global_state l bl (composition-param-Left-zeron __global_state)
 (composition-param-Left-zeron __global_state)
)
)
)
 (ite (= __ret (mk-return-Left-enc-ENCN __global_state (as mk-abort (ReturnValue Bits_m)
)
)
)
 (let ((__global_state (return-Left-enc-ENCN-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 __self_state (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Left-enc-ENCN-game-state __ret)
)
 (conein (return-value (return-Left-enc-ENCN-return-value-or-abort __ret)
)
)
)
 (let ((__ret (oracle-Left-enc-ENCM __global_state r br conein czeroin)
)
)
 (ite (= __ret (mk-return-Left-enc-ENCM __global_state (as mk-abort (ReturnValue Bits_p)
)
)
)
 (let ((__global_state (return-Left-enc-ENCM-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 __self_state (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Left-enc-ENCM-game-state __ret)
)
 (cout (return-value (return-Left-enc-ENCM-return-value-or-abort __ret)
)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((bl false)
)
 (let ((br true)
)
 (ite (= (select op (mk-tuple2 bl br)
)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-5 (maybe-get (select op (mk-tuple2 bl br)
)
)
)
)
 (let ((bj unwrap-5)
)
 (ite (= (select Z bj)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-6 (maybe-get (select Z bj)
)
)
)
 (let ((kzero unwrap-6)
)
 (let ((__ret (oracle-Left-enc-ENCN __global_state l bl kzero (composition-param-Left-zeron __global_state)
)
)
)
 (ite (= __ret (mk-return-Left-enc-ENCN __global_state (as mk-abort (ReturnValue Bits_m)
)
)
)
 (let ((__global_state (return-Left-enc-ENCN-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 __self_state (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Left-enc-ENCN-game-state __ret)
)
 (czeroin (return-value (return-Left-enc-ENCN-return-value-or-abort __ret)
)
)
)
 (let ((__ret (oracle-Left-enc-ENCN __global_state l bl (composition-param-Left-zeron __global_state)
 (composition-param-Left-zeron __global_state)
)
)
)
 (ite (= __ret (mk-return-Left-enc-ENCN __global_state (as mk-abort (ReturnValue Bits_m)
)
)
)
 (let ((__global_state (return-Left-enc-ENCN-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 __self_state (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Left-enc-ENCN-game-state __ret)
)
 (conein (return-value (return-Left-enc-ENCN-return-value-or-abort __ret)
)
)
)
 (let ((__ret (oracle-Left-enc-ENCM __global_state r br conein czeroin)
)
)
 (ite (= __ret (mk-return-Left-enc-ENCM __global_state (as mk-abort (ReturnValue Bits_p)
)
)
)
 (let ((__global_state (return-Left-enc-ENCM-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 __self_state (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Left-enc-ENCM-game-state __ret)
)
 (cout (return-value (return-Left-enc-ENCM-return-value-or-abort __ret)
)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((bl true)
)
 (let ((br true)
)
 (ite (= (select op (mk-tuple2 bl br)
)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-7 (maybe-get (select op (mk-tuple2 bl br)
)
)
)
)
 (let ((bj unwrap-7)
)
 (ite (= (select Z bj)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-8 (maybe-get (select Z bj)
)
)
)
 (let ((kzero unwrap-8)
)
 (let ((__ret (oracle-Left-enc-ENCN __global_state l bl kzero (composition-param-Left-zeron __global_state)
)
)
)
 (ite (= __ret (mk-return-Left-enc-ENCN __global_state (as mk-abort (ReturnValue Bits_m)
)
)
)
 (let ((__global_state (return-Left-enc-ENCN-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 __self_state (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Left-enc-ENCN-game-state __ret)
)
 (czeroin (return-value (return-Left-enc-ENCN-return-value-or-abort __ret)
)
)
)
 (let ((__ret (oracle-Left-enc-ENCN __global_state l bl (composition-param-Left-zeron __global_state)
 (composition-param-Left-zeron __global_state)
)
)
)
 (ite (= __ret (mk-return-Left-enc-ENCN __global_state (as mk-abort (ReturnValue Bits_m)
)
)
)
 (let ((__global_state (return-Left-enc-ENCN-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 __self_state (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Left-enc-ENCN-game-state __ret)
)
 (conein (return-value (return-Left-enc-ENCN-return-value-or-abort __ret)
)
)
)
 (let ((__ret (oracle-Left-enc-ENCM __global_state r br conein czeroin)
)
)
 (ite (= __ret (mk-return-Left-enc-ENCM __global_state (as mk-abort (ReturnValue Bits_p)
)
)
)
 (let ((__global_state (return-Left-enc-ENCM-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 __self_state (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-gate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Left-enc-ENCM-game-state __ret)
)
 (cout (return-value (return-Left-enc-ENCM-return-value-or-abort __ret)
)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((__global_state (mk-composition-state-Left (composition-pkgstate-Left-keys_top __global_state)
 (composition-pkgstate-Left-keys_bottom __global_state)
 __self_state (composition-pkgstate-Left-enc __global_state)
 (composition-param-Left-m __global_state)
 (composition-param-Left-n __global_state)
 (composition-param-Left-p __global_state)
 (composition-param-Left-zerom __global_state)
 (composition-param-Left-zeron __global_state)
 (composition-rand-Left-0 __global_state)
 (composition-rand-Left-1 __global_state)
 (composition-rand-Left-2 __global_state)
 (composition-rand-Left-3 __global_state)
 (composition-rand-Left-4 __global_state)
 (composition-rand-Left-5 __global_state)
 (composition-rand-Left-6 __global_state)
 (composition-rand-Left-7 __global_state)
 (composition-rand-Left-8 __global_state)
 (composition-rand-Left-9 __global_state)
 (composition-rand-Left-10 __global_state)
 (composition-rand-Left-11 __global_state)
 (composition-rand-Left-12 __global_state)
)
)
)
 (mk-return-Left-gate-GBLG __global_state (mk-return-value C)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(declare-fun __sample-rand-Right-Bits_n (Int Int)
 Bits_n)
(declare-fun __func-Right-encm (Bits_n Bits_m Bits_n)
 Bits_p)
(declare-fun __func-Right-encn (Bits_n Bits_n Bits_n)
 Bits_m)
(declare-datatype State_Right_keys_top ((mk-state-Right-keys_top (state-Right-keys_top-T (Array Int (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (state-Right-keys_top-z (Array Int (Maybe Bool)
)
)
 (state-Right-keys_top-flag (Array Int (Maybe Bool)
)
)
)
)
)
(declare-datatype State_Right_keys_bottom ((mk-state-Right-keys_bottom (state-Right-keys_bottom-T (Array Int (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (state-Right-keys_bottom-z (Array Int (Maybe Bool)
)
)
 (state-Right-keys_bottom-flag (Array Int (Maybe Bool)
)
)
)
)
)
(declare-datatype State_Right_simgate ((mk-state-Right-simgate)
)
)
(declare-datatype State_Right_ev ((mk-state-Right-ev)
)
)
(declare-datatype CompositionState-Right ((mk-composition-state-Right (composition-pkgstate-Right-keys_top State_Right_keys_top)
 (composition-pkgstate-Right-keys_bottom State_Right_keys_bottom)
 (composition-pkgstate-Right-simgate State_Right_simgate)
 (composition-pkgstate-Right-ev State_Right_ev)
 (composition-param-Right-m Int)
 (composition-param-Right-n Int)
 (composition-param-Right-p Int)
 (composition-param-Right-zerom Bits_m)
 (composition-param-Right-zeron Bits_n)
 (composition-rand-Right-0 Int)
 (composition-rand-Right-1 Int)
 (composition-rand-Right-2 Int)
 (composition-rand-Right-3 Int)
 (composition-rand-Right-4 Int)
 (composition-rand-Right-5 Int)
 (composition-rand-Right-6 Int)
 (composition-rand-Right-7 Int)
 (composition-rand-Right-8 Int)
 (composition-rand-Right-9 Int)
 (composition-rand-Right-10 Int)
 (composition-rand-Right-11 Int)
 (composition-rand-Right-12 Int)
 (composition-rand-Right-13 Int)
 (composition-rand-Right-14 Int)
 (composition-rand-Right-15 Int)
 (composition-rand-Right-16 Int)
)
)
)
(declare-datatype Return-Right-keys_top-GETKEYSIN ((mk-return-Right-keys_top-GETKEYSIN (return-Right-keys_top-GETKEYSIN-game-state CompositionState-Right)
 (return-Right-keys_top-GETKEYSIN-return-value-or-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
)
(declare-datatype Return-Right-keys_top-GETAIN ((mk-return-Right-keys_top-GETAIN (return-Right-keys_top-GETAIN-game-state CompositionState-Right)
 (return-Right-keys_top-GETAIN-return-value-or-abort (ReturnValue Bits_n)
)
)
)
)
(declare-datatype Return-Right-keys_top-GETINAIN ((mk-return-Right-keys_top-GETINAIN (return-Right-keys_top-GETINAIN-game-state CompositionState-Right)
 (return-Right-keys_top-GETINAIN-return-value-or-abort (ReturnValue Bits_n)
)
)
)
)
(declare-datatype Return-Right-keys_top-GETAOUT ((mk-return-Right-keys_top-GETAOUT (return-Right-keys_top-GETAOUT-game-state CompositionState-Right)
 (return-Right-keys_top-GETAOUT-return-value-or-abort (ReturnValue Bits_n)
)
)
)
)
(declare-datatype Return-Right-keys_top-GETKEYSOUT ((mk-return-Right-keys_top-GETKEYSOUT (return-Right-keys_top-GETKEYSOUT-game-state CompositionState-Right)
 (return-Right-keys_top-GETKEYSOUT-return-value-or-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
)
(declare-datatype Return-Right-keys_top-GETBIT ((mk-return-Right-keys_top-GETBIT (return-Right-keys_top-GETBIT-game-state CompositionState-Right)
 (return-Right-keys_top-GETBIT-return-value-or-abort (ReturnValue Bool)
)
)
)
)
(declare-datatype Return-Right-keys_top-SETBIT ((mk-return-Right-keys_top-SETBIT (return-Right-keys_top-SETBIT-game-state CompositionState-Right)
 (return-Right-keys_top-SETBIT-return-value-or-abort (ReturnValue Empty)
)
)
)
)
(declare-datatype Return-Right-keys_bottom-GETKEYSIN ((mk-return-Right-keys_bottom-GETKEYSIN (return-Right-keys_bottom-GETKEYSIN-game-state CompositionState-Right)
 (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
)
(declare-datatype Return-Right-keys_bottom-GETAIN ((mk-return-Right-keys_bottom-GETAIN (return-Right-keys_bottom-GETAIN-game-state CompositionState-Right)
 (return-Right-keys_bottom-GETAIN-return-value-or-abort (ReturnValue Bits_n)
)
)
)
)
(declare-datatype Return-Right-keys_bottom-GETINAIN ((mk-return-Right-keys_bottom-GETINAIN (return-Right-keys_bottom-GETINAIN-game-state CompositionState-Right)
 (return-Right-keys_bottom-GETINAIN-return-value-or-abort (ReturnValue Bits_n)
)
)
)
)
(declare-datatype Return-Right-keys_bottom-GETAOUT ((mk-return-Right-keys_bottom-GETAOUT (return-Right-keys_bottom-GETAOUT-game-state CompositionState-Right)
 (return-Right-keys_bottom-GETAOUT-return-value-or-abort (ReturnValue Bits_n)
)
)
)
)
(declare-datatype Return-Right-keys_bottom-GETKEYSOUT ((mk-return-Right-keys_bottom-GETKEYSOUT (return-Right-keys_bottom-GETKEYSOUT-game-state CompositionState-Right)
 (return-Right-keys_bottom-GETKEYSOUT-return-value-or-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
)
(declare-datatype Return-Right-keys_bottom-GETBIT ((mk-return-Right-keys_bottom-GETBIT (return-Right-keys_bottom-GETBIT-game-state CompositionState-Right)
 (return-Right-keys_bottom-GETBIT-return-value-or-abort (ReturnValue Bool)
)
)
)
)
(declare-datatype Return-Right-keys_bottom-SETBIT ((mk-return-Right-keys_bottom-SETBIT (return-Right-keys_bottom-SETBIT-game-state CompositionState-Right)
 (return-Right-keys_bottom-SETBIT-return-value-or-abort (ReturnValue Empty)
)
)
)
)
(declare-datatype Return-Right-simgate-GBLG ((mk-return-Right-simgate-GBLG (return-Right-simgate-GBLG-game-state CompositionState-Right)
 (return-Right-simgate-GBLG-return-value-or-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
(declare-datatype Return-Right-ev-EVAL ((mk-return-Right-ev-EVAL (return-Right-ev-EVAL-game-state CompositionState-Right)
 (return-Right-ev-EVAL-return-value-or-abort (ReturnValue Empty)
)
)
)
)
; Composition of Right
(define-fun oracle-Right-keys_top-GETKEYSIN ((__global_state CompositionState-Right)
 (h Int)
)
 Return-Right-keys_top-GETKEYSIN (let ((__self_state (composition-pkgstate-Right-keys_top __global_state)
)
)
 (ite (= (select (state-Right-keys_top-flag __self_state)
 h)
 (mk-some true)
)
 (ite (= (select (state-Right-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Right-keys_top-GETKEYSIN __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Right-keys_top-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (let ((__global_state (mk-composition-state-Right __self_state (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_top-GETKEYSIN __global_state (mk-return-value Z)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Right __self_state (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_top-GETKEYSIN __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
)
)
)
(define-fun oracle-Right-keys_top-GETAIN ((__global_state CompositionState-Right)
 (h Int)
)
 Return-Right-keys_top-GETAIN (let ((__self_state (composition-pkgstate-Right-keys_top __global_state)
)
)
 (ite (= (select (state-Right-keys_top-flag __self_state)
 h)
 (mk-some true)
)
 (ite (= (select (state-Right-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Right-keys_top-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Right-keys_top-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (select (state-Right-keys_top-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Right-keys_top-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-2 (maybe-get (select (state-Right-keys_top-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z zz)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-keys_top-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-3 (maybe-get (select Z zz)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (mk-composition-state-Right __self_state (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_top-GETAIN __global_state (mk-return-value k)
)
)
)
)
)
)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Right __self_state (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_top-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
)
)
)
)
(define-fun oracle-Right-keys_top-GETINAIN ((__global_state CompositionState-Right)
 (h Int)
)
 Return-Right-keys_top-GETINAIN (let ((__self_state (composition-pkgstate-Right-keys_top __global_state)
)
)
 (ite (= (select (state-Right-keys_top-flag __self_state)
 h)
 (mk-some true)
)
 (ite (= (select (state-Right-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Right-keys_top-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Right-keys_top-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (select (state-Right-keys_top-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Right-keys_top-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-2 (maybe-get (select (state-Right-keys_top-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z (not zz)
)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-keys_top-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-3 (maybe-get (select Z (not zz)
)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (mk-composition-state-Right __self_state (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_top-GETINAIN __global_state (mk-return-value k)
)
)
)
)
)
)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Right __self_state (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_top-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
)
)
)
)
(define-fun oracle-Right-keys_top-GETAOUT ((__global_state CompositionState-Right)
 (h Int)
)
 Return-Right-keys_top-GETAOUT (let ((__self_state (composition-pkgstate-Right-keys_top __global_state)
)
)
 (ite (not (= (select (state-Right-keys_top-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
)
 (let ((__self_state (mk-state-Right-keys_top (state-Right-keys_top-T __self_state)
 (state-Right-keys_top-z __self_state)
 (store (state-Right-keys_top-flag __self_state)
 h (mk-some true)
)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (ite (= (select (state-Right-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((r (__sample-rand-Right-Bits_n 1 (composition-rand-Right-1 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (+ 1 (composition-rand-Right-1 __global_state)
)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (let ((Z (store Z true (mk-some r)
)
)
)
 (let ((rr (__sample-rand-Right-Bits_n 2 (composition-rand-Right-2 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (+ 1 (composition-rand-Right-2 __global_state)
)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((Z (store Z false (mk-some rr)
)
)
)
 (let ((__self_state (mk-state-Right-keys_top (store (state-Right-keys_top-T __self_state)
 h (mk-some Z)
)
 (state-Right-keys_top-z __self_state)
 (state-Right-keys_top-flag __self_state)
)
)
)
 (ite (= (select (state-Right-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Right-keys_top-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Right-keys_top-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (select (state-Right-keys_top-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Right-keys_top-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-2 (maybe-get (select (state-Right-keys_top-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z zz)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-keys_top-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-3 (maybe-get (select Z zz)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (mk-composition-state-Right __self_state (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_top-GETAOUT __global_state (mk-return-value k)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (ite (= (select (state-Right-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Right-keys_top-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Right-keys_top-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (select (state-Right-keys_top-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Right-keys_top-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-2 (maybe-get (select (state-Right-keys_top-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z zz)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-keys_top-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-3 (maybe-get (select Z zz)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (mk-composition-state-Right __self_state (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_top-GETAOUT __global_state (mk-return-value k)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Right __self_state (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_top-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
)
)
)
)
(define-fun oracle-Right-keys_top-GETKEYSOUT ((__global_state CompositionState-Right)
 (h Int)
)
 Return-Right-keys_top-GETKEYSOUT (let ((__self_state (composition-pkgstate-Right-keys_top __global_state)
)
)
 (ite (not (= (select (state-Right-keys_top-flag __self_state)
 h)
 (mk-some true)
)
)
 (let ((__self_state (mk-state-Right-keys_top (state-Right-keys_top-T __self_state)
 (state-Right-keys_top-z __self_state)
 (store (state-Right-keys_top-flag __self_state)
 h (mk-some true)
)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (ite (= (select (state-Right-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((r (__sample-rand-Right-Bits_n 3 (composition-rand-Right-3 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (+ 1 (composition-rand-Right-3 __global_state)
)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (let ((Z (store Z true (mk-some r)
)
)
)
 (let ((rr (__sample-rand-Right-Bits_n 4 (composition-rand-Right-4 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (+ 1 (composition-rand-Right-4 __global_state)
)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((Z (store Z false (mk-some rr)
)
)
)
 (let ((__self_state (mk-state-Right-keys_top (store (state-Right-keys_top-T __self_state)
 h (mk-some Z)
)
 (state-Right-keys_top-z __self_state)
 (state-Right-keys_top-flag __self_state)
)
)
)
 (ite (= (select (state-Right-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Right-keys_top-GETKEYSOUT __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Right-keys_top-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (let ((__global_state (mk-composition-state-Right __self_state (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_top-GETKEYSOUT __global_state (mk-return-value Z)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (ite (= (select (state-Right-keys_top-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Right-keys_top-GETKEYSOUT __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Right-keys_top-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (let ((__global_state (mk-composition-state-Right __self_state (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_top-GETKEYSOUT __global_state (mk-return-value Z)
)
)
)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Right __self_state (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_top-GETKEYSOUT __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
)
)
)
(define-fun oracle-Right-keys_top-GETBIT ((__global_state CompositionState-Right)
 (h Int)
)
 Return-Right-keys_top-GETBIT (let ((__self_state (composition-pkgstate-Right-keys_top __global_state)
)
)
 (ite (not (= (select (state-Right-keys_top-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
)
 (ite (= (select (state-Right-keys_top-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Right-keys_top-GETBIT __global_state (as mk-abort (ReturnValue Bool)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Right-keys_top-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-1)
)
 (let ((__global_state (mk-composition-state-Right __self_state (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_top-GETBIT __global_state (mk-return-value zz)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Right __self_state (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_top-GETBIT __global_state (as mk-abort (ReturnValue Bool)
)
)
)
)
)
)
(define-fun oracle-Right-keys_top-SETBIT ((__global_state CompositionState-Right)
 (h Int)
 (zz Bool)
)
 Return-Right-keys_top-SETBIT (let ((__self_state (composition-pkgstate-Right-keys_top __global_state)
)
)
 (ite (= (select (state-Right-keys_top-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (let ((__self_state (mk-state-Right-keys_top (state-Right-keys_top-T __self_state)
 (store (state-Right-keys_top-z __self_state)
 h (mk-some zz)
)
 (state-Right-keys_top-flag __self_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right __self_state (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_top-SETBIT __global_state (mk-return-value mk-empty)
)
)
)
 (let ((__global_state (mk-composition-state-Right __self_state (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_top-SETBIT __global_state (as mk-abort (ReturnValue Empty)
)
)
)
)
)
)
(define-fun oracle-Right-keys_bottom-GETKEYSIN ((__global_state CompositionState-Right)
 (h Int)
)
 Return-Right-keys_bottom-GETKEYSIN (let ((__self_state (composition-pkgstate-Right-keys_bottom __global_state)
)
)
 (ite (= (select (state-Right-keys_bottom-flag __self_state)
 h)
 (mk-some true)
)
 (ite (= (select (state-Right-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Right-keys_bottom-GETKEYSIN __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Right-keys_bottom-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 __self_state (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_bottom-GETKEYSIN __global_state (mk-return-value Z)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 __self_state (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_bottom-GETKEYSIN __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
)
)
)
(define-fun oracle-Right-keys_bottom-GETAIN ((__global_state CompositionState-Right)
 (h Int)
)
 Return-Right-keys_bottom-GETAIN (let ((__self_state (composition-pkgstate-Right-keys_bottom __global_state)
)
)
 (ite (= (select (state-Right-keys_bottom-flag __self_state)
 h)
 (mk-some true)
)
 (ite (= (select (state-Right-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Right-keys_bottom-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Right-keys_bottom-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (select (state-Right-keys_bottom-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Right-keys_bottom-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-2 (maybe-get (select (state-Right-keys_bottom-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z zz)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-keys_bottom-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-3 (maybe-get (select Z zz)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 __self_state (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_bottom-GETAIN __global_state (mk-return-value k)
)
)
)
)
)
)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 __self_state (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_bottom-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
)
)
)
)
(define-fun oracle-Right-keys_bottom-GETINAIN ((__global_state CompositionState-Right)
 (h Int)
)
 Return-Right-keys_bottom-GETINAIN (let ((__self_state (composition-pkgstate-Right-keys_bottom __global_state)
)
)
 (ite (= (select (state-Right-keys_bottom-flag __self_state)
 h)
 (mk-some true)
)
 (ite (= (select (state-Right-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Right-keys_bottom-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Right-keys_bottom-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (select (state-Right-keys_bottom-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Right-keys_bottom-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-2 (maybe-get (select (state-Right-keys_bottom-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z (not zz)
)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-keys_bottom-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-3 (maybe-get (select Z (not zz)
)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 __self_state (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_bottom-GETINAIN __global_state (mk-return-value k)
)
)
)
)
)
)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 __self_state (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_bottom-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
)
)
)
)
(define-fun oracle-Right-keys_bottom-GETAOUT ((__global_state CompositionState-Right)
 (h Int)
)
 Return-Right-keys_bottom-GETAOUT (let ((__self_state (composition-pkgstate-Right-keys_bottom __global_state)
)
)
 (ite (not (= (select (state-Right-keys_bottom-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
)
 (let ((__self_state (mk-state-Right-keys_bottom (state-Right-keys_bottom-T __self_state)
 (state-Right-keys_bottom-z __self_state)
 (store (state-Right-keys_bottom-flag __self_state)
 h (mk-some true)
)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (ite (= (select (state-Right-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((r (__sample-rand-Right-Bits_n 5 (composition-rand-Right-5 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (+ 1 (composition-rand-Right-5 __global_state)
)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (let ((Z (store Z true (mk-some r)
)
)
)
 (let ((rr (__sample-rand-Right-Bits_n 6 (composition-rand-Right-6 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (+ 1 (composition-rand-Right-6 __global_state)
)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((Z (store Z false (mk-some rr)
)
)
)
 (let ((__self_state (mk-state-Right-keys_bottom (store (state-Right-keys_bottom-T __self_state)
 h (mk-some Z)
)
 (state-Right-keys_bottom-z __self_state)
 (state-Right-keys_bottom-flag __self_state)
)
)
)
 (ite (= (select (state-Right-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Right-keys_bottom-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Right-keys_bottom-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (select (state-Right-keys_bottom-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Right-keys_bottom-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-2 (maybe-get (select (state-Right-keys_bottom-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z zz)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-keys_bottom-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-3 (maybe-get (select Z zz)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 __self_state (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_bottom-GETAOUT __global_state (mk-return-value k)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (ite (= (select (state-Right-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Right-keys_bottom-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Right-keys_bottom-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (select (state-Right-keys_bottom-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Right-keys_bottom-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-2 (maybe-get (select (state-Right-keys_bottom-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z zz)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-keys_bottom-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
 (let ((unwrap-3 (maybe-get (select Z zz)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 __self_state (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_bottom-GETAOUT __global_state (mk-return-value k)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 __self_state (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_bottom-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
)
)
)
)
(define-fun oracle-Right-keys_bottom-GETKEYSOUT ((__global_state CompositionState-Right)
 (h Int)
)
 Return-Right-keys_bottom-GETKEYSOUT (let ((__self_state (composition-pkgstate-Right-keys_bottom __global_state)
)
)
 (ite (not (= (select (state-Right-keys_bottom-flag __self_state)
 h)
 (mk-some true)
)
)
 (let ((__self_state (mk-state-Right-keys_bottom (state-Right-keys_bottom-T __self_state)
 (state-Right-keys_bottom-z __self_state)
 (store (state-Right-keys_bottom-flag __self_state)
 h (mk-some true)
)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (ite (= (select (state-Right-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((r (__sample-rand-Right-Bits_n 7 (composition-rand-Right-7 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (+ 1 (composition-rand-Right-7 __global_state)
)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (let ((Z (store Z true (mk-some r)
)
)
)
 (let ((rr (__sample-rand-Right-Bits_n 8 (composition-rand-Right-8 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (+ 1 (composition-rand-Right-8 __global_state)
)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((Z (store Z false (mk-some rr)
)
)
)
 (let ((__self_state (mk-state-Right-keys_bottom (store (state-Right-keys_bottom-T __self_state)
 h (mk-some Z)
)
 (state-Right-keys_bottom-z __self_state)
 (state-Right-keys_bottom-flag __self_state)
)
)
)
 (ite (= (select (state-Right-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Right-keys_bottom-GETKEYSOUT __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Right-keys_bottom-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 __self_state (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_bottom-GETKEYSOUT __global_state (mk-return-value Z)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (ite (= (select (state-Right-keys_bottom-T __self_state)
 h)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Right-keys_bottom-GETKEYSOUT __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Right-keys_bottom-T __self_state)
 h)
)
)
)
 (let ((Z unwrap-1)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 __self_state (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_bottom-GETKEYSOUT __global_state (mk-return-value Z)
)
)
)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 __self_state (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_bottom-GETKEYSOUT __global_state (as mk-abort (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
)
)
)
)
)
(define-fun oracle-Right-keys_bottom-GETBIT ((__global_state CompositionState-Right)
 (h Int)
)
 Return-Right-keys_bottom-GETBIT (let ((__self_state (composition-pkgstate-Right-keys_bottom __global_state)
)
)
 (ite (not (= (select (state-Right-keys_bottom-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
)
 (ite (= (select (state-Right-keys_bottom-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Right-keys_bottom-GETBIT __global_state (as mk-abort (ReturnValue Bool)
)
)
 (let ((unwrap-1 (maybe-get (select (state-Right-keys_bottom-z __self_state)
 h)
)
)
)
 (let ((zz unwrap-1)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 __self_state (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_bottom-GETBIT __global_state (mk-return-value zz)
)
)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 __self_state (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_bottom-GETBIT __global_state (as mk-abort (ReturnValue Bool)
)
)
)
)
)
)
(define-fun oracle-Right-keys_bottom-SETBIT ((__global_state CompositionState-Right)
 (h Int)
 (zz Bool)
)
 Return-Right-keys_bottom-SETBIT (let ((__self_state (composition-pkgstate-Right-keys_bottom __global_state)
)
)
 (ite (= (select (state-Right-keys_bottom-z __self_state)
 h)
 (as mk-none (Maybe Bool)
)
)
 (let ((__self_state (mk-state-Right-keys_bottom (state-Right-keys_bottom-T __self_state)
 (store (state-Right-keys_bottom-z __self_state)
 h (mk-some zz)
)
 (state-Right-keys_bottom-flag __self_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 __self_state (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_bottom-SETBIT __global_state (mk-return-value mk-empty)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 __self_state (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-keys_bottom-SETBIT __global_state (as mk-abort (ReturnValue Empty)
)
)
)
)
)
)
(define-fun oracle-Right-ev-EVAL ((__global_state CompositionState-Right)
 (j Int)
 (l Int)
 (r Int)
 (op (Array (Tuple2 Bool Bool)
 (Maybe Bool)
)
)
)
 Return-Right-ev-EVAL (let ((__self_state (composition-pkgstate-Right-ev __global_state)
)
)
 (let ((__ret (oracle-Right-keys_top-GETBIT __global_state l)
)
)
 (ite (= __ret (mk-return-Right-keys_top-GETBIT __global_state (as mk-abort (ReturnValue Bool)
)
)
)
 (let ((__global_state (return-Right-keys_top-GETBIT-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 __self_state (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-ev-EVAL __global_state (as mk-abort (ReturnValue Empty)
)
)
)
)
 (let ((__global_state (return-Right-keys_top-GETBIT-game-state __ret)
)
 (zl (return-value (return-Right-keys_top-GETBIT-return-value-or-abort __ret)
)
)
)
 (let ((__ret (oracle-Right-keys_top-GETBIT __global_state r)
)
)
 (ite (= __ret (mk-return-Right-keys_top-GETBIT __global_state (as mk-abort (ReturnValue Bool)
)
)
)
 (let ((__global_state (return-Right-keys_top-GETBIT-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 __self_state (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-ev-EVAL __global_state (as mk-abort (ReturnValue Empty)
)
)
)
)
 (let ((__global_state (return-Right-keys_top-GETBIT-game-state __ret)
)
 (zr (return-value (return-Right-keys_top-GETBIT-return-value-or-abort __ret)
)
)
)
 (ite (= (select op (mk-tuple2 zl zr)
)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Right-ev-EVAL __global_state (as mk-abort (ReturnValue Empty)
)
)
 (let ((unwrap-1 (maybe-get (select op (mk-tuple2 zl zr)
)
)
)
)
 (let ((z unwrap-1)
)
 (let ((__ret (oracle-Right-keys_bottom-SETBIT __global_state j z)
)
)
 (ite (= __ret (mk-return-Right-keys_bottom-SETBIT __global_state (as mk-abort (ReturnValue Empty)
)
)
)
 (let ((__global_state (return-Right-keys_bottom-SETBIT-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 __self_state (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-ev-EVAL __global_state (as mk-abort (ReturnValue Empty)
)
)
)
)
 (let ((__global_state (return-Right-keys_bottom-SETBIT-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 __self_state (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-ev-EVAL __global_state (mk-return-value mk-empty)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define-fun oracle-Right-simgate-GBLG ((__global_state CompositionState-Right)
 (h Int)
 (l Int)
 (r Int)
 (op (Array (Tuple2 Bool Bool)
 (Maybe Bool)
)
)
 (j Int)
)
 Return-Right-simgate-GBLG (let ((__self_state (composition-pkgstate-Right-simgate __global_state)
)
)
 (let ((C ((as const (Array Bits_p (Maybe Bool)
)
)
 (as mk-none (Maybe Bool)
)
)
)
)
 (let ((Sl ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (let ((Sr ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (let ((Sj ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (let ((__ret (oracle-Right-ev-EVAL __global_state j l r op)
)
)
 (ite (= __ret (mk-return-Right-ev-EVAL __global_state (as mk-abort (ReturnValue Empty)
)
)
)
 (let ((__global_state (return-Right-ev-EVAL-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Right-ev-EVAL-game-state __ret)
)
)
 (let ((__ret (oracle-Right-keys_top-GETAIN __global_state l)
)
)
 (ite (= __ret (mk-return-Right-keys_top-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
)
 (let ((__global_state (return-Right-keys_top-GETAIN-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Right-keys_top-GETAIN-game-state __ret)
)
 (temp (return-value (return-Right-keys_top-GETAIN-return-value-or-abort __ret)
)
)
)
 (let ((Sl ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (let ((Sl (store Sl true (mk-some temp)
)
)
)
 (let ((__ret (oracle-Right-keys_top-GETINAIN __global_state l)
)
)
 (ite (= __ret (mk-return-Right-keys_top-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
)
 (let ((__global_state (return-Right-keys_top-GETINAIN-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Right-keys_top-GETINAIN-game-state __ret)
)
 (temp (return-value (return-Right-keys_top-GETINAIN-return-value-or-abort __ret)
)
)
)
 (let ((Sl (store Sl false (mk-some temp)
)
)
)
 (let ((__ret (oracle-Right-keys_top-GETAIN __global_state r)
)
)
 (ite (= __ret (mk-return-Right-keys_top-GETAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
)
 (let ((__global_state (return-Right-keys_top-GETAIN-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Right-keys_top-GETAIN-game-state __ret)
)
 (temp (return-value (return-Right-keys_top-GETAIN-return-value-or-abort __ret)
)
)
)
 (let ((Sr ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (let ((Sr (store Sr true (mk-some temp)
)
)
)
 (let ((__ret (oracle-Right-keys_top-GETINAIN __global_state r)
)
)
 (ite (= __ret (mk-return-Right-keys_top-GETINAIN __global_state (as mk-abort (ReturnValue Bits_n)
)
)
)
 (let ((__global_state (return-Right-keys_top-GETINAIN-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Right-keys_top-GETINAIN-game-state __ret)
)
 (temp (return-value (return-Right-keys_top-GETINAIN-return-value-or-abort __ret)
)
)
)
 (let ((Sr (store Sr true (mk-some temp)
)
)
)
 (let ((__ret (oracle-Right-keys_bottom-GETAOUT __global_state j)
)
)
 (ite (= __ret (mk-return-Right-keys_bottom-GETAOUT __global_state (as mk-abort (ReturnValue Bits_n)
)
)
)
 (let ((__global_state (return-Right-keys_bottom-GETAOUT-game-state __ret)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
)
)
 (let ((__global_state (return-Right-keys_bottom-GETAOUT-game-state __ret)
)
 (temp (return-value (return-Right-keys_bottom-GETAOUT-return-value-or-abort __ret)
)
)
)
 (let ((Sj ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (let ((Sj (store Sj false (mk-some temp)
)
)
)
 (let ((dl false)
)
 (let ((dr false)
)
 (ite (= (select Sl dl)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-1 (maybe-get (select Sl dl)
)
)
)
 (let ((kl unwrap-1)
)
 (ite (= (select Sr dr)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-2 (maybe-get (select Sr dr)
)
)
)
 (let ((kr unwrap-2)
)
 (let ((kj (composition-param-Right-zeron __global_state)
)
)
 (ite (and (or (not dl)
)
 (or (not dr)
)
)
 (ite (= (select Sj false)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-3 (maybe-get (select Sj false)
)
)
)
 (let ((kj unwrap-3)
)
 (let ((rin (__sample-rand-Right-Bits_n 9 (composition-rand-Right-9 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (+ 1 (composition-rand-Right-9 __global_state)
)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 10 (composition-rand-Right-10 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (+ 1 (composition-rand-Right-10 __global_state)
)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C ((as const (Array Bits_p (Maybe Bool)
)
)
 (as mk-none (Maybe Bool)
)
)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((dl true)
)
 (let ((dr false)
)
 (ite (= (select Sl dl)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-4 (maybe-get (select Sl dl)
)
)
)
 (let ((kl unwrap-4)
)
 (ite (= (select Sr dr)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-5 (maybe-get (select Sr dr)
)
)
)
 (let ((kr unwrap-5)
)
 (let ((kj (composition-param-Right-zeron __global_state)
)
)
 (ite (and (or (not dl)
)
 (or (not dr)
)
)
 (ite (= (select Sj false)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-6 (maybe-get (select Sj false)
)
)
)
 (let ((kj unwrap-6)
)
 (let ((rin (__sample-rand-Right-Bits_n 11 (composition-rand-Right-11 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (+ 1 (composition-rand-Right-11 __global_state)
)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 12 (composition-rand-Right-12 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (+ 1 (composition-rand-Right-12 __global_state)
)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((dl false)
)
 (let ((dr true)
)
 (ite (= (select Sl dl)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-7 (maybe-get (select Sl dl)
)
)
)
 (let ((kl unwrap-7)
)
 (ite (= (select Sr dr)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-8 (maybe-get (select Sr dr)
)
)
)
 (let ((kr unwrap-8)
)
 (let ((kj (composition-param-Right-zeron __global_state)
)
)
 (ite (and (or (not dl)
)
 (or (not dr)
)
)
 (ite (= (select Sj false)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-9 (maybe-get (select Sj false)
)
)
)
 (let ((kj unwrap-9)
)
 (let ((rin (__sample-rand-Right-Bits_n 13 (composition-rand-Right-13 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (+ 1 (composition-rand-Right-13 __global_state)
)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 14 (composition-rand-Right-14 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (+ 1 (composition-rand-Right-14 __global_state)
)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((dl true)
)
 (let ((dr true)
)
 (ite (= (select Sl dl)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-10 (maybe-get (select Sl dl)
)
)
)
 (let ((kl unwrap-10)
)
 (ite (= (select Sr dr)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-11 (maybe-get (select Sr dr)
)
)
)
 (let ((kr unwrap-11)
)
 (let ((kj (composition-param-Right-zeron __global_state)
)
)
 (ite (and (or (not dl)
)
 (or (not dr)
)
)
 (ite (= (select Sj false)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-12 (maybe-get (select Sj false)
)
)
)
 (let ((kj unwrap-12)
)
 (let ((rin (__sample-rand-Right-Bits_n 15 (composition-rand-Right-15 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (+ 1 (composition-rand-Right-15 __global_state)
)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 16 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (+ 1 (composition-rand-Right-16 __global_state)
)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (mk-return-value C)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((rin (__sample-rand-Right-Bits_n 15 (composition-rand-Right-15 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (+ 1 (composition-rand-Right-15 __global_state)
)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 16 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (+ 1 (composition-rand-Right-16 __global_state)
)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (mk-return-value C)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((rin (__sample-rand-Right-Bits_n 13 (composition-rand-Right-13 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (+ 1 (composition-rand-Right-13 __global_state)
)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 14 (composition-rand-Right-14 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (+ 1 (composition-rand-Right-14 __global_state)
)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((dl true)
)
 (let ((dr true)
)
 (ite (= (select Sl dl)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-10 (maybe-get (select Sl dl)
)
)
)
 (let ((kl unwrap-10)
)
 (ite (= (select Sr dr)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-11 (maybe-get (select Sr dr)
)
)
)
 (let ((kr unwrap-11)
)
 (let ((kj (composition-param-Right-zeron __global_state)
)
)
 (ite (and (or (not dl)
)
 (or (not dr)
)
)
 (ite (= (select Sj false)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-12 (maybe-get (select Sj false)
)
)
)
 (let ((kj unwrap-12)
)
 (let ((rin (__sample-rand-Right-Bits_n 15 (composition-rand-Right-15 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (+ 1 (composition-rand-Right-15 __global_state)
)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 16 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (+ 1 (composition-rand-Right-16 __global_state)
)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (mk-return-value C)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((rin (__sample-rand-Right-Bits_n 15 (composition-rand-Right-15 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (+ 1 (composition-rand-Right-15 __global_state)
)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 16 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (+ 1 (composition-rand-Right-16 __global_state)
)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (mk-return-value C)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((rin (__sample-rand-Right-Bits_n 11 (composition-rand-Right-11 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (+ 1 (composition-rand-Right-11 __global_state)
)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 12 (composition-rand-Right-12 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (+ 1 (composition-rand-Right-12 __global_state)
)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((dl false)
)
 (let ((dr true)
)
 (ite (= (select Sl dl)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-7 (maybe-get (select Sl dl)
)
)
)
 (let ((kl unwrap-7)
)
 (ite (= (select Sr dr)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-8 (maybe-get (select Sr dr)
)
)
)
 (let ((kr unwrap-8)
)
 (let ((kj (composition-param-Right-zeron __global_state)
)
)
 (ite (and (or (not dl)
)
 (or (not dr)
)
)
 (ite (= (select Sj false)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-9 (maybe-get (select Sj false)
)
)
)
 (let ((kj unwrap-9)
)
 (let ((rin (__sample-rand-Right-Bits_n 13 (composition-rand-Right-13 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (+ 1 (composition-rand-Right-13 __global_state)
)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 14 (composition-rand-Right-14 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (+ 1 (composition-rand-Right-14 __global_state)
)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((dl true)
)
 (let ((dr true)
)
 (ite (= (select Sl dl)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-10 (maybe-get (select Sl dl)
)
)
)
 (let ((kl unwrap-10)
)
 (ite (= (select Sr dr)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-11 (maybe-get (select Sr dr)
)
)
)
 (let ((kr unwrap-11)
)
 (let ((kj (composition-param-Right-zeron __global_state)
)
)
 (ite (and (or (not dl)
)
 (or (not dr)
)
)
 (ite (= (select Sj false)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-12 (maybe-get (select Sj false)
)
)
)
 (let ((kj unwrap-12)
)
 (let ((rin (__sample-rand-Right-Bits_n 15 (composition-rand-Right-15 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (+ 1 (composition-rand-Right-15 __global_state)
)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 16 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (+ 1 (composition-rand-Right-16 __global_state)
)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (mk-return-value C)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((rin (__sample-rand-Right-Bits_n 15 (composition-rand-Right-15 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (+ 1 (composition-rand-Right-15 __global_state)
)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 16 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (+ 1 (composition-rand-Right-16 __global_state)
)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (mk-return-value C)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((rin (__sample-rand-Right-Bits_n 13 (composition-rand-Right-13 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (+ 1 (composition-rand-Right-13 __global_state)
)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 14 (composition-rand-Right-14 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (+ 1 (composition-rand-Right-14 __global_state)
)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((dl true)
)
 (let ((dr true)
)
 (ite (= (select Sl dl)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-10 (maybe-get (select Sl dl)
)
)
)
 (let ((kl unwrap-10)
)
 (ite (= (select Sr dr)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-11 (maybe-get (select Sr dr)
)
)
)
 (let ((kr unwrap-11)
)
 (let ((kj (composition-param-Right-zeron __global_state)
)
)
 (ite (and (or (not dl)
)
 (or (not dr)
)
)
 (ite (= (select Sj false)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-12 (maybe-get (select Sj false)
)
)
)
 (let ((kj unwrap-12)
)
 (let ((rin (__sample-rand-Right-Bits_n 15 (composition-rand-Right-15 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (+ 1 (composition-rand-Right-15 __global_state)
)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 16 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (+ 1 (composition-rand-Right-16 __global_state)
)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (mk-return-value C)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((rin (__sample-rand-Right-Bits_n 15 (composition-rand-Right-15 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (+ 1 (composition-rand-Right-15 __global_state)
)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 16 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (+ 1 (composition-rand-Right-16 __global_state)
)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (mk-return-value C)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((rin (__sample-rand-Right-Bits_n 9 (composition-rand-Right-9 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (+ 1 (composition-rand-Right-9 __global_state)
)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 10 (composition-rand-Right-10 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (+ 1 (composition-rand-Right-10 __global_state)
)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C ((as const (Array Bits_p (Maybe Bool)
)
)
 (as mk-none (Maybe Bool)
)
)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((dl true)
)
 (let ((dr false)
)
 (ite (= (select Sl dl)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-4 (maybe-get (select Sl dl)
)
)
)
 (let ((kl unwrap-4)
)
 (ite (= (select Sr dr)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-5 (maybe-get (select Sr dr)
)
)
)
 (let ((kr unwrap-5)
)
 (let ((kj (composition-param-Right-zeron __global_state)
)
)
 (ite (and (or (not dl)
)
 (or (not dr)
)
)
 (ite (= (select Sj false)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-6 (maybe-get (select Sj false)
)
)
)
 (let ((kj unwrap-6)
)
 (let ((rin (__sample-rand-Right-Bits_n 11 (composition-rand-Right-11 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (+ 1 (composition-rand-Right-11 __global_state)
)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 12 (composition-rand-Right-12 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (+ 1 (composition-rand-Right-12 __global_state)
)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((dl false)
)
 (let ((dr true)
)
 (ite (= (select Sl dl)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-7 (maybe-get (select Sl dl)
)
)
)
 (let ((kl unwrap-7)
)
 (ite (= (select Sr dr)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-8 (maybe-get (select Sr dr)
)
)
)
 (let ((kr unwrap-8)
)
 (let ((kj (composition-param-Right-zeron __global_state)
)
)
 (ite (and (or (not dl)
)
 (or (not dr)
)
)
 (ite (= (select Sj false)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-9 (maybe-get (select Sj false)
)
)
)
 (let ((kj unwrap-9)
)
 (let ((rin (__sample-rand-Right-Bits_n 13 (composition-rand-Right-13 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (+ 1 (composition-rand-Right-13 __global_state)
)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 14 (composition-rand-Right-14 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (+ 1 (composition-rand-Right-14 __global_state)
)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((dl true)
)
 (let ((dr true)
)
 (ite (= (select Sl dl)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-10 (maybe-get (select Sl dl)
)
)
)
 (let ((kl unwrap-10)
)
 (ite (= (select Sr dr)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-11 (maybe-get (select Sr dr)
)
)
)
 (let ((kr unwrap-11)
)
 (let ((kj (composition-param-Right-zeron __global_state)
)
)
 (ite (and (or (not dl)
)
 (or (not dr)
)
)
 (ite (= (select Sj false)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-12 (maybe-get (select Sj false)
)
)
)
 (let ((kj unwrap-12)
)
 (let ((rin (__sample-rand-Right-Bits_n 15 (composition-rand-Right-15 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (+ 1 (composition-rand-Right-15 __global_state)
)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 16 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (+ 1 (composition-rand-Right-16 __global_state)
)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (mk-return-value C)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((rin (__sample-rand-Right-Bits_n 15 (composition-rand-Right-15 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (+ 1 (composition-rand-Right-15 __global_state)
)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 16 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (+ 1 (composition-rand-Right-16 __global_state)
)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (mk-return-value C)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((rin (__sample-rand-Right-Bits_n 13 (composition-rand-Right-13 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (+ 1 (composition-rand-Right-13 __global_state)
)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 14 (composition-rand-Right-14 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (+ 1 (composition-rand-Right-14 __global_state)
)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((dl true)
)
 (let ((dr true)
)
 (ite (= (select Sl dl)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-10 (maybe-get (select Sl dl)
)
)
)
 (let ((kl unwrap-10)
)
 (ite (= (select Sr dr)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-11 (maybe-get (select Sr dr)
)
)
)
 (let ((kr unwrap-11)
)
 (let ((kj (composition-param-Right-zeron __global_state)
)
)
 (ite (and (or (not dl)
)
 (or (not dr)
)
)
 (ite (= (select Sj false)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-12 (maybe-get (select Sj false)
)
)
)
 (let ((kj unwrap-12)
)
 (let ((rin (__sample-rand-Right-Bits_n 15 (composition-rand-Right-15 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (+ 1 (composition-rand-Right-15 __global_state)
)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 16 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (+ 1 (composition-rand-Right-16 __global_state)
)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (mk-return-value C)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((rin (__sample-rand-Right-Bits_n 15 (composition-rand-Right-15 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (+ 1 (composition-rand-Right-15 __global_state)
)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 16 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (+ 1 (composition-rand-Right-16 __global_state)
)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (mk-return-value C)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((rin (__sample-rand-Right-Bits_n 11 (composition-rand-Right-11 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (+ 1 (composition-rand-Right-11 __global_state)
)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 12 (composition-rand-Right-12 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (+ 1 (composition-rand-Right-12 __global_state)
)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((dl false)
)
 (let ((dr true)
)
 (ite (= (select Sl dl)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-7 (maybe-get (select Sl dl)
)
)
)
 (let ((kl unwrap-7)
)
 (ite (= (select Sr dr)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-8 (maybe-get (select Sr dr)
)
)
)
 (let ((kr unwrap-8)
)
 (let ((kj (composition-param-Right-zeron __global_state)
)
)
 (ite (and (or (not dl)
)
 (or (not dr)
)
)
 (ite (= (select Sj false)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-9 (maybe-get (select Sj false)
)
)
)
 (let ((kj unwrap-9)
)
 (let ((rin (__sample-rand-Right-Bits_n 13 (composition-rand-Right-13 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (+ 1 (composition-rand-Right-13 __global_state)
)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 14 (composition-rand-Right-14 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (+ 1 (composition-rand-Right-14 __global_state)
)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((dl true)
)
 (let ((dr true)
)
 (ite (= (select Sl dl)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-10 (maybe-get (select Sl dl)
)
)
)
 (let ((kl unwrap-10)
)
 (ite (= (select Sr dr)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-11 (maybe-get (select Sr dr)
)
)
)
 (let ((kr unwrap-11)
)
 (let ((kj (composition-param-Right-zeron __global_state)
)
)
 (ite (and (or (not dl)
)
 (or (not dr)
)
)
 (ite (= (select Sj false)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-12 (maybe-get (select Sj false)
)
)
)
 (let ((kj unwrap-12)
)
 (let ((rin (__sample-rand-Right-Bits_n 15 (composition-rand-Right-15 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (+ 1 (composition-rand-Right-15 __global_state)
)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 16 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (+ 1 (composition-rand-Right-16 __global_state)
)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (mk-return-value C)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((rin (__sample-rand-Right-Bits_n 15 (composition-rand-Right-15 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (+ 1 (composition-rand-Right-15 __global_state)
)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 16 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (+ 1 (composition-rand-Right-16 __global_state)
)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (mk-return-value C)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((rin (__sample-rand-Right-Bits_n 13 (composition-rand-Right-13 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (+ 1 (composition-rand-Right-13 __global_state)
)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 14 (composition-rand-Right-14 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (+ 1 (composition-rand-Right-14 __global_state)
)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((dl true)
)
 (let ((dr true)
)
 (ite (= (select Sl dl)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-10 (maybe-get (select Sl dl)
)
)
)
 (let ((kl unwrap-10)
)
 (ite (= (select Sr dr)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-11 (maybe-get (select Sr dr)
)
)
)
 (let ((kr unwrap-11)
)
 (let ((kj (composition-param-Right-zeron __global_state)
)
)
 (ite (and (or (not dl)
)
 (or (not dr)
)
)
 (ite (= (select Sj false)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Right-simgate-GBLG __global_state (as mk-abort (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
)
 (let ((unwrap-12 (maybe-get (select Sj false)
)
)
)
 (let ((kj unwrap-12)
)
 (let ((rin (__sample-rand-Right-Bits_n 15 (composition-rand-Right-15 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (+ 1 (composition-rand-Right-15 __global_state)
)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 16 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (+ 1 (composition-rand-Right-16 __global_state)
)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (mk-return-value C)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((rin (__sample-rand-Right-Bits_n 15 (composition-rand-Right-15 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (+ 1 (composition-rand-Right-15 __global_state)
)
 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((rout (__sample-rand-Right-Bits_n 16 (composition-rand-Right-16 __global_state)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 (composition-pkgstate-Right-simgate __global_state)
 (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (+ 1 (composition-rand-Right-16 __global_state)
)
)
)
)
 (let ((cin (__func-Right-encn kr kj rin)
)
)
 (let ((cout (__func-Right-encm kl cin rout)
)
)
 (let ((C (store C cout (mk-some true)
)
)
)
 (let ((__global_state (mk-composition-state-Right (composition-pkgstate-Right-keys_top __global_state)
 (composition-pkgstate-Right-keys_bottom __global_state)
 __self_state (composition-pkgstate-Right-ev __global_state)
 (composition-param-Right-m __global_state)
 (composition-param-Right-n __global_state)
 (composition-param-Right-p __global_state)
 (composition-param-Right-zerom __global_state)
 (composition-param-Right-zeron __global_state)
 (composition-rand-Right-0 __global_state)
 (composition-rand-Right-1 __global_state)
 (composition-rand-Right-2 __global_state)
 (composition-rand-Right-3 __global_state)
 (composition-rand-Right-4 __global_state)
 (composition-rand-Right-5 __global_state)
 (composition-rand-Right-6 __global_state)
 (composition-rand-Right-7 __global_state)
 (composition-rand-Right-8 __global_state)
 (composition-rand-Right-9 __global_state)
 (composition-rand-Right-10 __global_state)
 (composition-rand-Right-11 __global_state)
 (composition-rand-Right-12 __global_state)
 (composition-rand-Right-13 __global_state)
 (composition-rand-Right-14 __global_state)
 (composition-rand-Right-15 __global_state)
 (composition-rand-Right-16 __global_state)
)
)
)
 (mk-return-Right-simgate-GBLG __global_state (mk-return-value C)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(declare-const game-state-Left_inst-old CompositionState-Left)
(declare-const game-state-Right_inst-old CompositionState-Right)
(declare-const arg-GETAOUT-h Int)
(declare-const arg-SETBIT-h Int)
(declare-const arg-SETBIT-zz Bool)
(declare-const arg-GBLG-h Int)
(declare-const arg-GBLG-l Int)
(declare-const arg-GBLG-r Int)
(declare-const arg-GBLG-op (Array (Tuple2 Bool Bool)
 (Maybe Bool)
)
)
(declare-const arg-GBLG-j Int)
(declare-const arg-GETKEYSIN-h Int)
(declare-const return-Left_inst-GETAOUT Return-Left-keys_top-GETAOUT)
(assert (= return-Left_inst-GETAOUT (oracle-Left-keys_top-GETAOUT game-state-Left_inst-old arg-GETAOUT-h)
)
)
(declare-const return-value-Left_inst-keys_top-GETAOUT (ReturnValue Bits_n)
)
(assert (= return-value-Left_inst-keys_top-GETAOUT (return-Left-keys_top-GETAOUT-return-value-or-abort return-Left_inst-GETAOUT)
)
)
(declare-const game-state-Left_inst-new-GETAOUT CompositionState-Left)
(assert (= game-state-Left_inst-new-GETAOUT (return-Left-keys_top-GETAOUT-game-state return-Left_inst-GETAOUT)
)
)
(declare-const return-Left_inst-SETBIT Return-Left-keys_top-SETBIT)
(assert (= return-Left_inst-SETBIT (oracle-Left-keys_top-SETBIT game-state-Left_inst-old arg-SETBIT-h arg-SETBIT-zz)
)
)
(declare-const return-value-Left_inst-keys_top-SETBIT (ReturnValue Empty)
)
(assert (= return-value-Left_inst-keys_top-SETBIT (return-Left-keys_top-SETBIT-return-value-or-abort return-Left_inst-SETBIT)
)
)
(declare-const game-state-Left_inst-new-SETBIT CompositionState-Left)
(assert (= game-state-Left_inst-new-SETBIT (return-Left-keys_top-SETBIT-game-state return-Left_inst-SETBIT)
)
)
(declare-const return-Left_inst-GBLG Return-Left-gate-GBLG)
(assert (= return-Left_inst-GBLG (oracle-Left-gate-GBLG game-state-Left_inst-old arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
)
)
(declare-const return-value-Left_inst-gate-GBLG (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
(assert (= return-value-Left_inst-gate-GBLG (return-Left-gate-GBLG-return-value-or-abort return-Left_inst-GBLG)
)
)
(declare-const game-state-Left_inst-new-GBLG CompositionState-Left)
(assert (= game-state-Left_inst-new-GBLG (return-Left-gate-GBLG-game-state return-Left_inst-GBLG)
)
)
(declare-const return-Left_inst-GETKEYSIN Return-Left-keys_bottom-GETKEYSIN)
(assert (= return-Left_inst-GETKEYSIN (oracle-Left-keys_bottom-GETKEYSIN game-state-Left_inst-old arg-GETKEYSIN-h)
)
)
(declare-const return-value-Left_inst-keys_bottom-GETKEYSIN (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
(assert (= return-value-Left_inst-keys_bottom-GETKEYSIN (return-Left-keys_bottom-GETKEYSIN-return-value-or-abort return-Left_inst-GETKEYSIN)
)
)
(declare-const game-state-Left_inst-new-GETKEYSIN CompositionState-Left)
(assert (= game-state-Left_inst-new-GETKEYSIN (return-Left-keys_bottom-GETKEYSIN-game-state return-Left_inst-GETKEYSIN)
)
)
(declare-const return-Right_inst-GETAOUT Return-Right-keys_top-GETAOUT)
(assert (= return-Right_inst-GETAOUT (oracle-Right-keys_top-GETAOUT game-state-Right_inst-old arg-GETAOUT-h)
)
)
(declare-const return-value-Right_inst-keys_top-GETAOUT (ReturnValue Bits_n)
)
(assert (= return-value-Right_inst-keys_top-GETAOUT (return-Right-keys_top-GETAOUT-return-value-or-abort return-Right_inst-GETAOUT)
)
)
(declare-const game-state-Right_inst-new-GETAOUT CompositionState-Right)
(assert (= game-state-Right_inst-new-GETAOUT (return-Right-keys_top-GETAOUT-game-state return-Right_inst-GETAOUT)
)
)
(declare-const return-Right_inst-SETBIT Return-Right-keys_top-SETBIT)
(assert (= return-Right_inst-SETBIT (oracle-Right-keys_top-SETBIT game-state-Right_inst-old arg-SETBIT-h arg-SETBIT-zz)
)
)
(declare-const return-value-Right_inst-keys_top-SETBIT (ReturnValue Empty)
)
(assert (= return-value-Right_inst-keys_top-SETBIT (return-Right-keys_top-SETBIT-return-value-or-abort return-Right_inst-SETBIT)
)
)
(declare-const game-state-Right_inst-new-SETBIT CompositionState-Right)
(assert (= game-state-Right_inst-new-SETBIT (return-Right-keys_top-SETBIT-game-state return-Right_inst-SETBIT)
)
)
(declare-const return-Right_inst-GBLG Return-Right-simgate-GBLG)
(assert (= return-Right_inst-GBLG (oracle-Right-simgate-GBLG game-state-Right_inst-old arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
)
)
(declare-const return-value-Right_inst-simgate-GBLG (ReturnValue (Array Bits_p (Maybe Bool)
)
)
)
(assert (= return-value-Right_inst-simgate-GBLG (return-Right-simgate-GBLG-return-value-or-abort return-Right_inst-GBLG)
)
)
(declare-const game-state-Right_inst-new-GBLG CompositionState-Right)
(assert (= game-state-Right_inst-new-GBLG (return-Right-simgate-GBLG-game-state return-Right_inst-GBLG)
)
)
(declare-const return-Right_inst-GETKEYSIN Return-Right-keys_bottom-GETKEYSIN)
(assert (= return-Right_inst-GETKEYSIN (oracle-Right-keys_bottom-GETKEYSIN game-state-Right_inst-old arg-GETKEYSIN-h)
)
)
(declare-const return-value-Right_inst-keys_bottom-GETKEYSIN (ReturnValue (Array Bool (Maybe Bits_n)
)
)
)
(assert (= return-value-Right_inst-keys_bottom-GETKEYSIN (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort return-Right_inst-GETKEYSIN)
)
)
(declare-const game-state-Right_inst-new-GETKEYSIN CompositionState-Right)
(assert (= game-state-Right_inst-new-GETKEYSIN (return-Right-keys_bottom-GETKEYSIN-game-state return-Right_inst-GETKEYSIN)
)
)
(declare-const randctr-left-1 Int)
(assert (= randctr-left-1 (composition-rand-Left-1 game-state-Left_inst-old)
)
)
(declare-const randval-left-1 Bits_n)
(assert (= randval-left-1 (__sample-rand-Left-Bits_n 1 (+ 0 randctr-left-1)
)
)
)
(declare-const randctr-left-2 Int)
(assert (= randctr-left-2 (composition-rand-Left-2 game-state-Left_inst-old)
)
)
(declare-const randval-left-2 Bits_n)
(assert (= randval-left-2 (__sample-rand-Left-Bits_n 2 (+ 0 randctr-left-2)
)
)
)
(declare-const randctr-left-3 Int)
(assert (= randctr-left-3 (composition-rand-Left-3 game-state-Left_inst-old)
)
)
(declare-const randval-left-3 Bits_n)
(assert (= randval-left-3 (__sample-rand-Left-Bits_n 3 (+ 0 randctr-left-3)
)
)
)
(declare-const randctr-left-4 Int)
(assert (= randctr-left-4 (composition-rand-Left-4 game-state-Left_inst-old)
)
)
(declare-const randval-left-4 Bits_n)
(assert (= randval-left-4 (__sample-rand-Left-Bits_n 4 (+ 0 randctr-left-4)
)
)
)
(declare-const randctr-left-5 Int)
(assert (= randctr-left-5 (composition-rand-Left-5 game-state-Left_inst-old)
)
)
(declare-const randval-left-5 Bits_n)
(assert (= randval-left-5 (__sample-rand-Left-Bits_n 5 (+ 0 randctr-left-5)
)
)
)
(declare-const randctr-left-6 Int)
(assert (= randctr-left-6 (composition-rand-Left-6 game-state-Left_inst-old)
)
)
(declare-const randval-left-6 Bits_n)
(assert (= randval-left-6 (__sample-rand-Left-Bits_n 6 (+ 0 randctr-left-6)
)
)
)
(declare-const randctr-left-7 Int)
(assert (= randctr-left-7 (composition-rand-Left-7 game-state-Left_inst-old)
)
)
(declare-const randval-left-7 Bits_n)
(assert (= randval-left-7 (__sample-rand-Left-Bits_n 7 (+ 0 randctr-left-7)
)
)
)
(declare-const randctr-left-8 Int)
(assert (= randctr-left-8 (composition-rand-Left-8 game-state-Left_inst-old)
)
)
(declare-const randval-left-8 Bits_n)
(assert (= randval-left-8 (__sample-rand-Left-Bits_n 8 (+ 0 randctr-left-8)
)
)
)
(declare-const randctr-left-9 Int)
(assert (= randctr-left-9 (composition-rand-Left-9 game-state-Left_inst-old)
)
)
(declare-const randval-left-9 Bits_n)
(assert (= randval-left-9 (__sample-rand-Left-Bits_n 9 (+ 0 randctr-left-9)
)
)
)
(declare-const randctr-left-10 Int)
(assert (= randctr-left-10 (composition-rand-Left-10 game-state-Left_inst-old)
)
)
(declare-const randval-left-10 Bits_m)
(assert (= randval-left-10 (__sample-rand-Left-Bits_m 10 (+ 0 randctr-left-10)
)
)
)
(declare-const randctr-left-11 Int)
(assert (= randctr-left-11 (composition-rand-Left-11 game-state-Left_inst-old)
)
)
(declare-const randval-left-11 Bits_n)
(assert (= randval-left-11 (__sample-rand-Left-Bits_n 11 (+ 0 randctr-left-11)
)
)
)
(declare-const randctr-left-12 Int)
(assert (= randctr-left-12 (composition-rand-Left-12 game-state-Left_inst-old)
)
)
(declare-const randval-left-12 Bits_p)
(assert (= randval-left-12 (__sample-rand-Left-Bits_p 12 (+ 0 randctr-left-12)
)
)
)
(declare-const randctr-right-1 Int)
(assert (= randctr-right-1 (composition-rand-Right-1 game-state-Right_inst-old)
)
)
(declare-const randval-right-1 Bits_n)
(assert (= randval-right-1 (__sample-rand-Right-Bits_n 1 (+ 0 randctr-right-1)
)
)
)
(declare-const randctr-right-2 Int)
(assert (= randctr-right-2 (composition-rand-Right-2 game-state-Right_inst-old)
)
)
(declare-const randval-right-2 Bits_n)
(assert (= randval-right-2 (__sample-rand-Right-Bits_n 2 (+ 0 randctr-right-2)
)
)
)
(declare-const randctr-right-3 Int)
(assert (= randctr-right-3 (composition-rand-Right-3 game-state-Right_inst-old)
)
)
(declare-const randval-right-3 Bits_n)
(assert (= randval-right-3 (__sample-rand-Right-Bits_n 3 (+ 0 randctr-right-3)
)
)
)
(declare-const randctr-right-4 Int)
(assert (= randctr-right-4 (composition-rand-Right-4 game-state-Right_inst-old)
)
)
(declare-const randval-right-4 Bits_n)
(assert (= randval-right-4 (__sample-rand-Right-Bits_n 4 (+ 0 randctr-right-4)
)
)
)
(declare-const randctr-right-5 Int)
(assert (= randctr-right-5 (composition-rand-Right-5 game-state-Right_inst-old)
)
)
(declare-const randval-right-5 Bits_n)
(assert (= randval-right-5 (__sample-rand-Right-Bits_n 5 (+ 0 randctr-right-5)
)
)
)
(declare-const randctr-right-6 Int)
(assert (= randctr-right-6 (composition-rand-Right-6 game-state-Right_inst-old)
)
)
(declare-const randval-right-6 Bits_n)
(assert (= randval-right-6 (__sample-rand-Right-Bits_n 6 (+ 0 randctr-right-6)
)
)
)
(declare-const randctr-right-7 Int)
(assert (= randctr-right-7 (composition-rand-Right-7 game-state-Right_inst-old)
)
)
(declare-const randval-right-7 Bits_n)
(assert (= randval-right-7 (__sample-rand-Right-Bits_n 7 (+ 0 randctr-right-7)
)
)
)
(declare-const randctr-right-8 Int)
(assert (= randctr-right-8 (composition-rand-Right-8 game-state-Right_inst-old)
)
)
(declare-const randval-right-8 Bits_n)
(assert (= randval-right-8 (__sample-rand-Right-Bits_n 8 (+ 0 randctr-right-8)
)
)
)
(declare-const randctr-right-9 Int)
(assert (= randctr-right-9 (composition-rand-Right-9 game-state-Right_inst-old)
)
)
(declare-const randval-right-9 Bits_n)
(assert (= randval-right-9 (__sample-rand-Right-Bits_n 9 (+ 0 randctr-right-9)
)
)
)
(declare-const randctr-right-10 Int)
(assert (= randctr-right-10 (composition-rand-Right-10 game-state-Right_inst-old)
)
)
(declare-const randval-right-10 Bits_n)
(assert (= randval-right-10 (__sample-rand-Right-Bits_n 10 (+ 0 randctr-right-10)
)
)
)
(declare-const randctr-right-11 Int)
(assert (= randctr-right-11 (composition-rand-Right-11 game-state-Right_inst-old)
)
)
(declare-const randval-right-11 Bits_n)
(assert (= randval-right-11 (__sample-rand-Right-Bits_n 11 (+ 0 randctr-right-11)
)
)
)
(declare-const randctr-right-12 Int)
(assert (= randctr-right-12 (composition-rand-Right-12 game-state-Right_inst-old)
)
)
(declare-const randval-right-12 Bits_n)
(assert (= randval-right-12 (__sample-rand-Right-Bits_n 12 (+ 0 randctr-right-12)
)
)
)
(declare-const randctr-right-13 Int)
(assert (= randctr-right-13 (composition-rand-Right-13 game-state-Right_inst-old)
)
)
(declare-const randval-right-13 Bits_n)
(assert (= randval-right-13 (__sample-rand-Right-Bits_n 13 (+ 0 randctr-right-13)
)
)
)
(declare-const randctr-right-14 Int)
(assert (= randctr-right-14 (composition-rand-Right-14 game-state-Right_inst-old)
)
)
(declare-const randval-right-14 Bits_n)
(assert (= randval-right-14 (__sample-rand-Right-Bits_n 14 (+ 0 randctr-right-14)
)
)
)
(declare-const randctr-right-15 Int)
(assert (= randctr-right-15 (composition-rand-Right-15 game-state-Right_inst-old)
)
)
(declare-const randval-right-15 Bits_n)
(assert (= randval-right-15 (__sample-rand-Right-Bits_n 15 (+ 0 randctr-right-15)
)
)
)
(declare-const randctr-right-16 Int)
(assert (= randctr-right-16 (composition-rand-Right-16 game-state-Right_inst-old)
)
)
(declare-const randval-right-16 Bits_n)
(assert (= randval-right-16 (__sample-rand-Right-Bits_n 16 (+ 0 randctr-right-16)
)
)
)
(define-fun get-rand-ctr-Left ((sample-id Int)
)
 Int (ite (= sample-id 12)
 (composition-rand-Left-12 game-state-Left_inst-old)
 (ite (= sample-id 11)
 (composition-rand-Left-11 game-state-Left_inst-old)
 (ite (= sample-id 10)
 (composition-rand-Left-10 game-state-Left_inst-old)
 (ite (= sample-id 9)
 (composition-rand-Left-9 game-state-Left_inst-old)
 (ite (= sample-id 8)
 (composition-rand-Left-8 game-state-Left_inst-old)
 (ite (= sample-id 7)
 (composition-rand-Left-7 game-state-Left_inst-old)
 (ite (= sample-id 6)
 (composition-rand-Left-6 game-state-Left_inst-old)
 (ite (= sample-id 5)
 (composition-rand-Left-5 game-state-Left_inst-old)
 (ite (= sample-id 4)
 (composition-rand-Left-4 game-state-Left_inst-old)
 (ite (= sample-id 3)
 (composition-rand-Left-3 game-state-Left_inst-old)
 (ite (= sample-id 2)
 (composition-rand-Left-2 game-state-Left_inst-old)
 (ite (= sample-id 1)
 (composition-rand-Left-1 game-state-Left_inst-old)
 (ite (= sample-id 0)
 (composition-rand-Left-0 game-state-Left_inst-old)
 0)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define-fun get-rand-ctr-Right ((sample-id Int)
)
 Int (ite (= sample-id 16)
 (composition-rand-Right-16 game-state-Right_inst-old)
 (ite (= sample-id 15)
 (composition-rand-Right-15 game-state-Right_inst-old)
 (ite (= sample-id 14)
 (composition-rand-Right-14 game-state-Right_inst-old)
 (ite (= sample-id 13)
 (composition-rand-Right-13 game-state-Right_inst-old)
 (ite (= sample-id 12)
 (composition-rand-Right-12 game-state-Right_inst-old)
 (ite (= sample-id 11)
 (composition-rand-Right-11 game-state-Right_inst-old)
 (ite (= sample-id 10)
 (composition-rand-Right-10 game-state-Right_inst-old)
 (ite (= sample-id 9)
 (composition-rand-Right-9 game-state-Right_inst-old)
 (ite (= sample-id 8)
 (composition-rand-Right-8 game-state-Right_inst-old)
 (ite (= sample-id 7)
 (composition-rand-Right-7 game-state-Right_inst-old)
 (ite (= sample-id 6)
 (composition-rand-Right-6 game-state-Right_inst-old)
 (ite (= sample-id 5)
 (composition-rand-Right-5 game-state-Right_inst-old)
 (ite (= sample-id 4)
 (composition-rand-Right-4 game-state-Right_inst-old)
 (ite (= sample-id 3)
 (composition-rand-Right-3 game-state-Right_inst-old)
 (ite (= sample-id 2)
 (composition-rand-Right-2 game-state-Right_inst-old)
 (ite (= sample-id 1)
 (composition-rand-Right-1 game-state-Right_inst-old)
 (ite (= sample-id 0)
 (composition-rand-Right-0 game-state-Right_inst-old)
 0)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define-fun rand-is-eq ((sample-id-left Int)
 (sample-id-right Int)
 (sample-ctr-left Int)
 (sample-ctr-right Int)
)
 Bool (ite (and (or (= 1 sample-id-left)
 (= 2 sample-id-left)
 (= 3 sample-id-left)
 (= 4 sample-id-left)
 (= 5 sample-id-left)
 (= 6 sample-id-left)
 (= 7 sample-id-left)
 (= 8 sample-id-left)
 (= 9 sample-id-left)
 (= 11 sample-id-left)
)
 (or (= 1 sample-id-right)
 (= 2 sample-id-right)
 (= 3 sample-id-right)
 (= 4 sample-id-right)
 (= 5 sample-id-right)
 (= 6 sample-id-right)
 (= 7 sample-id-right)
 (= 8 sample-id-right)
 (= 9 sample-id-right)
 (= 10 sample-id-right)
 (= 11 sample-id-right)
 (= 12 sample-id-right)
 (= 13 sample-id-right)
 (= 14 sample-id-right)
 (= 15 sample-id-right)
 (= 16 sample-id-right)
)
)
 (= (__sample-rand-Left-Bits_n sample-id-left sample-ctr-left)
 (__sample-rand-Right-Bits_n sample-id-right sample-ctr-right)
)
 false)
)
(push 1)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   Randomness mapping
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define-fun randomness-mapping-GBLG (
        (ctr-left      Int)
        (ctr-right     Int) 
        (id-left       Int)
        (id-right      Int) 
        (new-left      Int)
        (new-right     Int)
                                    ) Bool
(or
(and
(= ctr-left  new-left )
(= ctr-right new-right)
(= id-left  5)
(= id-right 7)
)
(and
(= ctr-left  new-left )
(= ctr-right new-right)
(= id-left  6)
(= id-right 8)
)
(and
(= ctr-left  new-left )
(= ctr-right new-right)
(= id-left  9)
(= id-right 9)
)
(and
(= ctr-left  new-left )
(= ctr-right new-right)
(= id-left  11)
(= id-right 10)
)
(and
(= (+ 1 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  9)
(= id-right 11)
)
(and
(= (+ 1 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  11)
(= id-right 12)
)
(and
(= (+ 2 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  9)
(= id-right 13)
)
(and
(= (+ 2 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  11)
(= id-right 14)
)
(and
(= (+ 3 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  9)
(= id-right 15)
)
(and
(= (+ 3 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  11)
(= id-right 16)
)
)
;equality of values of the sample functions for the lower Key package
;(= randval-left-5    randval-right-7)
;(= randval-left-6    randval-right-8)

;equality of values of the sample functions for the encryptions
;(= randval-left-9    randval-right-9)
;(= randval-left-11   randval-right-10)
;(= randval-left-9+1  randval-right-11)
;(= randval-left-11+1 randval-right-12)
;(= randval-left-9+2  randval-right-11)
;(= randval-left-11+2 randval-right-12)
;(= randval-left-9+3  randval-right-13)
;(= randval-left-11+3 randval-right-14)
;)
)

(define-fun randomness-mapping-SETBIT (
        (ctr-left      Int)
        (ctr-right     Int) 
        (id-left       Int)
        (id-right      Int) 
        (new-left      Int)
        (new-right     Int)
) Bool
false
)

(define-fun randomness-mapping-GETAOUT (
        (ctr-left      Int)
        (ctr-right     Int) 
        (id-left       Int)
        (id-right      Int) 
        (new-left      Int)
        (new-right     Int)
) Bool
(or
(and
(= id-left  1)
(= id-right 1)
(= ctr-left  new-left )
(= ctr-right new-right)
)
(and
(= id-left  2)
(= id-right 2)
(= ctr-left  new-left )
(= ctr-right new-right)
))
;(and
;(= randval-left-GETA-1 randval-right-GETA-1)
;(= randval-left-GETA-2 randval-right-GETA-2)
;)
)

(define-fun randomness-mapping-GETKEYSIN (
        (ctr-left      Int)
        (ctr-right     Int) 
        (id-left       Int)
        (id-right      Int) 
        (new-left      Int)
        (new-right     Int)
) 
Bool
false
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   op is total (special-purpose glue)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(assert
(and
(not (= (select arg-GBLG-op (mk-tuple2 true  true ))(as mk-none (Maybe Bool))))
(not (= (select arg-GBLG-op (mk-tuple2 true  false))(as mk-none (Maybe Bool))))
(not (= (select arg-GBLG-op (mk-tuple2 false true ))(as mk-none (Maybe Bool))))
(not (= (select arg-GBLG-op (mk-tuple2 false false))(as mk-none (Maybe Bool))))
))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   Datatypes to extract key package state
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(declare-datatype
  State_keys
  (
    (mk-state-keys
      (state-keys-T (Array Int (Maybe (Array Bool (Maybe Bits_n)))))
      (state-keys-z (Array Int (Maybe Bool)))
      (state-keys-flag (Array Int (Maybe Bool))))))

(define-fun project-State_Left_keys_top ((in State_Left_keys_top)) State_keys
  (mk-state-keys (state-Left-keys_top-T    in)
                 (state-Left-keys_top-z    in)
                 (state-Left-keys_top-flag in)))

(define-fun project-State_Right_keys_top ((in State_Right_keys_top)) State_keys
  (mk-state-keys (state-Right-keys_top-T    in)
                 (state-Right-keys_top-z    in)
                 (state-Right-keys_top-flag in)))

(define-fun project-State_Left_keys_bottom ((in State_Left_keys_bottom)) State_keys
  (mk-state-keys (state-Left-keys_bottom-T    in)
                 (state-Left-keys_bottom-z    in)
                 (state-Left-keys_bottom-flag in)))

(define-fun project-State_Right_keys_bottom ((in State_Right_keys_bottom)) State_keys
  (mk-state-keys (state-Right-keys_bottom-T    in)
                 (state-Right-keys_bottom-z    in)
                 (state-Right-keys_bottom-flag in)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   Well-definedness of tables
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;If T h != none => T h b != none (for both b=0 and b=1)

(define-fun well-defined ((T (Array Int (Maybe (Array Bool (Maybe Bits_n)))))) Bool
  (forall ((h Int))
    (or
      (= (select T h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
      (forall ((b Bool))
        (not
          (= (select (maybe-get (select T h)) b) (as mk-none (Maybe Bits_n)))
)))))

; captures the possible states which a Key package can be in when
; the "top" queries are GETKEYS queries 
;
(define-fun well-defined-Key-bool ((key-state State_keys)) Bool
(let ((T    (state-keys-T    key-state))
      (flag (state-keys-flag key-state))
      (z    (state-keys-z    key-state)))

; flag is true <=> key has been chosen 
(and

;If T h != none => T h b != none (for both b=0 and b=1)
(well-defined T)

(forall ((hhh Int))
(or
    (= (select flag hhh) (as mk-none (Maybe Bool)))
    (= (select flag hhh) (   mk-some        true )))
)

;If flag h != true => T h  = none
;If flag h  = true => T h != none (for both b=0 and b=1)

(forall ((hhh Int)) 
(and 
(=>
    (not (= (select flag hhh) (mk-some true)))
    (= (select T hhh) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
)
(=>
    (= (select flag hhh) (mk-some true))
    (and
       (not (= (select T hhh)                            (as mk-none (Maybe (Array Bool (Maybe Bits_n))))))
       (not (= (select (maybe-get (select T hhh)) true ) (as mk-none (Maybe Bits_n))))
       (not (= (select (maybe-get (select T hhh)) false) (as mk-none (Maybe Bits_n))))
    )
))))))

; captures the possible states which a Key package can be in when
; the "top" queries are GETA and SETBIT queries 
;
(define-fun well-defined-Key-active ((key-state State_keys)) Bool
(let ((T    (state-keys-T    key-state))
      (flag (state-keys-flag key-state))
      (z    (state-keys-z    key-state)))

(and

;If T h != none => T h b != none (for both b=0 and b=1)
(well-defined T)

(forall ((hhh Int))
(or
  (= (select flag hhh) (as mk-none (Maybe Bool)))
  (= (select flag hhh) (   mk-some        true ))))

; flag has been set  => bit has been set
(forall ((hhh Int)) (=> (=  (mk-some true ) (select flag hhh))  
                    (or (=  (mk-some true ) (select z    hhh))
                        (=  (mk-some false) (select z    hhh))
                    )))

; key has been set => flag has been set
(forall ((hhh Int)) (=>
                    (not
                    (= (select T hhh) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
                    )
                    (= (select flag hhh) (mk-some true)))
                    ))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Invariant
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; This is supposed to be an invariant
(define-fun invariant-GBLG          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left  Int) ;old index
;        (state-length-right Int) ;old index
;        (state-left-new  Return-Left-gate-GBLG)
;        (state-right-new Return-Right-simgate-GBLG)
;        (h Int)
;        (l Int)
;        (r Int)
;        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
;        (j Int)
)
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right)))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right)))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))



(define-fun invariant-SETBIT      (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left  Int) ;old index
;        (state-length-right Int) ;old index
;        (state-left-new  Return_Left_keys_top_SETBIT)
;        (state-right-new Return_Right_keys_top_SETBIT)
;        (h Int)
;        (zz Bool)
)
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left  )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right )))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left  )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right )))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))



(define-fun invariant-GETAOUT      (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left  Int) ;old index
;        (state-length-right Int) ;old index
;        (state-left-new  Return_Left_keys_top_GETAOUT)
;        (state-right-new Return_Right_keys_top_GETAOUT)
;        (h Int)
        )
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right)))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right)))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))



(define-fun invariant-GETKEYSIN      (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left  Int) ;old index
;        (state-length-right Int) ;old index
;        (state-left-new  Return_Left_keys_bottom_GETKEYSIN)
;        (state-right-new Return_Right_keys_bottom_GETKEYSIN)
;        (h Int)
)
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left  )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right )))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left  )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right )))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    LEFT aborts
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-fun left-all-aborts          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left Int)  ; old index
;        (state-length-right Int) ; old index
        (state-left-NEU  Return-Left-gate-GBLG)      
        (state-right-NEU Return-Right-simgate-GBLG) 
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool


    (let (
      (state-left-1  (return-Left-gate-GBLG-game-state state-left-NEU)
      )
         )

  (let

; state of the key packages
(
(top-key-package-left-1     (project-State_Left_keys_top     (composition-pkgstate-Left-keys_top     state-left-1)))
(bottom-key-package-left-1  (project-State_Left_keys_bottom  (composition-pkgstate-Left-keys_bottom  state-left-1)))
)

(let

; table of the top key package
;        T: Table(Integer,Table(Bool,Bits(n))),
;        z: Table(Integer,Bool),
(
(T-top-left-1        (state-keys-T       top-key-package-left-1))
(z-top-left-1        (state-keys-z       top-key-package-left-1))
(flag-top-left-1     (state-keys-flag    top-key-package-left-1))
(flag-bot-left-1     (state-keys-flag bottom-key-package-left-1))
)

;;; if l is undefined, then abort
(=>
(or
(= (select    z-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l)    (mk-some        false))
(= (select    z-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r)    (mk-some        false))
(= (select flag-bot-left-1 j)    (mk-some        true ))
)
;(= (return-Left-gate-GBLG-is-abort state-left-NEU) true)
;
; in der neuen match syntax below:
;
(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort true)
 ((mk-return-value v) false)))
)))))

; re-built this:

(define-fun left-inverse-all-aborts          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left Int)  ; old index
;        (state-length-right Int) ; old index
        (state-left-NEU  Return-Left-gate-GBLG)      
        (state-right-NEU Return-Right-simgate-GBLG) 
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool


    (let (
      (state-left-1  (return-Left-gate-GBLG-game-state state-left-NEU)
      )
         )

  (let

; state of the key packages
(
(top-key-package-left-1     (project-State_Left_keys_top     (composition-pkgstate-Left-keys_top     state-left-1)))
(bottom-key-package-left-1  (project-State_Left_keys_bottom  (composition-pkgstate-Left-keys_bottom  state-left-1)))
)

(let

; table of the top key package
;        T: Table(Integer,Table(Bool,Bits(n))),
;        z: Table(Integer,Bool),
(
(T-top-left-1        (state-keys-T       top-key-package-left-1))
(z-top-left-1        (state-keys-z       top-key-package-left-1))
(flag-top-left-1     (state-keys-flag    top-key-package-left-1))
(flag-bot-left-1     (state-keys-flag bottom-key-package-left-1))
)

;;; if l is undefined, then abort
(=>
;(= (return-Left-gate-GBLG-is-abort state-left-NEU) true)
;
; in der neuen match syntax below:
;
(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort true)
 ((mk-return-value v) false)))
(or
(= (select    z-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l)    (mk-some        false))
(= (select    z-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r)    (mk-some        false))
(= (select flag-bot-left-1 j)    (mk-some        true ))
)
)))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    RIGHT aborts
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; when ... happens, then abort

(define-fun right-all-aborts          (
        (state-left     CompositionState-Left )
        (state-right    CompositionState-Right)
;        (state-length-left Int)  ; old index
;        (state-length-right Int) ; old index
        (state-left-NEU  Return-Left-gate-GBLG)      ; old index
        (state-right-NEU Return-Right-simgate-GBLG) ; old index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool

  (let

; state of the key packages
(
(bottom-key-package-right-1    (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom  state-right)))
(top-key-package-right-1       (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top     state-right)))
)


(let

; tables of the top and bottom key package
(
(   T-top-right-1  (state-keys-T       top-key-package-right-1))
(   z-top-right-1  (state-keys-z       top-key-package-right-1))
(flag-top-right-1  (state-keys-flag    top-key-package-right-1))
(flag-bot-right-1  (state-keys-flag bottom-key-package-right-1))
(   z-bot-right-1  (state-keys-z    bottom-key-package-right-1))
)

;;; if j is true, then abort, re-written as
;;; if no abort, then j is false
;(=>
;(= (return-Right-simgate-GBLG-is-abort state-right-NEU) true)
;(let ((outcome (get-outcome returnvalue)))
;  (match outcome
;    (( mk-abort  
;         (and (cond1 state)
;              (cond2 state)))
;     ((mk-return-value v) 
;         (and (cond1 state v) 
;              (cond2 state v))))))
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(((mk-return-value v)
(not
(or
(= (select    z-top-right-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 l)    (mk-some        false))
(= (select    z-top-right-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 r)    (mk-some        false))
(= (select flag-bot-right-1 j)    (mk-some        true ))
(= (select    z-bot-right-1 j)    (mk-some        true ))
(= (select    z-bot-right-1 j)    (mk-some        false))
))
)
(mk-abort true)
)))))



(define-fun right-all-aborts-inverse          (
        (state-left        CompositionState-Left )
        (state-right       CompositionState-Right)
       ; (state-length-left  Int) ; old index
       ; (state-length-right Int) ; old index
        (state-left-NEU     Return-Left-gate-GBLG)     ; contains own index
        (state-right-NEU    Return-Right-simgate-GBLG) ; contains own index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool

  (let

; state of the key packages
(
(bottom-key-package-right-1    (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom  state-right)))
(   top-key-package-right-1    (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top     state-right)))
)


(let

; table of the bottom key package
(
(   T-top-right-1     (state-keys-T       top-key-package-right-1))
(   z-top-right-1     (state-keys-z       top-key-package-right-1))
(flag-top-right-1     (state-keys-flag    top-key-package-right-1))
(flag-bottom-right-1  (state-keys-flag bottom-key-package-right-1))
(   z-bottom-right-1  (state-keys-z    bottom-key-package-right-1))
)

;;; abort => input on l or z not defined or output was already defined.
;(=>
;(= (return-Right-simgate-GBLG-is-abort state-right-NEU) true)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
((mk-abort
(or
(= (select    z-top-right-1    l)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    l)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    l)       (mk-some        false))
(= (select    z-top-right-1    r)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    r)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    r)       (mk-some        false))
(= (select flag-bottom-right-1 j)       (mk-some        true ))
(= (select    z-bottom-right-1 j)       (mk-some        true ))
(= (select    z-bottom-right-1 j)       (mk-some        false))
))
((mk-return-value v) true)
)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    LEFT aborts = RIGHT aborts
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-fun aborts-equal          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
       ; (state-length-left  Int) ; old index = 1
       ; (state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-gate-GBLG)      ; also contains new index    
        (state-right-NEU Return-Right-simgate-GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool
;(= (return-Left-gate-GBLG-is-abort     state-left-NEU)
;   (return-Right-simgate-GBLG-is-abort state-right-NEU))

(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
))))))

(define-fun aborts-equal-SETBIT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-keys_top-SETBIT)      ; also contains new index    
        (state-right-NEU Return-Right-keys_top-SETBIT) ; also contains new index
        (h Int)
        (zz Bool))
        Bool


(match (return-Left-keys_top-SETBIT-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))
)

(define-fun aborts-equal-GETAOUT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-keys_top-GETAOUT)      ; also contains new index    
        (state-right-NEU Return-Right-keys_top-GETAOUT) ; also contains new index
        (h Int))
        Bool


(match (return-Left-keys_top-GETAOUT-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))
;(= (return-Left-keys_top-GETAOUT-is-abort  state-left-NEU)
;   (return-Right-keys_top-GETAOUT-is-abort state-right-NEU))
)


(define-fun aborts-equal-GETKEYSIN          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-keys_bottom-GETKEYSIN)      ; also contains new index    
        (state-right-NEU Return-Right-keys_bottom-GETKEYSIN) ; also contains new index
        (h Int))
        Bool
(match (return-Left-keys_bottom-GETKEYSIN-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))

;(= (return-Left-keys_bottom-GETKEYSIN-is-abort  state-left-NEU)
;   (return-Right-keys_bottom-GETKEYSIN-is-abort state-right-NEU))
)

(define-fun aborts-left-right          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-gate-GBLG)      ; also contains new index    
        (state-right-NEU Return-Right-simgate-GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool


(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true) ;ex falso quod libet
 ((mk-return-value v)  true)
)))))

;(=> (return-Left-gate-GBLG-is-abort     state-left-NEU)
;    (return-Right-simgate-GBLG-is-abort state-right-NEU))
)

(define-fun aborts-right-left          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-gate-GBLG)      ; also contains new index    
        (state-right-NEU Return-Right-simgate-GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool

(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  true)
)))
 ((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            false) ;modus ponens
 ((mk-return-value v)  true)
)))))

;(=> (return-Right-simgate-GBLG-is-abort state-right-NEU)
;    (return-Left-gate-GBLG-is-abort     state-left-NEU ))
)


; no-abort

(define-fun no-abort          (
        (state-left  CompositionState-Left)
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-gate-GBLG)      ; also contains new index    
        (state-right-NEU Return-Right-simgate-GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool
(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))
;(and
;(= (return-Left-gate-GBLG-is-abort     state-left-NEU)
;   false)
;(= (return-Right-simgate-GBLG-is-abort     state-right-NEU)
;   false)
;)
)

(define-fun no-abort-SETBIT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
       ; (state-length-left  Int) ; old index = 1
       ; (state-length-right Int) ; old index = 1
        (state-left-NEU  Return-Left-keys_top-SETBIT)  ; also contains new index    
        (state-right-NEU Return-Right-keys_top-SETBIT) ; also contains new index
        (h Int)
        (zz Bool))
        Bool
(match (return-Left-keys_top-SETBIT-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))
;(and
;(= (return-Left-keys_top-SETBIT-is-abort     state-left-NEU)
;   false)
;(= (return-Right-keys_top-SETBIT-is-abort     state-right-NEU)
;   false)
;)
)

(define-fun no-abort-GETAOUT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU  Return-Left-keys_top-GETAOUT)  ; also contains new index    
        (state-right-NEU Return-Right-keys_top-GETAOUT) ; also contains new index
        (h Int))
        Bool

(and
(match (return-Left-keys_top-GETAOUT-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
))))))
;(= (return-Left-keys_top-GETAOUT-is-abort     state-left-NEU)
;   false)
;(= (return-Right-keys_top-GETAOUT-is-abort     state-right-NEU)
;   false)
)

(define-fun no-abort-GETKEYSIN          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU  Return-Left-keys_bottom-GETKEYSIN)  ; also contains new index    
        (state-right-NEU Return-Right-keys_bottom-GETKEYSIN) ; also contains new index
        (h Int))
        Bool
(and
(match (return-Left-keys_bottom-GETKEYSIN-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
))))))
;(and
;(= (return-Left-keys_bottom-GETKEYSIN-is-abort     state-left-NEU)
;   false)
;(= (return-Right-keys_bottom-GETKEYSIN-is-abort     state-right-NEU)
;   false)
;)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Same Output
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-fun same-output          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left-old Int)
        ;(state-length-right-old Int)
        (state-left-NEU Return-Left-gate-GBLG)
        (state-right-NEU Return-Right-simgate-GBLG)
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool
(and
(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort true)
((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value w)  (= v w))
))))))
;(=
;(return-Left-gate-GBLG-value return-left-gate-GBLG)
;(return-Right-simgate-GBLG-value return-right-simgate-GBLG)
;)
)

(define-fun same-output-SETBIT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left-old Int)
;        (state-length-right-old Int)
        (state-left-NEU Return-Left-keys_top-SETBIT)
        (state-right-NEU Return-Right-keys_top-SETBIT)
        (h Int)
        (zz Bool))
        Bool
(and
(match (return-Left-keys_top-SETBIT-return-value-or-abort state-left-NEU)
((mk-abort true)
((mk-return-value v)
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value w)  (= v w))
))))))
;(=
;(return-Left-keys_top-SETBIT-value return-left-keys_top-SETBIT)
;(return-Right-keys_top-SETBIT-value return-right-keys_top-SETBIT)
;)
)

(define-fun same-output-GETAOUT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
       ; (state-length-left-old Int)
       ; (state-length-right-old Int)
        (state-left-NEU Return-Left-keys_top-GETAOUT)
        (state-right-NEU Return-Right-keys_top-GETAOUT)
        (h Int))
        Bool
(and
(match (return-Left-keys_top-GETAOUT-return-value-or-abort state-left-NEU)
((mk-abort true)
((mk-return-value v)
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value w)  (= v w))
))))))
;(=
;(return-Left-keys_top-GETAOUT-value return-left-keys_top-GETAOUT)
;(return-Right-keys_top-GETAOUT-value return-right-keys_top-GETAOUT)
;)
)

(define-fun same-output-GETKEYSIN          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left-old Int)
;        (state-length-right-old Int)
        (state-left-NEU Return-Left-keys_bottom-GETKEYSIN)
        (state-right-NEU Return-Right-keys_bottom-GETKEYSIN)
        (h Int))
        Bool
(and
(match (return-Left-keys_bottom-GETKEYSIN-return-value-or-abort state-left-NEU)
((mk-abort true)
((mk-return-value v)
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value w)  (= v w))
))))))
;(=
;(return-Left-keys_bottom-GETKEYSIN-value return-left-keys_bottom-GETKEYSIN)
;(return-Right-keys_bottom-GETKEYSIN-value return-right-keys_bottom-GETKEYSIN)
;)
)(check-sat)
(push 1)(assert (not (=> (and (forall ((randmap-sample-id-left Int)
 (randmap-sample-ctr-left Int)
 (randmap-sample-id-right Int)
 (randmap-sample-ctr-right Int)
)
 (=> (randomness-mapping-GETAOUT (get-rand-ctr-Left randmap-sample-id-left)
 (get-rand-ctr-Right randmap-sample-id-right)
 randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
 (rand-is-eq randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
)
)
 (invariant-GETAOUT game-state-Left_inst-old game-state-Right_inst-old)
)
 (invariant-GETAOUT game-state-Left_inst-new-GETAOUT game-state-Right_inst-new-GETAOUT)
)
)
)
(check-sat)
(pop 1)(push 1)(assert (not (=> (and (forall ((randmap-sample-id-left Int)
 (randmap-sample-ctr-left Int)
 (randmap-sample-id-right Int)
 (randmap-sample-ctr-right Int)
)
 (=> (randomness-mapping-GETAOUT (get-rand-ctr-Left randmap-sample-id-left)
 (get-rand-ctr-Right randmap-sample-id-right)
 randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
 (rand-is-eq randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
)
)
 (invariant-GETAOUT game-state-Left_inst-old game-state-Right_inst-old)
)
 (aborts-equal-GETAOUT game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GETAOUT return-Right_inst-GETAOUT arg-GETAOUT-h)
)
)
)
(check-sat)
(pop 1)(push 1)(assert (not (=> (and (forall ((randmap-sample-id-left Int)
 (randmap-sample-ctr-left Int)
 (randmap-sample-id-right Int)
 (randmap-sample-ctr-right Int)
)
 (=> (randomness-mapping-GETAOUT (get-rand-ctr-Left randmap-sample-id-left)
 (get-rand-ctr-Right randmap-sample-id-right)
 randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
 (rand-is-eq randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
)
)
 (invariant-GETAOUT game-state-Left_inst-old game-state-Right_inst-old)
 (no-abort-GETAOUT game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GETAOUT return-Right_inst-GETAOUT arg-GETAOUT-h)
)
 (same-output-GETAOUT game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GETAOUT return-Right_inst-GETAOUT arg-GETAOUT-h)
)
)
)
(check-sat)
(pop 1)(pop 1)(push 1)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   Randomness mapping
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define-fun randomness-mapping-GBLG (
        (ctr-left      Int)
        (ctr-right     Int) 
        (id-left       Int)
        (id-right      Int) 
        (new-left      Int)
        (new-right     Int)
                                    ) Bool
(or
(and
(= ctr-left  new-left )
(= ctr-right new-right)
(= id-left  5)
(= id-right 7)
)
(and
(= ctr-left  new-left )
(= ctr-right new-right)
(= id-left  6)
(= id-right 8)
)
(and
(= ctr-left  new-left )
(= ctr-right new-right)
(= id-left  9)
(= id-right 9)
)
(and
(= ctr-left  new-left )
(= ctr-right new-right)
(= id-left  11)
(= id-right 10)
)
(and
(= (+ 1 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  9)
(= id-right 11)
)
(and
(= (+ 1 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  11)
(= id-right 12)
)
(and
(= (+ 2 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  9)
(= id-right 13)
)
(and
(= (+ 2 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  11)
(= id-right 14)
)
(and
(= (+ 3 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  9)
(= id-right 15)
)
(and
(= (+ 3 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  11)
(= id-right 16)
)
)
;equality of values of the sample functions for the lower Key package
;(= randval-left-5    randval-right-7)
;(= randval-left-6    randval-right-8)

;equality of values of the sample functions for the encryptions
;(= randval-left-9    randval-right-9)
;(= randval-left-11   randval-right-10)
;(= randval-left-9+1  randval-right-11)
;(= randval-left-11+1 randval-right-12)
;(= randval-left-9+2  randval-right-11)
;(= randval-left-11+2 randval-right-12)
;(= randval-left-9+3  randval-right-13)
;(= randval-left-11+3 randval-right-14)
;)
)

(define-fun randomness-mapping-SETBIT (
        (ctr-left      Int)
        (ctr-right     Int) 
        (id-left       Int)
        (id-right      Int) 
        (new-left      Int)
        (new-right     Int)
) Bool
false
)

(define-fun randomness-mapping-GETAOUT (
        (ctr-left      Int)
        (ctr-right     Int) 
        (id-left       Int)
        (id-right      Int) 
        (new-left      Int)
        (new-right     Int)
) Bool
(or
(and
(= id-left  1)
(= id-right 1)
(= ctr-left  new-left )
(= ctr-right new-right)
)
(and
(= id-left  2)
(= id-right 2)
(= ctr-left  new-left )
(= ctr-right new-right)
))
;(and
;(= randval-left-GETA-1 randval-right-GETA-1)
;(= randval-left-GETA-2 randval-right-GETA-2)
;)
)

(define-fun randomness-mapping-GETKEYSIN (
        (ctr-left      Int)
        (ctr-right     Int) 
        (id-left       Int)
        (id-right      Int) 
        (new-left      Int)
        (new-right     Int)
) 
Bool
false
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   op is total (special-purpose glue)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(assert
(and
(not (= (select arg-GBLG-op (mk-tuple2 true  true ))(as mk-none (Maybe Bool))))
(not (= (select arg-GBLG-op (mk-tuple2 true  false))(as mk-none (Maybe Bool))))
(not (= (select arg-GBLG-op (mk-tuple2 false true ))(as mk-none (Maybe Bool))))
(not (= (select arg-GBLG-op (mk-tuple2 false false))(as mk-none (Maybe Bool))))
))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   Datatypes to extract key package state
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(declare-datatype
  State_keys
  (
    (mk-state-keys
      (state-keys-T (Array Int (Maybe (Array Bool (Maybe Bits_n)))))
      (state-keys-z (Array Int (Maybe Bool)))
      (state-keys-flag (Array Int (Maybe Bool))))))

(define-fun project-State_Left_keys_top ((in State_Left_keys_top)) State_keys
  (mk-state-keys (state-Left-keys_top-T    in)
                 (state-Left-keys_top-z    in)
                 (state-Left-keys_top-flag in)))

(define-fun project-State_Right_keys_top ((in State_Right_keys_top)) State_keys
  (mk-state-keys (state-Right-keys_top-T    in)
                 (state-Right-keys_top-z    in)
                 (state-Right-keys_top-flag in)))

(define-fun project-State_Left_keys_bottom ((in State_Left_keys_bottom)) State_keys
  (mk-state-keys (state-Left-keys_bottom-T    in)
                 (state-Left-keys_bottom-z    in)
                 (state-Left-keys_bottom-flag in)))

(define-fun project-State_Right_keys_bottom ((in State_Right_keys_bottom)) State_keys
  (mk-state-keys (state-Right-keys_bottom-T    in)
                 (state-Right-keys_bottom-z    in)
                 (state-Right-keys_bottom-flag in)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   Well-definedness of tables
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;If T h != none => T h b != none (for both b=0 and b=1)

(define-fun well-defined ((T (Array Int (Maybe (Array Bool (Maybe Bits_n)))))) Bool
  (forall ((h Int))
    (or
      (= (select T h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
      (forall ((b Bool))
        (not
          (= (select (maybe-get (select T h)) b) (as mk-none (Maybe Bits_n)))
)))))

; captures the possible states which a Key package can be in when
; the "top" queries are GETKEYS queries 
;
(define-fun well-defined-Key-bool ((key-state State_keys)) Bool
(let ((T    (state-keys-T    key-state))
      (flag (state-keys-flag key-state))
      (z    (state-keys-z    key-state)))

; flag is true <=> key has been chosen 
(and

;If T h != none => T h b != none (for both b=0 and b=1)
(well-defined T)

(forall ((hhh Int))
(or
    (= (select flag hhh) (as mk-none (Maybe Bool)))
    (= (select flag hhh) (   mk-some        true )))
)

;If flag h != true => T h  = none
;If flag h  = true => T h != none (for both b=0 and b=1)

(forall ((hhh Int)) 
(and 
(=>
    (not (= (select flag hhh) (mk-some true)))
    (= (select T hhh) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
)
(=>
    (= (select flag hhh) (mk-some true))
    (and
       (not (= (select T hhh)                            (as mk-none (Maybe (Array Bool (Maybe Bits_n))))))
       (not (= (select (maybe-get (select T hhh)) true ) (as mk-none (Maybe Bits_n))))
       (not (= (select (maybe-get (select T hhh)) false) (as mk-none (Maybe Bits_n))))
    )
))))))

; captures the possible states which a Key package can be in when
; the "top" queries are GETA and SETBIT queries 
;
(define-fun well-defined-Key-active ((key-state State_keys)) Bool
(let ((T    (state-keys-T    key-state))
      (flag (state-keys-flag key-state))
      (z    (state-keys-z    key-state)))

(and

;If T h != none => T h b != none (for both b=0 and b=1)
(well-defined T)

(forall ((hhh Int))
(or
  (= (select flag hhh) (as mk-none (Maybe Bool)))
  (= (select flag hhh) (   mk-some        true ))))

; flag has been set  => bit has been set
(forall ((hhh Int)) (=> (=  (mk-some true ) (select flag hhh))  
                    (or (=  (mk-some true ) (select z    hhh))
                        (=  (mk-some false) (select z    hhh))
                    )))

; key has been set => flag has been set
(forall ((hhh Int)) (=>
                    (not
                    (= (select T hhh) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
                    )
                    (= (select flag hhh) (mk-some true)))
                    ))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Invariant
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; This is supposed to be an invariant
(define-fun invariant-GBLG          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left  Int) ;old index
;        (state-length-right Int) ;old index
;        (state-left-new  Return-Left-gate-GBLG)
;        (state-right-new Return-Right-simgate-GBLG)
;        (h Int)
;        (l Int)
;        (r Int)
;        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
;        (j Int)
)
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right)))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right)))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))



(define-fun invariant-SETBIT      (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left  Int) ;old index
;        (state-length-right Int) ;old index
;        (state-left-new  Return_Left_keys_top_SETBIT)
;        (state-right-new Return_Right_keys_top_SETBIT)
;        (h Int)
;        (zz Bool)
)
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left  )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right )))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left  )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right )))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))



(define-fun invariant-GETAOUT      (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left  Int) ;old index
;        (state-length-right Int) ;old index
;        (state-left-new  Return_Left_keys_top_GETAOUT)
;        (state-right-new Return_Right_keys_top_GETAOUT)
;        (h Int)
        )
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right)))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right)))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))



(define-fun invariant-GETKEYSIN      (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left  Int) ;old index
;        (state-length-right Int) ;old index
;        (state-left-new  Return_Left_keys_bottom_GETKEYSIN)
;        (state-right-new Return_Right_keys_bottom_GETKEYSIN)
;        (h Int)
)
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left  )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right )))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left  )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right )))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    LEFT aborts
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-fun left-all-aborts          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left Int)  ; old index
;        (state-length-right Int) ; old index
        (state-left-NEU  Return-Left-gate-GBLG)      
        (state-right-NEU Return-Right-simgate-GBLG) 
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool


    (let (
      (state-left-1  (return-Left-gate-GBLG-game-state state-left-NEU)
      )
         )

  (let

; state of the key packages
(
(top-key-package-left-1     (project-State_Left_keys_top     (composition-pkgstate-Left-keys_top     state-left-1)))
(bottom-key-package-left-1  (project-State_Left_keys_bottom  (composition-pkgstate-Left-keys_bottom  state-left-1)))
)

(let

; table of the top key package
;        T: Table(Integer,Table(Bool,Bits(n))),
;        z: Table(Integer,Bool),
(
(T-top-left-1        (state-keys-T       top-key-package-left-1))
(z-top-left-1        (state-keys-z       top-key-package-left-1))
(flag-top-left-1     (state-keys-flag    top-key-package-left-1))
(flag-bot-left-1     (state-keys-flag bottom-key-package-left-1))
)

;;; if l is undefined, then abort
(=>
(or
(= (select    z-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l)    (mk-some        false))
(= (select    z-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r)    (mk-some        false))
(= (select flag-bot-left-1 j)    (mk-some        true ))
)
;(= (return-Left-gate-GBLG-is-abort state-left-NEU) true)
;
; in der neuen match syntax below:
;
(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort true)
 ((mk-return-value v) false)))
)))))

; re-built this:

(define-fun left-inverse-all-aborts          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left Int)  ; old index
;        (state-length-right Int) ; old index
        (state-left-NEU  Return-Left-gate-GBLG)      
        (state-right-NEU Return-Right-simgate-GBLG) 
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool


    (let (
      (state-left-1  (return-Left-gate-GBLG-game-state state-left-NEU)
      )
         )

  (let

; state of the key packages
(
(top-key-package-left-1     (project-State_Left_keys_top     (composition-pkgstate-Left-keys_top     state-left-1)))
(bottom-key-package-left-1  (project-State_Left_keys_bottom  (composition-pkgstate-Left-keys_bottom  state-left-1)))
)

(let

; table of the top key package
;        T: Table(Integer,Table(Bool,Bits(n))),
;        z: Table(Integer,Bool),
(
(T-top-left-1        (state-keys-T       top-key-package-left-1))
(z-top-left-1        (state-keys-z       top-key-package-left-1))
(flag-top-left-1     (state-keys-flag    top-key-package-left-1))
(flag-bot-left-1     (state-keys-flag bottom-key-package-left-1))
)

;;; if l is undefined, then abort
(=>
;(= (return-Left-gate-GBLG-is-abort state-left-NEU) true)
;
; in der neuen match syntax below:
;
(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort true)
 ((mk-return-value v) false)))
(or
(= (select    z-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l)    (mk-some        false))
(= (select    z-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r)    (mk-some        false))
(= (select flag-bot-left-1 j)    (mk-some        true ))
)
)))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    RIGHT aborts
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; when ... happens, then abort

(define-fun right-all-aborts          (
        (state-left     CompositionState-Left )
        (state-right    CompositionState-Right)
;        (state-length-left Int)  ; old index
;        (state-length-right Int) ; old index
        (state-left-NEU  Return-Left-gate-GBLG)      ; old index
        (state-right-NEU Return-Right-simgate-GBLG) ; old index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool

  (let

; state of the key packages
(
(bottom-key-package-right-1    (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom  state-right)))
(top-key-package-right-1       (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top     state-right)))
)


(let

; tables of the top and bottom key package
(
(   T-top-right-1  (state-keys-T       top-key-package-right-1))
(   z-top-right-1  (state-keys-z       top-key-package-right-1))
(flag-top-right-1  (state-keys-flag    top-key-package-right-1))
(flag-bot-right-1  (state-keys-flag bottom-key-package-right-1))
(   z-bot-right-1  (state-keys-z    bottom-key-package-right-1))
)

;;; if j is true, then abort, re-written as
;;; if no abort, then j is false
;(=>
;(= (return-Right-simgate-GBLG-is-abort state-right-NEU) true)
;(let ((outcome (get-outcome returnvalue)))
;  (match outcome
;    (( mk-abort  
;         (and (cond1 state)
;              (cond2 state)))
;     ((mk-return-value v) 
;         (and (cond1 state v) 
;              (cond2 state v))))))
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(((mk-return-value v)
(not
(or
(= (select    z-top-right-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 l)    (mk-some        false))
(= (select    z-top-right-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 r)    (mk-some        false))
(= (select flag-bot-right-1 j)    (mk-some        true ))
(= (select    z-bot-right-1 j)    (mk-some        true ))
(= (select    z-bot-right-1 j)    (mk-some        false))
))
)
(mk-abort true)
)))))



(define-fun right-all-aborts-inverse          (
        (state-left        CompositionState-Left )
        (state-right       CompositionState-Right)
       ; (state-length-left  Int) ; old index
       ; (state-length-right Int) ; old index
        (state-left-NEU     Return-Left-gate-GBLG)     ; contains own index
        (state-right-NEU    Return-Right-simgate-GBLG) ; contains own index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool

  (let

; state of the key packages
(
(bottom-key-package-right-1    (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom  state-right)))
(   top-key-package-right-1    (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top     state-right)))
)


(let

; table of the bottom key package
(
(   T-top-right-1     (state-keys-T       top-key-package-right-1))
(   z-top-right-1     (state-keys-z       top-key-package-right-1))
(flag-top-right-1     (state-keys-flag    top-key-package-right-1))
(flag-bottom-right-1  (state-keys-flag bottom-key-package-right-1))
(   z-bottom-right-1  (state-keys-z    bottom-key-package-right-1))
)

;;; abort => input on l or z not defined or output was already defined.
;(=>
;(= (return-Right-simgate-GBLG-is-abort state-right-NEU) true)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
((mk-abort
(or
(= (select    z-top-right-1    l)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    l)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    l)       (mk-some        false))
(= (select    z-top-right-1    r)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    r)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    r)       (mk-some        false))
(= (select flag-bottom-right-1 j)       (mk-some        true ))
(= (select    z-bottom-right-1 j)       (mk-some        true ))
(= (select    z-bottom-right-1 j)       (mk-some        false))
))
((mk-return-value v) true)
)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    LEFT aborts = RIGHT aborts
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-fun aborts-equal          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
       ; (state-length-left  Int) ; old index = 1
       ; (state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-gate-GBLG)      ; also contains new index    
        (state-right-NEU Return-Right-simgate-GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool
;(= (return-Left-gate-GBLG-is-abort     state-left-NEU)
;   (return-Right-simgate-GBLG-is-abort state-right-NEU))

(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
))))))

(define-fun aborts-equal-SETBIT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-keys_top-SETBIT)      ; also contains new index    
        (state-right-NEU Return-Right-keys_top-SETBIT) ; also contains new index
        (h Int)
        (zz Bool))
        Bool


(match (return-Left-keys_top-SETBIT-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))
)

(define-fun aborts-equal-GETAOUT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-keys_top-GETAOUT)      ; also contains new index    
        (state-right-NEU Return-Right-keys_top-GETAOUT) ; also contains new index
        (h Int))
        Bool


(match (return-Left-keys_top-GETAOUT-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))
;(= (return-Left-keys_top-GETAOUT-is-abort  state-left-NEU)
;   (return-Right-keys_top-GETAOUT-is-abort state-right-NEU))
)


(define-fun aborts-equal-GETKEYSIN          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-keys_bottom-GETKEYSIN)      ; also contains new index    
        (state-right-NEU Return-Right-keys_bottom-GETKEYSIN) ; also contains new index
        (h Int))
        Bool
(match (return-Left-keys_bottom-GETKEYSIN-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))

;(= (return-Left-keys_bottom-GETKEYSIN-is-abort  state-left-NEU)
;   (return-Right-keys_bottom-GETKEYSIN-is-abort state-right-NEU))
)

(define-fun aborts-left-right          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-gate-GBLG)      ; also contains new index    
        (state-right-NEU Return-Right-simgate-GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool


(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true) ;ex falso quod libet
 ((mk-return-value v)  true)
)))))

;(=> (return-Left-gate-GBLG-is-abort     state-left-NEU)
;    (return-Right-simgate-GBLG-is-abort state-right-NEU))
)

(define-fun aborts-right-left          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-gate-GBLG)      ; also contains new index    
        (state-right-NEU Return-Right-simgate-GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool

(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  true)
)))
 ((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            false) ;modus ponens
 ((mk-return-value v)  true)
)))))

;(=> (return-Right-simgate-GBLG-is-abort state-right-NEU)
;    (return-Left-gate-GBLG-is-abort     state-left-NEU ))
)


; no-abort

(define-fun no-abort          (
        (state-left  CompositionState-Left)
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-gate-GBLG)      ; also contains new index    
        (state-right-NEU Return-Right-simgate-GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool
(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))
;(and
;(= (return-Left-gate-GBLG-is-abort     state-left-NEU)
;   false)
;(= (return-Right-simgate-GBLG-is-abort     state-right-NEU)
;   false)
;)
)

(define-fun no-abort-SETBIT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
       ; (state-length-left  Int) ; old index = 1
       ; (state-length-right Int) ; old index = 1
        (state-left-NEU  Return-Left-keys_top-SETBIT)  ; also contains new index    
        (state-right-NEU Return-Right-keys_top-SETBIT) ; also contains new index
        (h Int)
        (zz Bool))
        Bool
(match (return-Left-keys_top-SETBIT-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))
;(and
;(= (return-Left-keys_top-SETBIT-is-abort     state-left-NEU)
;   false)
;(= (return-Right-keys_top-SETBIT-is-abort     state-right-NEU)
;   false)
;)
)

(define-fun no-abort-GETAOUT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU  Return-Left-keys_top-GETAOUT)  ; also contains new index    
        (state-right-NEU Return-Right-keys_top-GETAOUT) ; also contains new index
        (h Int))
        Bool

(and
(match (return-Left-keys_top-GETAOUT-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
))))))
;(= (return-Left-keys_top-GETAOUT-is-abort     state-left-NEU)
;   false)
;(= (return-Right-keys_top-GETAOUT-is-abort     state-right-NEU)
;   false)
)

(define-fun no-abort-GETKEYSIN          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU  Return-Left-keys_bottom-GETKEYSIN)  ; also contains new index    
        (state-right-NEU Return-Right-keys_bottom-GETKEYSIN) ; also contains new index
        (h Int))
        Bool
(and
(match (return-Left-keys_bottom-GETKEYSIN-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
))))))
;(and
;(= (return-Left-keys_bottom-GETKEYSIN-is-abort     state-left-NEU)
;   false)
;(= (return-Right-keys_bottom-GETKEYSIN-is-abort     state-right-NEU)
;   false)
;)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Same Output
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-fun same-output          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left-old Int)
        ;(state-length-right-old Int)
        (state-left-NEU Return-Left-gate-GBLG)
        (state-right-NEU Return-Right-simgate-GBLG)
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool
(and
(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort true)
((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value w)  (= v w))
))))))
;(=
;(return-Left-gate-GBLG-value return-left-gate-GBLG)
;(return-Right-simgate-GBLG-value return-right-simgate-GBLG)
;)
)

(define-fun same-output-SETBIT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left-old Int)
;        (state-length-right-old Int)
        (state-left-NEU Return-Left-keys_top-SETBIT)
        (state-right-NEU Return-Right-keys_top-SETBIT)
        (h Int)
        (zz Bool))
        Bool
(and
(match (return-Left-keys_top-SETBIT-return-value-or-abort state-left-NEU)
((mk-abort true)
((mk-return-value v)
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value w)  (= v w))
))))))
;(=
;(return-Left-keys_top-SETBIT-value return-left-keys_top-SETBIT)
;(return-Right-keys_top-SETBIT-value return-right-keys_top-SETBIT)
;)
)

(define-fun same-output-GETAOUT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
       ; (state-length-left-old Int)
       ; (state-length-right-old Int)
        (state-left-NEU Return-Left-keys_top-GETAOUT)
        (state-right-NEU Return-Right-keys_top-GETAOUT)
        (h Int))
        Bool
(and
(match (return-Left-keys_top-GETAOUT-return-value-or-abort state-left-NEU)
((mk-abort true)
((mk-return-value v)
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value w)  (= v w))
))))))
;(=
;(return-Left-keys_top-GETAOUT-value return-left-keys_top-GETAOUT)
;(return-Right-keys_top-GETAOUT-value return-right-keys_top-GETAOUT)
;)
)

(define-fun same-output-GETKEYSIN          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left-old Int)
;        (state-length-right-old Int)
        (state-left-NEU Return-Left-keys_bottom-GETKEYSIN)
        (state-right-NEU Return-Right-keys_bottom-GETKEYSIN)
        (h Int))
        Bool
(and
(match (return-Left-keys_bottom-GETKEYSIN-return-value-or-abort state-left-NEU)
((mk-abort true)
((mk-return-value v)
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value w)  (= v w))
))))))
;(=
;(return-Left-keys_bottom-GETKEYSIN-value return-left-keys_bottom-GETKEYSIN)
;(return-Right-keys_bottom-GETKEYSIN-value return-right-keys_bottom-GETKEYSIN)
;)
)(check-sat)
(push 1)(assert (not (=> (and (forall ((randmap-sample-id-left Int)
 (randmap-sample-ctr-left Int)
 (randmap-sample-id-right Int)
 (randmap-sample-ctr-right Int)
)
 (=> (randomness-mapping-SETBIT (get-rand-ctr-Left randmap-sample-id-left)
 (get-rand-ctr-Right randmap-sample-id-right)
 randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
 (rand-is-eq randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
)
)
 (invariant-SETBIT game-state-Left_inst-old game-state-Right_inst-old)
)
 (invariant-SETBIT game-state-Left_inst-new-SETBIT game-state-Right_inst-new-SETBIT)
)
)
)
(check-sat)
(pop 1)(push 1)(assert (not (=> (and (forall ((randmap-sample-id-left Int)
 (randmap-sample-ctr-left Int)
 (randmap-sample-id-right Int)
 (randmap-sample-ctr-right Int)
)
 (=> (randomness-mapping-SETBIT (get-rand-ctr-Left randmap-sample-id-left)
 (get-rand-ctr-Right randmap-sample-id-right)
 randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
 (rand-is-eq randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
)
)
 (invariant-SETBIT game-state-Left_inst-old game-state-Right_inst-old)
)
 (aborts-equal-SETBIT game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-SETBIT return-Right_inst-SETBIT arg-SETBIT-h arg-SETBIT-zz)
)
)
)
(check-sat)
(pop 1)(push 1)(assert (not (=> (and (forall ((randmap-sample-id-left Int)
 (randmap-sample-ctr-left Int)
 (randmap-sample-id-right Int)
 (randmap-sample-ctr-right Int)
)
 (=> (randomness-mapping-SETBIT (get-rand-ctr-Left randmap-sample-id-left)
 (get-rand-ctr-Right randmap-sample-id-right)
 randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
 (rand-is-eq randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
)
)
 (invariant-SETBIT game-state-Left_inst-old game-state-Right_inst-old)
 (no-abort-SETBIT game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-SETBIT return-Right_inst-SETBIT arg-SETBIT-h arg-SETBIT-zz)
)
 (same-output-SETBIT game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-SETBIT return-Right_inst-SETBIT arg-SETBIT-h arg-SETBIT-zz)
)
)
)
(check-sat)
(pop 1)(pop 1)(push 1)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   Randomness mapping
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define-fun randomness-mapping-GBLG (
        (ctr-left      Int)
        (ctr-right     Int) 
        (id-left       Int)
        (id-right      Int) 
        (new-left      Int)
        (new-right     Int)
                                    ) Bool
(or
(and
(= ctr-left  new-left )
(= ctr-right new-right)
(= id-left  5)
(= id-right 7)
)
(and
(= ctr-left  new-left )
(= ctr-right new-right)
(= id-left  6)
(= id-right 8)
)
(and
(= ctr-left  new-left )
(= ctr-right new-right)
(= id-left  9)
(= id-right 9)
)
(and
(= ctr-left  new-left )
(= ctr-right new-right)
(= id-left  11)
(= id-right 10)
)
(and
(= (+ 1 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  9)
(= id-right 11)
)
(and
(= (+ 1 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  11)
(= id-right 12)
)
(and
(= (+ 2 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  9)
(= id-right 13)
)
(and
(= (+ 2 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  11)
(= id-right 14)
)
(and
(= (+ 3 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  9)
(= id-right 15)
)
(and
(= (+ 3 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  11)
(= id-right 16)
)
)
;equality of values of the sample functions for the lower Key package
;(= randval-left-5    randval-right-7)
;(= randval-left-6    randval-right-8)

;equality of values of the sample functions for the encryptions
;(= randval-left-9    randval-right-9)
;(= randval-left-11   randval-right-10)
;(= randval-left-9+1  randval-right-11)
;(= randval-left-11+1 randval-right-12)
;(= randval-left-9+2  randval-right-11)
;(= randval-left-11+2 randval-right-12)
;(= randval-left-9+3  randval-right-13)
;(= randval-left-11+3 randval-right-14)
;)
)

(define-fun randomness-mapping-SETBIT (
        (ctr-left      Int)
        (ctr-right     Int) 
        (id-left       Int)
        (id-right      Int) 
        (new-left      Int)
        (new-right     Int)
) Bool
false
)

(define-fun randomness-mapping-GETAOUT (
        (ctr-left      Int)
        (ctr-right     Int) 
        (id-left       Int)
        (id-right      Int) 
        (new-left      Int)
        (new-right     Int)
) Bool
(or
(and
(= id-left  1)
(= id-right 1)
(= ctr-left  new-left )
(= ctr-right new-right)
)
(and
(= id-left  2)
(= id-right 2)
(= ctr-left  new-left )
(= ctr-right new-right)
))
;(and
;(= randval-left-GETA-1 randval-right-GETA-1)
;(= randval-left-GETA-2 randval-right-GETA-2)
;)
)

(define-fun randomness-mapping-GETKEYSIN (
        (ctr-left      Int)
        (ctr-right     Int) 
        (id-left       Int)
        (id-right      Int) 
        (new-left      Int)
        (new-right     Int)
) 
Bool
false
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   op is total (special-purpose glue)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(assert
(and
(not (= (select arg-GBLG-op (mk-tuple2 true  true ))(as mk-none (Maybe Bool))))
(not (= (select arg-GBLG-op (mk-tuple2 true  false))(as mk-none (Maybe Bool))))
(not (= (select arg-GBLG-op (mk-tuple2 false true ))(as mk-none (Maybe Bool))))
(not (= (select arg-GBLG-op (mk-tuple2 false false))(as mk-none (Maybe Bool))))
))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   Datatypes to extract key package state
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(declare-datatype
  State_keys
  (
    (mk-state-keys
      (state-keys-T (Array Int (Maybe (Array Bool (Maybe Bits_n)))))
      (state-keys-z (Array Int (Maybe Bool)))
      (state-keys-flag (Array Int (Maybe Bool))))))

(define-fun project-State_Left_keys_top ((in State_Left_keys_top)) State_keys
  (mk-state-keys (state-Left-keys_top-T    in)
                 (state-Left-keys_top-z    in)
                 (state-Left-keys_top-flag in)))

(define-fun project-State_Right_keys_top ((in State_Right_keys_top)) State_keys
  (mk-state-keys (state-Right-keys_top-T    in)
                 (state-Right-keys_top-z    in)
                 (state-Right-keys_top-flag in)))

(define-fun project-State_Left_keys_bottom ((in State_Left_keys_bottom)) State_keys
  (mk-state-keys (state-Left-keys_bottom-T    in)
                 (state-Left-keys_bottom-z    in)
                 (state-Left-keys_bottom-flag in)))

(define-fun project-State_Right_keys_bottom ((in State_Right_keys_bottom)) State_keys
  (mk-state-keys (state-Right-keys_bottom-T    in)
                 (state-Right-keys_bottom-z    in)
                 (state-Right-keys_bottom-flag in)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   Well-definedness of tables
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;If T h != none => T h b != none (for both b=0 and b=1)

(define-fun well-defined ((T (Array Int (Maybe (Array Bool (Maybe Bits_n)))))) Bool
  (forall ((h Int))
    (or
      (= (select T h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
      (forall ((b Bool))
        (not
          (= (select (maybe-get (select T h)) b) (as mk-none (Maybe Bits_n)))
)))))

; captures the possible states which a Key package can be in when
; the "top" queries are GETKEYS queries 
;
(define-fun well-defined-Key-bool ((key-state State_keys)) Bool
(let ((T    (state-keys-T    key-state))
      (flag (state-keys-flag key-state))
      (z    (state-keys-z    key-state)))

; flag is true <=> key has been chosen 
(and

;If T h != none => T h b != none (for both b=0 and b=1)
(well-defined T)

(forall ((hhh Int))
(or
    (= (select flag hhh) (as mk-none (Maybe Bool)))
    (= (select flag hhh) (   mk-some        true )))
)

;If flag h != true => T h  = none
;If flag h  = true => T h != none (for both b=0 and b=1)

(forall ((hhh Int)) 
(and 
(=>
    (not (= (select flag hhh) (mk-some true)))
    (= (select T hhh) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
)
(=>
    (= (select flag hhh) (mk-some true))
    (and
       (not (= (select T hhh)                            (as mk-none (Maybe (Array Bool (Maybe Bits_n))))))
       (not (= (select (maybe-get (select T hhh)) true ) (as mk-none (Maybe Bits_n))))
       (not (= (select (maybe-get (select T hhh)) false) (as mk-none (Maybe Bits_n))))
    )
))))))

; captures the possible states which a Key package can be in when
; the "top" queries are GETA and SETBIT queries 
;
(define-fun well-defined-Key-active ((key-state State_keys)) Bool
(let ((T    (state-keys-T    key-state))
      (flag (state-keys-flag key-state))
      (z    (state-keys-z    key-state)))

(and

;If T h != none => T h b != none (for both b=0 and b=1)
(well-defined T)

(forall ((hhh Int))
(or
  (= (select flag hhh) (as mk-none (Maybe Bool)))
  (= (select flag hhh) (   mk-some        true ))))

; flag has been set  => bit has been set
(forall ((hhh Int)) (=> (=  (mk-some true ) (select flag hhh))  
                    (or (=  (mk-some true ) (select z    hhh))
                        (=  (mk-some false) (select z    hhh))
                    )))

; key has been set => flag has been set
(forall ((hhh Int)) (=>
                    (not
                    (= (select T hhh) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
                    )
                    (= (select flag hhh) (mk-some true)))
                    ))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Invariant
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; This is supposed to be an invariant
(define-fun invariant-GBLG          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left  Int) ;old index
;        (state-length-right Int) ;old index
;        (state-left-new  Return-Left-gate-GBLG)
;        (state-right-new Return-Right-simgate-GBLG)
;        (h Int)
;        (l Int)
;        (r Int)
;        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
;        (j Int)
)
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right)))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right)))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))



(define-fun invariant-SETBIT      (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left  Int) ;old index
;        (state-length-right Int) ;old index
;        (state-left-new  Return_Left_keys_top_SETBIT)
;        (state-right-new Return_Right_keys_top_SETBIT)
;        (h Int)
;        (zz Bool)
)
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left  )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right )))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left  )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right )))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))



(define-fun invariant-GETAOUT      (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left  Int) ;old index
;        (state-length-right Int) ;old index
;        (state-left-new  Return_Left_keys_top_GETAOUT)
;        (state-right-new Return_Right_keys_top_GETAOUT)
;        (h Int)
        )
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right)))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right)))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))



(define-fun invariant-GETKEYSIN      (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left  Int) ;old index
;        (state-length-right Int) ;old index
;        (state-left-new  Return_Left_keys_bottom_GETKEYSIN)
;        (state-right-new Return_Right_keys_bottom_GETKEYSIN)
;        (h Int)
)
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left  )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right )))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left  )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right )))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    LEFT aborts
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-fun left-all-aborts          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left Int)  ; old index
;        (state-length-right Int) ; old index
        (state-left-NEU  Return-Left-gate-GBLG)      
        (state-right-NEU Return-Right-simgate-GBLG) 
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool


    (let (
      (state-left-1  (return-Left-gate-GBLG-game-state state-left-NEU)
      )
         )

  (let

; state of the key packages
(
(top-key-package-left-1     (project-State_Left_keys_top     (composition-pkgstate-Left-keys_top     state-left-1)))
(bottom-key-package-left-1  (project-State_Left_keys_bottom  (composition-pkgstate-Left-keys_bottom  state-left-1)))
)

(let

; table of the top key package
;        T: Table(Integer,Table(Bool,Bits(n))),
;        z: Table(Integer,Bool),
(
(T-top-left-1        (state-keys-T       top-key-package-left-1))
(z-top-left-1        (state-keys-z       top-key-package-left-1))
(flag-top-left-1     (state-keys-flag    top-key-package-left-1))
(flag-bot-left-1     (state-keys-flag bottom-key-package-left-1))
)

;;; if l is undefined, then abort
(=>
(or
(= (select    z-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l)    (mk-some        false))
(= (select    z-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r)    (mk-some        false))
(= (select flag-bot-left-1 j)    (mk-some        true ))
)
;(= (return-Left-gate-GBLG-is-abort state-left-NEU) true)
;
; in der neuen match syntax below:
;
(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort true)
 ((mk-return-value v) false)))
)))))

; re-built this:

(define-fun left-inverse-all-aborts          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left Int)  ; old index
;        (state-length-right Int) ; old index
        (state-left-NEU  Return-Left-gate-GBLG)      
        (state-right-NEU Return-Right-simgate-GBLG) 
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool


    (let (
      (state-left-1  (return-Left-gate-GBLG-game-state state-left-NEU)
      )
         )

  (let

; state of the key packages
(
(top-key-package-left-1     (project-State_Left_keys_top     (composition-pkgstate-Left-keys_top     state-left-1)))
(bottom-key-package-left-1  (project-State_Left_keys_bottom  (composition-pkgstate-Left-keys_bottom  state-left-1)))
)

(let

; table of the top key package
;        T: Table(Integer,Table(Bool,Bits(n))),
;        z: Table(Integer,Bool),
(
(T-top-left-1        (state-keys-T       top-key-package-left-1))
(z-top-left-1        (state-keys-z       top-key-package-left-1))
(flag-top-left-1     (state-keys-flag    top-key-package-left-1))
(flag-bot-left-1     (state-keys-flag bottom-key-package-left-1))
)

;;; if l is undefined, then abort
(=>
;(= (return-Left-gate-GBLG-is-abort state-left-NEU) true)
;
; in der neuen match syntax below:
;
(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort true)
 ((mk-return-value v) false)))
(or
(= (select    z-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l)    (mk-some        false))
(= (select    z-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r)    (mk-some        false))
(= (select flag-bot-left-1 j)    (mk-some        true ))
)
)))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    RIGHT aborts
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; when ... happens, then abort

(define-fun right-all-aborts          (
        (state-left     CompositionState-Left )
        (state-right    CompositionState-Right)
;        (state-length-left Int)  ; old index
;        (state-length-right Int) ; old index
        (state-left-NEU  Return-Left-gate-GBLG)      ; old index
        (state-right-NEU Return-Right-simgate-GBLG) ; old index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool

  (let

; state of the key packages
(
(bottom-key-package-right-1    (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom  state-right)))
(top-key-package-right-1       (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top     state-right)))
)


(let

; tables of the top and bottom key package
(
(   T-top-right-1  (state-keys-T       top-key-package-right-1))
(   z-top-right-1  (state-keys-z       top-key-package-right-1))
(flag-top-right-1  (state-keys-flag    top-key-package-right-1))
(flag-bot-right-1  (state-keys-flag bottom-key-package-right-1))
(   z-bot-right-1  (state-keys-z    bottom-key-package-right-1))
)

;;; if j is true, then abort, re-written as
;;; if no abort, then j is false
;(=>
;(= (return-Right-simgate-GBLG-is-abort state-right-NEU) true)
;(let ((outcome (get-outcome returnvalue)))
;  (match outcome
;    (( mk-abort  
;         (and (cond1 state)
;              (cond2 state)))
;     ((mk-return-value v) 
;         (and (cond1 state v) 
;              (cond2 state v))))))
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(((mk-return-value v)
(not
(or
(= (select    z-top-right-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 l)    (mk-some        false))
(= (select    z-top-right-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 r)    (mk-some        false))
(= (select flag-bot-right-1 j)    (mk-some        true ))
(= (select    z-bot-right-1 j)    (mk-some        true ))
(= (select    z-bot-right-1 j)    (mk-some        false))
))
)
(mk-abort true)
)))))



(define-fun right-all-aborts-inverse          (
        (state-left        CompositionState-Left )
        (state-right       CompositionState-Right)
       ; (state-length-left  Int) ; old index
       ; (state-length-right Int) ; old index
        (state-left-NEU     Return-Left-gate-GBLG)     ; contains own index
        (state-right-NEU    Return-Right-simgate-GBLG) ; contains own index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool

  (let

; state of the key packages
(
(bottom-key-package-right-1    (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom  state-right)))
(   top-key-package-right-1    (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top     state-right)))
)


(let

; table of the bottom key package
(
(   T-top-right-1     (state-keys-T       top-key-package-right-1))
(   z-top-right-1     (state-keys-z       top-key-package-right-1))
(flag-top-right-1     (state-keys-flag    top-key-package-right-1))
(flag-bottom-right-1  (state-keys-flag bottom-key-package-right-1))
(   z-bottom-right-1  (state-keys-z    bottom-key-package-right-1))
)

;;; abort => input on l or z not defined or output was already defined.
;(=>
;(= (return-Right-simgate-GBLG-is-abort state-right-NEU) true)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
((mk-abort
(or
(= (select    z-top-right-1    l)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    l)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    l)       (mk-some        false))
(= (select    z-top-right-1    r)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    r)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    r)       (mk-some        false))
(= (select flag-bottom-right-1 j)       (mk-some        true ))
(= (select    z-bottom-right-1 j)       (mk-some        true ))
(= (select    z-bottom-right-1 j)       (mk-some        false))
))
((mk-return-value v) true)
)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    LEFT aborts = RIGHT aborts
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-fun aborts-equal          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
       ; (state-length-left  Int) ; old index = 1
       ; (state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-gate-GBLG)      ; also contains new index    
        (state-right-NEU Return-Right-simgate-GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool
;(= (return-Left-gate-GBLG-is-abort     state-left-NEU)
;   (return-Right-simgate-GBLG-is-abort state-right-NEU))

(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
))))))

(define-fun aborts-equal-SETBIT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-keys_top-SETBIT)      ; also contains new index    
        (state-right-NEU Return-Right-keys_top-SETBIT) ; also contains new index
        (h Int)
        (zz Bool))
        Bool


(match (return-Left-keys_top-SETBIT-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))
)

(define-fun aborts-equal-GETAOUT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-keys_top-GETAOUT)      ; also contains new index    
        (state-right-NEU Return-Right-keys_top-GETAOUT) ; also contains new index
        (h Int))
        Bool


(match (return-Left-keys_top-GETAOUT-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))
;(= (return-Left-keys_top-GETAOUT-is-abort  state-left-NEU)
;   (return-Right-keys_top-GETAOUT-is-abort state-right-NEU))
)


(define-fun aborts-equal-GETKEYSIN          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-keys_bottom-GETKEYSIN)      ; also contains new index    
        (state-right-NEU Return-Right-keys_bottom-GETKEYSIN) ; also contains new index
        (h Int))
        Bool
(match (return-Left-keys_bottom-GETKEYSIN-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))

;(= (return-Left-keys_bottom-GETKEYSIN-is-abort  state-left-NEU)
;   (return-Right-keys_bottom-GETKEYSIN-is-abort state-right-NEU))
)

(define-fun aborts-left-right          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-gate-GBLG)      ; also contains new index    
        (state-right-NEU Return-Right-simgate-GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool


(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true) ;ex falso quod libet
 ((mk-return-value v)  true)
)))))

;(=> (return-Left-gate-GBLG-is-abort     state-left-NEU)
;    (return-Right-simgate-GBLG-is-abort state-right-NEU))
)

(define-fun aborts-right-left          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-gate-GBLG)      ; also contains new index    
        (state-right-NEU Return-Right-simgate-GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool

(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  true)
)))
 ((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            false) ;modus ponens
 ((mk-return-value v)  true)
)))))

;(=> (return-Right-simgate-GBLG-is-abort state-right-NEU)
;    (return-Left-gate-GBLG-is-abort     state-left-NEU ))
)


; no-abort

(define-fun no-abort          (
        (state-left  CompositionState-Left)
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-gate-GBLG)      ; also contains new index    
        (state-right-NEU Return-Right-simgate-GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool
(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))
;(and
;(= (return-Left-gate-GBLG-is-abort     state-left-NEU)
;   false)
;(= (return-Right-simgate-GBLG-is-abort     state-right-NEU)
;   false)
;)
)

(define-fun no-abort-SETBIT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
       ; (state-length-left  Int) ; old index = 1
       ; (state-length-right Int) ; old index = 1
        (state-left-NEU  Return-Left-keys_top-SETBIT)  ; also contains new index    
        (state-right-NEU Return-Right-keys_top-SETBIT) ; also contains new index
        (h Int)
        (zz Bool))
        Bool
(match (return-Left-keys_top-SETBIT-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))
;(and
;(= (return-Left-keys_top-SETBIT-is-abort     state-left-NEU)
;   false)
;(= (return-Right-keys_top-SETBIT-is-abort     state-right-NEU)
;   false)
;)
)

(define-fun no-abort-GETAOUT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU  Return-Left-keys_top-GETAOUT)  ; also contains new index    
        (state-right-NEU Return-Right-keys_top-GETAOUT) ; also contains new index
        (h Int))
        Bool

(and
(match (return-Left-keys_top-GETAOUT-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
))))))
;(= (return-Left-keys_top-GETAOUT-is-abort     state-left-NEU)
;   false)
;(= (return-Right-keys_top-GETAOUT-is-abort     state-right-NEU)
;   false)
)

(define-fun no-abort-GETKEYSIN          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU  Return-Left-keys_bottom-GETKEYSIN)  ; also contains new index    
        (state-right-NEU Return-Right-keys_bottom-GETKEYSIN) ; also contains new index
        (h Int))
        Bool
(and
(match (return-Left-keys_bottom-GETKEYSIN-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
))))))
;(and
;(= (return-Left-keys_bottom-GETKEYSIN-is-abort     state-left-NEU)
;   false)
;(= (return-Right-keys_bottom-GETKEYSIN-is-abort     state-right-NEU)
;   false)
;)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Same Output
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-fun same-output          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left-old Int)
        ;(state-length-right-old Int)
        (state-left-NEU Return-Left-gate-GBLG)
        (state-right-NEU Return-Right-simgate-GBLG)
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool
(and
(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort true)
((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value w)  (= v w))
))))))
;(=
;(return-Left-gate-GBLG-value return-left-gate-GBLG)
;(return-Right-simgate-GBLG-value return-right-simgate-GBLG)
;)
)

(define-fun same-output-SETBIT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left-old Int)
;        (state-length-right-old Int)
        (state-left-NEU Return-Left-keys_top-SETBIT)
        (state-right-NEU Return-Right-keys_top-SETBIT)
        (h Int)
        (zz Bool))
        Bool
(and
(match (return-Left-keys_top-SETBIT-return-value-or-abort state-left-NEU)
((mk-abort true)
((mk-return-value v)
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value w)  (= v w))
))))))
;(=
;(return-Left-keys_top-SETBIT-value return-left-keys_top-SETBIT)
;(return-Right-keys_top-SETBIT-value return-right-keys_top-SETBIT)
;)
)

(define-fun same-output-GETAOUT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
       ; (state-length-left-old Int)
       ; (state-length-right-old Int)
        (state-left-NEU Return-Left-keys_top-GETAOUT)
        (state-right-NEU Return-Right-keys_top-GETAOUT)
        (h Int))
        Bool
(and
(match (return-Left-keys_top-GETAOUT-return-value-or-abort state-left-NEU)
((mk-abort true)
((mk-return-value v)
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value w)  (= v w))
))))))
;(=
;(return-Left-keys_top-GETAOUT-value return-left-keys_top-GETAOUT)
;(return-Right-keys_top-GETAOUT-value return-right-keys_top-GETAOUT)
;)
)

(define-fun same-output-GETKEYSIN          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left-old Int)
;        (state-length-right-old Int)
        (state-left-NEU Return-Left-keys_bottom-GETKEYSIN)
        (state-right-NEU Return-Right-keys_bottom-GETKEYSIN)
        (h Int))
        Bool
(and
(match (return-Left-keys_bottom-GETKEYSIN-return-value-or-abort state-left-NEU)
((mk-abort true)
((mk-return-value v)
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value w)  (= v w))
))))))
;(=
;(return-Left-keys_bottom-GETKEYSIN-value return-left-keys_bottom-GETKEYSIN)
;(return-Right-keys_bottom-GETKEYSIN-value return-right-keys_bottom-GETKEYSIN)
;)
)(check-sat)
(push 1)(assert (not (=> (and (forall ((randmap-sample-id-left Int)
 (randmap-sample-ctr-left Int)
 (randmap-sample-id-right Int)
 (randmap-sample-ctr-right Int)
)
 (=> (randomness-mapping-GBLG (get-rand-ctr-Left randmap-sample-id-left)
 (get-rand-ctr-Right randmap-sample-id-right)
 randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
 (rand-is-eq randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
)
)
 (invariant-GBLG game-state-Left_inst-old game-state-Right_inst-old)
)
 (right-all-aborts game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
)
)
)
(check-sat)
(pop 1)(push 1)(assert (not (=> (and (forall ((randmap-sample-id-left Int)
 (randmap-sample-ctr-left Int)
 (randmap-sample-id-right Int)
 (randmap-sample-ctr-right Int)
)
 (=> (randomness-mapping-GBLG (get-rand-ctr-Left randmap-sample-id-left)
 (get-rand-ctr-Right randmap-sample-id-right)
 randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
 (rand-is-eq randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
)
)
 (invariant-GBLG game-state-Left_inst-old game-state-Right_inst-old)
)
 (right-all-aborts-inverse game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
)
)
)
(check-sat)
(pop 1)(push 1)(assert (not (=> (and (forall ((randmap-sample-id-left Int)
 (randmap-sample-ctr-left Int)
 (randmap-sample-id-right Int)
 (randmap-sample-ctr-right Int)
)
 (=> (randomness-mapping-GBLG (get-rand-ctr-Left randmap-sample-id-left)
 (get-rand-ctr-Right randmap-sample-id-right)
 randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
 (rand-is-eq randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
)
)
 (invariant-GBLG game-state-Left_inst-old game-state-Right_inst-old)
)
 (left-all-aborts game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
)
)
)
(check-sat)
(pop 1)(push 1)(assert (not (=> (and (forall ((randmap-sample-id-left Int)
 (randmap-sample-ctr-left Int)
 (randmap-sample-id-right Int)
 (randmap-sample-ctr-right Int)
)
 (=> (randomness-mapping-GBLG (get-rand-ctr-Left randmap-sample-id-left)
 (get-rand-ctr-Right randmap-sample-id-right)
 randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
 (rand-is-eq randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
)
)
 (invariant-GBLG game-state-Left_inst-old game-state-Right_inst-old)
)
 (left-inverse-all-aborts game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
)
)
)
(check-sat)
(pop 1)(push 1)(assert (not (=> (and (forall ((randmap-sample-id-left Int)
 (randmap-sample-ctr-left Int)
 (randmap-sample-id-right Int)
 (randmap-sample-ctr-right Int)
)
 (=> (randomness-mapping-GBLG (get-rand-ctr-Left randmap-sample-id-left)
 (get-rand-ctr-Right randmap-sample-id-right)
 randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
 (rand-is-eq randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
)
)
 (invariant-GBLG game-state-Left_inst-old game-state-Right_inst-old)
 (left-all-aborts game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
 (left-inverse-all-aborts game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
 (right-all-aborts game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
 (right-all-aborts-inverse game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
)
 (aborts-equal game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
)
)
)
(check-sat)
(pop 1)(push 1)(assert (not (=> (and (forall ((randmap-sample-id-left Int)
 (randmap-sample-ctr-left Int)
 (randmap-sample-id-right Int)
 (randmap-sample-ctr-right Int)
)
 (=> (randomness-mapping-GBLG (get-rand-ctr-Left randmap-sample-id-left)
 (get-rand-ctr-Right randmap-sample-id-right)
 randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
 (rand-is-eq randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
)
)
 (invariant-GBLG game-state-Left_inst-old game-state-Right_inst-old)
 (no-abort game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
 (left-all-aborts game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
 (left-inverse-all-aborts game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
 (right-all-aborts game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
 (right-all-aborts-inverse game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
)
 (same-output game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
)
)
)
(check-sat)
(pop 1)(push 1)(assert (not (=> (and (forall ((randmap-sample-id-left Int)
 (randmap-sample-ctr-left Int)
 (randmap-sample-id-right Int)
 (randmap-sample-ctr-right Int)
)
 (=> (randomness-mapping-GBLG (get-rand-ctr-Left randmap-sample-id-left)
 (get-rand-ctr-Right randmap-sample-id-right)
 randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
 (rand-is-eq randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
)
)
 (invariant-GBLG game-state-Left_inst-old game-state-Right_inst-old)
 (no-abort game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
 (left-all-aborts game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
 (left-inverse-all-aborts game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
 (right-all-aborts game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
 (right-all-aborts-inverse game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GBLG return-Right_inst-GBLG arg-GBLG-h arg-GBLG-l arg-GBLG-r arg-GBLG-op arg-GBLG-j)
)
 (invariant-GBLG game-state-Left_inst-new-GBLG game-state-Right_inst-new-GBLG)
)
)
)
(check-sat)
(pop 1)(pop 1)(push 1)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   Randomness mapping
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define-fun randomness-mapping-GBLG (
        (ctr-left      Int)
        (ctr-right     Int) 
        (id-left       Int)
        (id-right      Int) 
        (new-left      Int)
        (new-right     Int)
                                    ) Bool
(or
(and
(= ctr-left  new-left )
(= ctr-right new-right)
(= id-left  5)
(= id-right 7)
)
(and
(= ctr-left  new-left )
(= ctr-right new-right)
(= id-left  6)
(= id-right 8)
)
(and
(= ctr-left  new-left )
(= ctr-right new-right)
(= id-left  9)
(= id-right 9)
)
(and
(= ctr-left  new-left )
(= ctr-right new-right)
(= id-left  11)
(= id-right 10)
)
(and
(= (+ 1 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  9)
(= id-right 11)
)
(and
(= (+ 1 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  11)
(= id-right 12)
)
(and
(= (+ 2 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  9)
(= id-right 13)
)
(and
(= (+ 2 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  11)
(= id-right 14)
)
(and
(= (+ 3 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  9)
(= id-right 15)
)
(and
(= (+ 3 ctr-left)  new-left )
(= ctr-right new-right)
(= id-left  11)
(= id-right 16)
)
)
;equality of values of the sample functions for the lower Key package
;(= randval-left-5    randval-right-7)
;(= randval-left-6    randval-right-8)

;equality of values of the sample functions for the encryptions
;(= randval-left-9    randval-right-9)
;(= randval-left-11   randval-right-10)
;(= randval-left-9+1  randval-right-11)
;(= randval-left-11+1 randval-right-12)
;(= randval-left-9+2  randval-right-11)
;(= randval-left-11+2 randval-right-12)
;(= randval-left-9+3  randval-right-13)
;(= randval-left-11+3 randval-right-14)
;)
)

(define-fun randomness-mapping-SETBIT (
        (ctr-left      Int)
        (ctr-right     Int) 
        (id-left       Int)
        (id-right      Int) 
        (new-left      Int)
        (new-right     Int)
) Bool
false
)

(define-fun randomness-mapping-GETAOUT (
        (ctr-left      Int)
        (ctr-right     Int) 
        (id-left       Int)
        (id-right      Int) 
        (new-left      Int)
        (new-right     Int)
) Bool
(or
(and
(= id-left  1)
(= id-right 1)
(= ctr-left  new-left )
(= ctr-right new-right)
)
(and
(= id-left  2)
(= id-right 2)
(= ctr-left  new-left )
(= ctr-right new-right)
))
;(and
;(= randval-left-GETA-1 randval-right-GETA-1)
;(= randval-left-GETA-2 randval-right-GETA-2)
;)
)

(define-fun randomness-mapping-GETKEYSIN (
        (ctr-left      Int)
        (ctr-right     Int) 
        (id-left       Int)
        (id-right      Int) 
        (new-left      Int)
        (new-right     Int)
) 
Bool
false
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   op is total (special-purpose glue)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(assert
(and
(not (= (select arg-GBLG-op (mk-tuple2 true  true ))(as mk-none (Maybe Bool))))
(not (= (select arg-GBLG-op (mk-tuple2 true  false))(as mk-none (Maybe Bool))))
(not (= (select arg-GBLG-op (mk-tuple2 false true ))(as mk-none (Maybe Bool))))
(not (= (select arg-GBLG-op (mk-tuple2 false false))(as mk-none (Maybe Bool))))
))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   Datatypes to extract key package state
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(declare-datatype
  State_keys
  (
    (mk-state-keys
      (state-keys-T (Array Int (Maybe (Array Bool (Maybe Bits_n)))))
      (state-keys-z (Array Int (Maybe Bool)))
      (state-keys-flag (Array Int (Maybe Bool))))))

(define-fun project-State_Left_keys_top ((in State_Left_keys_top)) State_keys
  (mk-state-keys (state-Left-keys_top-T    in)
                 (state-Left-keys_top-z    in)
                 (state-Left-keys_top-flag in)))

(define-fun project-State_Right_keys_top ((in State_Right_keys_top)) State_keys
  (mk-state-keys (state-Right-keys_top-T    in)
                 (state-Right-keys_top-z    in)
                 (state-Right-keys_top-flag in)))

(define-fun project-State_Left_keys_bottom ((in State_Left_keys_bottom)) State_keys
  (mk-state-keys (state-Left-keys_bottom-T    in)
                 (state-Left-keys_bottom-z    in)
                 (state-Left-keys_bottom-flag in)))

(define-fun project-State_Right_keys_bottom ((in State_Right_keys_bottom)) State_keys
  (mk-state-keys (state-Right-keys_bottom-T    in)
                 (state-Right-keys_bottom-z    in)
                 (state-Right-keys_bottom-flag in)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   Well-definedness of tables
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;If T h != none => T h b != none (for both b=0 and b=1)

(define-fun well-defined ((T (Array Int (Maybe (Array Bool (Maybe Bits_n)))))) Bool
  (forall ((h Int))
    (or
      (= (select T h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
      (forall ((b Bool))
        (not
          (= (select (maybe-get (select T h)) b) (as mk-none (Maybe Bits_n)))
)))))

; captures the possible states which a Key package can be in when
; the "top" queries are GETKEYS queries 
;
(define-fun well-defined-Key-bool ((key-state State_keys)) Bool
(let ((T    (state-keys-T    key-state))
      (flag (state-keys-flag key-state))
      (z    (state-keys-z    key-state)))

; flag is true <=> key has been chosen 
(and

;If T h != none => T h b != none (for both b=0 and b=1)
(well-defined T)

(forall ((hhh Int))
(or
    (= (select flag hhh) (as mk-none (Maybe Bool)))
    (= (select flag hhh) (   mk-some        true )))
)

;If flag h != true => T h  = none
;If flag h  = true => T h != none (for both b=0 and b=1)

(forall ((hhh Int)) 
(and 
(=>
    (not (= (select flag hhh) (mk-some true)))
    (= (select T hhh) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
)
(=>
    (= (select flag hhh) (mk-some true))
    (and
       (not (= (select T hhh)                            (as mk-none (Maybe (Array Bool (Maybe Bits_n))))))
       (not (= (select (maybe-get (select T hhh)) true ) (as mk-none (Maybe Bits_n))))
       (not (= (select (maybe-get (select T hhh)) false) (as mk-none (Maybe Bits_n))))
    )
))))))

; captures the possible states which a Key package can be in when
; the "top" queries are GETA and SETBIT queries 
;
(define-fun well-defined-Key-active ((key-state State_keys)) Bool
(let ((T    (state-keys-T    key-state))
      (flag (state-keys-flag key-state))
      (z    (state-keys-z    key-state)))

(and

;If T h != none => T h b != none (for both b=0 and b=1)
(well-defined T)

(forall ((hhh Int))
(or
  (= (select flag hhh) (as mk-none (Maybe Bool)))
  (= (select flag hhh) (   mk-some        true ))))

; flag has been set  => bit has been set
(forall ((hhh Int)) (=> (=  (mk-some true ) (select flag hhh))  
                    (or (=  (mk-some true ) (select z    hhh))
                        (=  (mk-some false) (select z    hhh))
                    )))

; key has been set => flag has been set
(forall ((hhh Int)) (=>
                    (not
                    (= (select T hhh) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
                    )
                    (= (select flag hhh) (mk-some true)))
                    ))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Invariant
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; This is supposed to be an invariant
(define-fun invariant-GBLG          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left  Int) ;old index
;        (state-length-right Int) ;old index
;        (state-left-new  Return-Left-gate-GBLG)
;        (state-right-new Return-Right-simgate-GBLG)
;        (h Int)
;        (l Int)
;        (r Int)
;        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
;        (j Int)
)
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right)))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right)))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))



(define-fun invariant-SETBIT      (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left  Int) ;old index
;        (state-length-right Int) ;old index
;        (state-left-new  Return_Left_keys_top_SETBIT)
;        (state-right-new Return_Right_keys_top_SETBIT)
;        (h Int)
;        (zz Bool)
)
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left  )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right )))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left  )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right )))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))



(define-fun invariant-GETAOUT      (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left  Int) ;old index
;        (state-length-right Int) ;old index
;        (state-left-new  Return_Left_keys_top_GETAOUT)
;        (state-right-new Return_Right_keys_top_GETAOUT)
;        (h Int)
        )
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right)))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right)))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))



(define-fun invariant-GETKEYSIN      (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left  Int) ;old index
;        (state-length-right Int) ;old index
;        (state-left-new  Return_Left_keys_bottom_GETKEYSIN)
;        (state-right-new Return_Right_keys_bottom_GETKEYSIN)
;        (h Int)
)
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left  )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right )))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left  )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right )))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    LEFT aborts
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-fun left-all-aborts          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left Int)  ; old index
;        (state-length-right Int) ; old index
        (state-left-NEU  Return-Left-gate-GBLG)      
        (state-right-NEU Return-Right-simgate-GBLG) 
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool


    (let (
      (state-left-1  (return-Left-gate-GBLG-game-state state-left-NEU)
      )
         )

  (let

; state of the key packages
(
(top-key-package-left-1     (project-State_Left_keys_top     (composition-pkgstate-Left-keys_top     state-left-1)))
(bottom-key-package-left-1  (project-State_Left_keys_bottom  (composition-pkgstate-Left-keys_bottom  state-left-1)))
)

(let

; table of the top key package
;        T: Table(Integer,Table(Bool,Bits(n))),
;        z: Table(Integer,Bool),
(
(T-top-left-1        (state-keys-T       top-key-package-left-1))
(z-top-left-1        (state-keys-z       top-key-package-left-1))
(flag-top-left-1     (state-keys-flag    top-key-package-left-1))
(flag-bot-left-1     (state-keys-flag bottom-key-package-left-1))
)

;;; if l is undefined, then abort
(=>
(or
(= (select    z-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l)    (mk-some        false))
(= (select    z-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r)    (mk-some        false))
(= (select flag-bot-left-1 j)    (mk-some        true ))
)
;(= (return-Left-gate-GBLG-is-abort state-left-NEU) true)
;
; in der neuen match syntax below:
;
(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort true)
 ((mk-return-value v) false)))
)))))

; re-built this:

(define-fun left-inverse-all-aborts          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left Int)  ; old index
;        (state-length-right Int) ; old index
        (state-left-NEU  Return-Left-gate-GBLG)      
        (state-right-NEU Return-Right-simgate-GBLG) 
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool


    (let (
      (state-left-1  (return-Left-gate-GBLG-game-state state-left-NEU)
      )
         )

  (let

; state of the key packages
(
(top-key-package-left-1     (project-State_Left_keys_top     (composition-pkgstate-Left-keys_top     state-left-1)))
(bottom-key-package-left-1  (project-State_Left_keys_bottom  (composition-pkgstate-Left-keys_bottom  state-left-1)))
)

(let

; table of the top key package
;        T: Table(Integer,Table(Bool,Bits(n))),
;        z: Table(Integer,Bool),
(
(T-top-left-1        (state-keys-T       top-key-package-left-1))
(z-top-left-1        (state-keys-z       top-key-package-left-1))
(flag-top-left-1     (state-keys-flag    top-key-package-left-1))
(flag-bot-left-1     (state-keys-flag bottom-key-package-left-1))
)

;;; if l is undefined, then abort
(=>
;(= (return-Left-gate-GBLG-is-abort state-left-NEU) true)
;
; in der neuen match syntax below:
;
(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort true)
 ((mk-return-value v) false)))
(or
(= (select    z-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l)    (mk-some        false))
(= (select    z-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r)    (mk-some        false))
(= (select flag-bot-left-1 j)    (mk-some        true ))
)
)))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    RIGHT aborts
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; when ... happens, then abort

(define-fun right-all-aborts          (
        (state-left     CompositionState-Left )
        (state-right    CompositionState-Right)
;        (state-length-left Int)  ; old index
;        (state-length-right Int) ; old index
        (state-left-NEU  Return-Left-gate-GBLG)      ; old index
        (state-right-NEU Return-Right-simgate-GBLG) ; old index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool

  (let

; state of the key packages
(
(bottom-key-package-right-1    (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom  state-right)))
(top-key-package-right-1       (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top     state-right)))
)


(let

; tables of the top and bottom key package
(
(   T-top-right-1  (state-keys-T       top-key-package-right-1))
(   z-top-right-1  (state-keys-z       top-key-package-right-1))
(flag-top-right-1  (state-keys-flag    top-key-package-right-1))
(flag-bot-right-1  (state-keys-flag bottom-key-package-right-1))
(   z-bot-right-1  (state-keys-z    bottom-key-package-right-1))
)

;;; if j is true, then abort, re-written as
;;; if no abort, then j is false
;(=>
;(= (return-Right-simgate-GBLG-is-abort state-right-NEU) true)
;(let ((outcome (get-outcome returnvalue)))
;  (match outcome
;    (( mk-abort  
;         (and (cond1 state)
;              (cond2 state)))
;     ((mk-return-value v) 
;         (and (cond1 state v) 
;              (cond2 state v))))))
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(((mk-return-value v)
(not
(or
(= (select    z-top-right-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 l)    (mk-some        false))
(= (select    z-top-right-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 r)    (mk-some        false))
(= (select flag-bot-right-1 j)    (mk-some        true ))
(= (select    z-bot-right-1 j)    (mk-some        true ))
(= (select    z-bot-right-1 j)    (mk-some        false))
))
)
(mk-abort true)
)))))



(define-fun right-all-aborts-inverse          (
        (state-left        CompositionState-Left )
        (state-right       CompositionState-Right)
       ; (state-length-left  Int) ; old index
       ; (state-length-right Int) ; old index
        (state-left-NEU     Return-Left-gate-GBLG)     ; contains own index
        (state-right-NEU    Return-Right-simgate-GBLG) ; contains own index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool

  (let

; state of the key packages
(
(bottom-key-package-right-1    (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom  state-right)))
(   top-key-package-right-1    (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top     state-right)))
)


(let

; table of the bottom key package
(
(   T-top-right-1     (state-keys-T       top-key-package-right-1))
(   z-top-right-1     (state-keys-z       top-key-package-right-1))
(flag-top-right-1     (state-keys-flag    top-key-package-right-1))
(flag-bottom-right-1  (state-keys-flag bottom-key-package-right-1))
(   z-bottom-right-1  (state-keys-z    bottom-key-package-right-1))
)

;;; abort => input on l or z not defined or output was already defined.
;(=>
;(= (return-Right-simgate-GBLG-is-abort state-right-NEU) true)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
((mk-abort
(or
(= (select    z-top-right-1    l)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    l)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    l)       (mk-some        false))
(= (select    z-top-right-1    r)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    r)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    r)       (mk-some        false))
(= (select flag-bottom-right-1 j)       (mk-some        true ))
(= (select    z-bottom-right-1 j)       (mk-some        true ))
(= (select    z-bottom-right-1 j)       (mk-some        false))
))
((mk-return-value v) true)
)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    LEFT aborts = RIGHT aborts
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-fun aborts-equal          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
       ; (state-length-left  Int) ; old index = 1
       ; (state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-gate-GBLG)      ; also contains new index    
        (state-right-NEU Return-Right-simgate-GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool
;(= (return-Left-gate-GBLG-is-abort     state-left-NEU)
;   (return-Right-simgate-GBLG-is-abort state-right-NEU))

(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
))))))

(define-fun aborts-equal-SETBIT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-keys_top-SETBIT)      ; also contains new index    
        (state-right-NEU Return-Right-keys_top-SETBIT) ; also contains new index
        (h Int)
        (zz Bool))
        Bool


(match (return-Left-keys_top-SETBIT-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))
)

(define-fun aborts-equal-GETAOUT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-keys_top-GETAOUT)      ; also contains new index    
        (state-right-NEU Return-Right-keys_top-GETAOUT) ; also contains new index
        (h Int))
        Bool


(match (return-Left-keys_top-GETAOUT-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))
;(= (return-Left-keys_top-GETAOUT-is-abort  state-left-NEU)
;   (return-Right-keys_top-GETAOUT-is-abort state-right-NEU))
)


(define-fun aborts-equal-GETKEYSIN          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-keys_bottom-GETKEYSIN)      ; also contains new index    
        (state-right-NEU Return-Right-keys_bottom-GETKEYSIN) ; also contains new index
        (h Int))
        Bool
(match (return-Left-keys_bottom-GETKEYSIN-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))

;(= (return-Left-keys_bottom-GETKEYSIN-is-abort  state-left-NEU)
;   (return-Right-keys_bottom-GETKEYSIN-is-abort state-right-NEU))
)

(define-fun aborts-left-right          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-gate-GBLG)      ; also contains new index    
        (state-right-NEU Return-Right-simgate-GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool


(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true) ;ex falso quod libet
 ((mk-return-value v)  true)
)))))

;(=> (return-Left-gate-GBLG-is-abort     state-left-NEU)
;    (return-Right-simgate-GBLG-is-abort state-right-NEU))
)

(define-fun aborts-right-left          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-gate-GBLG)      ; also contains new index    
        (state-right-NEU Return-Right-simgate-GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool

(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  true)
)))
 ((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            false) ;modus ponens
 ((mk-return-value v)  true)
)))))

;(=> (return-Right-simgate-GBLG-is-abort state-right-NEU)
;    (return-Left-gate-GBLG-is-abort     state-left-NEU ))
)


; no-abort

(define-fun no-abort          (
        (state-left  CompositionState-Left)
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU Return-Left-gate-GBLG)      ; also contains new index    
        (state-right-NEU Return-Right-simgate-GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool
(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))
;(and
;(= (return-Left-gate-GBLG-is-abort     state-left-NEU)
;   false)
;(= (return-Right-simgate-GBLG-is-abort     state-right-NEU)
;   false)
;)
)

(define-fun no-abort-SETBIT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
       ; (state-length-left  Int) ; old index = 1
       ; (state-length-right Int) ; old index = 1
        (state-left-NEU  Return-Left-keys_top-SETBIT)  ; also contains new index    
        (state-right-NEU Return-Right-keys_top-SETBIT) ; also contains new index
        (h Int)
        (zz Bool))
        Bool
(match (return-Left-keys_top-SETBIT-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
)))))
;(and
;(= (return-Left-keys_top-SETBIT-is-abort     state-left-NEU)
;   false)
;(= (return-Right-keys_top-SETBIT-is-abort     state-right-NEU)
;   false)
;)
)

(define-fun no-abort-GETAOUT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU  Return-Left-keys_top-GETAOUT)  ; also contains new index    
        (state-right-NEU Return-Right-keys_top-GETAOUT) ; also contains new index
        (h Int))
        Bool

(and
(match (return-Left-keys_top-GETAOUT-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
))))))
;(= (return-Left-keys_top-GETAOUT-is-abort     state-left-NEU)
;   false)
;(= (return-Right-keys_top-GETAOUT-is-abort     state-right-NEU)
;   false)
)

(define-fun no-abort-GETKEYSIN          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left  Int) ; old index = 1
        ;(state-length-right Int) ; old index = 1
        (state-left-NEU  Return-Left-keys_bottom-GETKEYSIN)  ; also contains new index    
        (state-right-NEU Return-Right-keys_bottom-GETKEYSIN) ; also contains new index
        (h Int))
        Bool
(and
(match (return-Left-keys_bottom-GETKEYSIN-return-value-or-abort state-left-NEU)
((mk-abort
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value v)  false)
)))
 ((mk-return-value v)
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            false)
 ((mk-return-value v)  true)
))))))
;(and
;(= (return-Left-keys_bottom-GETKEYSIN-is-abort     state-left-NEU)
;   false)
;(= (return-Right-keys_bottom-GETKEYSIN-is-abort     state-right-NEU)
;   false)
;)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Same Output
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-fun same-output          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
        ;(state-length-left-old Int)
        ;(state-length-right-old Int)
        (state-left-NEU Return-Left-gate-GBLG)
        (state-right-NEU Return-Right-simgate-GBLG)
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool
(and
(match (return-Left-gate-GBLG-return-value-or-abort state-left-NEU)
((mk-abort true)
((mk-return-value v)
(match (return-Right-simgate-GBLG-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value w)  (= v w))
))))))
;(=
;(return-Left-gate-GBLG-value return-left-gate-GBLG)
;(return-Right-simgate-GBLG-value return-right-simgate-GBLG)
;)
)

(define-fun same-output-SETBIT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left-old Int)
;        (state-length-right-old Int)
        (state-left-NEU Return-Left-keys_top-SETBIT)
        (state-right-NEU Return-Right-keys_top-SETBIT)
        (h Int)
        (zz Bool))
        Bool
(and
(match (return-Left-keys_top-SETBIT-return-value-or-abort state-left-NEU)
((mk-abort true)
((mk-return-value v)
(match (return-Right-keys_top-SETBIT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value w)  (= v w))
))))))
;(=
;(return-Left-keys_top-SETBIT-value return-left-keys_top-SETBIT)
;(return-Right-keys_top-SETBIT-value return-right-keys_top-SETBIT)
;)
)

(define-fun same-output-GETAOUT          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
       ; (state-length-left-old Int)
       ; (state-length-right-old Int)
        (state-left-NEU Return-Left-keys_top-GETAOUT)
        (state-right-NEU Return-Right-keys_top-GETAOUT)
        (h Int))
        Bool
(and
(match (return-Left-keys_top-GETAOUT-return-value-or-abort state-left-NEU)
((mk-abort true)
((mk-return-value v)
(match (return-Right-keys_top-GETAOUT-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value w)  (= v w))
))))))
;(=
;(return-Left-keys_top-GETAOUT-value return-left-keys_top-GETAOUT)
;(return-Right-keys_top-GETAOUT-value return-right-keys_top-GETAOUT)
;)
)

(define-fun same-output-GETKEYSIN          (
        (state-left  CompositionState-Left )
        (state-right CompositionState-Right)
;        (state-length-left-old Int)
;        (state-length-right-old Int)
        (state-left-NEU Return-Left-keys_bottom-GETKEYSIN)
        (state-right-NEU Return-Right-keys_bottom-GETKEYSIN)
        (h Int))
        Bool
(and
(match (return-Left-keys_bottom-GETKEYSIN-return-value-or-abort state-left-NEU)
((mk-abort true)
((mk-return-value v)
(match (return-Right-keys_bottom-GETKEYSIN-return-value-or-abort state-right-NEU)
(( mk-abort            true)
 ((mk-return-value w)  (= v w))
))))))
;(=
;(return-Left-keys_bottom-GETKEYSIN-value return-left-keys_bottom-GETKEYSIN)
;(return-Right-keys_bottom-GETKEYSIN-value return-right-keys_bottom-GETKEYSIN)
;)
)(check-sat)
(push 1)(assert (not (=> (and (forall ((randmap-sample-id-left Int)
 (randmap-sample-ctr-left Int)
 (randmap-sample-id-right Int)
 (randmap-sample-ctr-right Int)
)
 (=> (randomness-mapping-GETKEYSIN (get-rand-ctr-Left randmap-sample-id-left)
 (get-rand-ctr-Right randmap-sample-id-right)
 randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
 (rand-is-eq randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
)
)
 (invariant-GETKEYSIN game-state-Left_inst-old game-state-Right_inst-old)
)
 (invariant-GETKEYSIN game-state-Left_inst-new-GETKEYSIN game-state-Right_inst-new-GETKEYSIN)
)
)
)
(check-sat)
(pop 1)(push 1)(assert (not (=> (and (forall ((randmap-sample-id-left Int)
 (randmap-sample-ctr-left Int)
 (randmap-sample-id-right Int)
 (randmap-sample-ctr-right Int)
)
 (=> (randomness-mapping-GETKEYSIN (get-rand-ctr-Left randmap-sample-id-left)
 (get-rand-ctr-Right randmap-sample-id-right)
 randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
 (rand-is-eq randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
)
)
 (invariant-GETKEYSIN game-state-Left_inst-old game-state-Right_inst-old)
)
 (aborts-equal-GETKEYSIN game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GETKEYSIN return-Right_inst-GETKEYSIN arg-GETKEYSIN-h)
)
)
)
(check-sat)
(pop 1)(push 1)(assert (not (=> (and (forall ((randmap-sample-id-left Int)
 (randmap-sample-ctr-left Int)
 (randmap-sample-id-right Int)
 (randmap-sample-ctr-right Int)
)
 (=> (randomness-mapping-GETKEYSIN (get-rand-ctr-Left randmap-sample-id-left)
 (get-rand-ctr-Right randmap-sample-id-right)
 randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
 (rand-is-eq randmap-sample-id-left randmap-sample-id-right randmap-sample-ctr-left randmap-sample-ctr-right)
)
)
 (invariant-GETKEYSIN game-state-Left_inst-old game-state-Right_inst-old)
 (no-abort-GETKEYSIN game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GETKEYSIN return-Right_inst-GETKEYSIN arg-GETKEYSIN-h)
)
 (same-output-GETKEYSIN game-state-Left_inst-old game-state-Right_inst-old return-Left_inst-GETKEYSIN return-Right_inst-GETKEYSIN arg-GETKEYSIN-h)
)
)
)
(check-sat)
(pop 1)(pop 1)