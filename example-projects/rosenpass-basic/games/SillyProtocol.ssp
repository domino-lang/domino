composition SillyProtocol {
  const kem_sk_len: Integer;
  const kem_pk_len: Integer;
  const kem_ct_len: Integer;
  const kem_shk_len: Integer;
  const kem_encaps_coins_len: Integer;

  const is_ideal: Bool;
  
  const encaps: fn (Bits(kem_encaps_coins_len), Bits(kem_pk_len)) -> (Bits(kem_shk_len), Bits(kem_ct_len)); const keygen: fn Bits(kem_sk_len) -> Bits(kem_pk_len);

  instance kem = KEM {
    params {
      kem_sk_len: kem_sk_len,
      kem_pk_len: kem_pk_len,
      kem_ct_len: kem_ct_len,
      kem_shk_len: kem_shk_len,
      kem_encaps_coins_len: kem_encaps_coins_len,

      encaps: encaps,
    }
  }

  instance asym_keys = AsymmetricKeys {
    params {
      is_ideal: true,

      kem_sk_len: kem_sk_len,
      kem_pk_len: kem_pk_len,

      keygen: keygen,
    }
  }

  instance kem_rand = RandomKeysWithKeyID {
    params {
      is_ideal: true,
      key_len: kem_encaps_coins_len,
    }
  }

  
  instance output = KemSymKeys {
    params {
        is_ideal: is_ideal,

        shk_len: kem_shk_len,
        pk_len: kem_pk_len,
        ct_len: kem_ct_len,
    }
  }

  instance fwd = Fwd {
      params {
        kem_pk_len: kem_pk_len,
        kem_ct_len: kem_ct_len,
      }
  }

  compose {
    adversary: {
      Set: asym_keys,
      Get: output,
      Encaps: fwd,
    },
    fwd: {
      Encaps: kem,
    }
    kem: {
      Get: asym_keys,
      GetRand: kem_rand,
      Set: output,
    }
  }


}

