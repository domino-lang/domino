/**
 * Sampling of keys based on key IDs.
 */
package RandomKeysWithKeyID {
  params {
    is_ideal: Bool,

    key_len: Integer,
  }

  state {
    /* (key_id, (key, is_uncorrupted)) */
    T: Table(Integer, (Bits(key_len), Bool)),
  }

  /* Supply a specific key for a key ID, usually used by the
   * adversary to set a corrupted key. This must be the first
   * use of this key ID.
   */
  oracle Corrupt(key_id: Integer, corrupt_key: Bits(key_len)) {
    /* do not allow overriding existing keys */
    assert (T[key_id] == None);

    T[key_id] <- (Some(corrupt_key), false);
    return;
  }

  /* TODO aufrÃ¤umen bzgl. Corrupt und GetRand */
  oracle Set(key_id: Integer, key: Bits(key_len), is_uncorrupted: Bool) {
    /* do not allow overriding existing keys */
    assert (T[key_id] == None);

    if (is_ideal and is_uncorrupted) {
      key <-$ Bits(key_len);
    }

    T[key_id] <- Some((key, is_uncorrupted));
    return;
  }

  /* TODO this should be called `Get`? */
  /* Retrieve a key associated with a specific key ID.
   * If this is the first use of the key ID, a fresh key
   * will be sampled. If this key ID has already been used,
   * the existing key is returned. This may be a corrupt key
   * if the Corrupt oracle was used on this key ID.
   */
  oracle GetRand(key_id: Integer) -> (Bits(sk_len), Bool) {
    if T[key_id] == None {
      key <-$ Bits(key_len);
      T[key_id] <- (Some(key), true);
    }

    return Unwrap(T[key_id])
  }
}

