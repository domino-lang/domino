(set-logic ALL)
(declare-sort Bits_m 0)
(declare-sort Bits_n 0)
(declare-sort Bits_p 0)
(declare-datatypes ((Maybe 1)
)
 ((par (T)
 ((mk-some (maybe-get T)
)
 (mk-none)
)
)
)
)
(declare-datatypes ((Tuple1 1)
)
 ((par (T1)
 ((mk-tuple1 (el1 T1)
)
)
)
)
)
(declare-datatypes ((Tuple2 2)
)
 ((par (T1 T2)
 ((mk-tuple2 (el1 T1)
 (el2 T2)
)
)
)
)
)
(declare-datatypes ((Tuple3 3)
)
 ((par (T1 T2 T3)
 ((mk-tuple3 (el1 T1)
 (el2 T2)
 (el3 T3)
)
)
)
)
)
(declare-datatypes ((Tuple4 4)
)
 ((par (T1 T2 T3 T4)
 ((mk-tuple4 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
)
)
)
)
)
(declare-datatypes ((Tuple5 5)
)
 ((par (T1 T2 T3 T4 T5)
 ((mk-tuple5 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
)
)
)
)
)
(declare-datatypes ((Tuple6 6)
)
 ((par (T1 T2 T3 T4 T5 T6)
 ((mk-tuple6 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
)
)
)
)
)
(declare-datatypes ((Tuple7 7)
)
 ((par (T1 T2 T3 T4 T5 T6 T7)
 ((mk-tuple7 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
)
)
)
)
)
(declare-datatypes ((Tuple8 8)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8)
 ((mk-tuple8 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
)
)
)
)
)
(declare-datatypes ((Tuple9 9)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9)
 ((mk-tuple9 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
)
)
)
)
)
(declare-datatypes ((Tuple10 10)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10)
 ((mk-tuple10 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
)
)
)
)
)
(declare-datatypes ((Tuple11 11)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11)
 ((mk-tuple11 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
)
)
)
)
)
(declare-datatypes ((Tuple12 12)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12)
 ((mk-tuple12 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
)
)
)
)
)
(declare-datatypes ((Tuple13 13)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13)
 ((mk-tuple13 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
)
)
)
)
)
(declare-datatypes ((Tuple14 14)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14)
 ((mk-tuple14 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
)
)
)
)
)
(declare-datatypes ((Tuple15 15)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15)
 ((mk-tuple15 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
)
)
)
)
)
(declare-datatypes ((Tuple16 16)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16)
 ((mk-tuple16 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
)
)
)
)
)
(declare-datatypes ((Tuple17 17)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17)
 ((mk-tuple17 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
)
)
)
)
)
(declare-datatypes ((Tuple18 18)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18)
 ((mk-tuple18 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
)
)
)
)
)
(declare-datatypes ((Tuple19 19)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19)
 ((mk-tuple19 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
)
)
)
)
)
(declare-datatypes ((Tuple20 20)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20)
 ((mk-tuple20 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
)
)
)
)
)
(declare-datatypes ((Tuple21 21)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21)
 ((mk-tuple21 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
)
)
)
)
)
(declare-datatypes ((Tuple22 22)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22)
 ((mk-tuple22 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
)
)
)
)
)
(declare-datatypes ((Tuple23 23)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23)
 ((mk-tuple23 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
)
)
)
)
)
(declare-datatypes ((Tuple24 24)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23 T24)
 ((mk-tuple24 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
 (el24 T24)
)
)
)
)
)
(declare-datatypes ((Tuple25 25)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23 T24 T25)
 ((mk-tuple25 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
 (el24 T24)
 (el25 T25)
)
)
)
)
)
(declare-datatypes ((Tuple26 26)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23 T24 T25 T26)
 ((mk-tuple26 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
 (el24 T24)
 (el25 T25)
 (el26 T26)
)
)
)
)
)
(declare-datatypes ((Tuple27 27)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23 T24 T25 T26 T27)
 ((mk-tuple27 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
 (el24 T24)
 (el25 T25)
 (el26 T26)
 (el27 T27)
)
)
)
)
)
(declare-datatypes ((Tuple28 28)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23 T24 T25 T26 T27 T28)
 ((mk-tuple28 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
 (el24 T24)
 (el25 T25)
 (el26 T26)
 (el27 T27)
 (el28 T28)
)
)
)
)
)
(declare-datatypes ((Tuple29 29)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23 T24 T25 T26 T27 T28 T29)
 ((mk-tuple29 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
 (el24 T24)
 (el25 T25)
 (el26 T26)
 (el27 T27)
 (el28 T28)
 (el29 T29)
)
)
)
)
)
(declare-datatypes ((Tuple30 30)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23 T24 T25 T26 T27 T28 T29 T30)
 ((mk-tuple30 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
 (el24 T24)
 (el25 T25)
 (el26 T26)
 (el27 T27)
 (el28 T28)
 (el29 T29)
 (el30 T30)
)
)
)
)
)
(declare-datatypes ((Tuple31 31)
)
 ((par (T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 T20 T21 T22 T23 T24 T25 T26 T27 T28 T29 T30 T31)
 ((mk-tuple31 (el1 T1)
 (el2 T2)
 (el3 T3)
 (el4 T4)
 (el5 T5)
 (el6 T6)
 (el7 T7)
 (el8 T8)
 (el9 T9)
 (el10 T10)
 (el11 T11)
 (el12 T12)
 (el13 T13)
 (el14 T14)
 (el15 T15)
 (el16 T16)
 (el17 T17)
 (el18 T18)
 (el19 T19)
 (el20 T20)
 (el21 T21)
 (el22 T22)
 (el23 T23)
 (el24 T24)
 (el25 T25)
 (el26 T26)
 (el27 T27)
 (el28 T28)
 (el29 T29)
 (el30 T30)
 (el31 T31)
)
)
)
)
)
(declare-datatype Empty ((mk-empty)
)
)
(declare-fun __sample-rand-Indcpamod0-Bits_n (Int Int)
 Bits_n)
(declare-fun __func-Indcpamod0-encm (Bits_n Bits_m Bits_n)
 Bits_p)
(declare-fun __func-Indcpamod0-encn (Bits_n Bits_n Bits_n)
 Bits_m)
(declare-datatype IntermediateOracleState_Indcpamod0_keys_top_GETKEYSIN ((oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSIN_0-42-2 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSIN_0-42-2_Z (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSIN_0-42-2_unwrap-1 (Array Bool (Maybe Bits_n)
)
)
)
 (oracle-intermediate-state-abort_Indcpamod0_keys_top_GETKEYSIN_0-37-0)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSIN_0-37-3 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSIN_0-37-3_Z (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSIN_0-37-3_unwrap-1 (Array Bool (Maybe Bits_n)
)
)
)
)
)
(declare-datatype IntermediateOracleState_Indcpamod0_keys_top_GETAIN ((oracle-intermediate-state-return_Indcpamod0_keys_top_GETAIN_0-42-6 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAIN_0-42-6_unwrap-3 Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAIN_0-42-6_k Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAIN_0-42-6_Z (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAIN_0-42-6_unwrap-2 Bool)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAIN_0-42-6_zz Bool)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAIN_0-42-6_unwrap-1 (Array Bool (Maybe Bits_n)
)
)
)
 (oracle-intermediate-state-abort_Indcpamod0_keys_top_GETAIN_0-37-0)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAIN_0-37-7 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAIN_0-37-7_unwrap-3 Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAIN_0-37-7_k Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAIN_0-37-7_Z (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAIN_0-37-7_unwrap-2 Bool)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAIN_0-37-7_zz Bool)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAIN_0-37-7_unwrap-1 (Array Bool (Maybe Bits_n)
)
)
)
)
)
(declare-datatype IntermediateOracleState_Indcpamod0_keys_top_GETINAIN ((oracle-intermediate-state-return_Indcpamod0_keys_top_GETINAIN_0-42-6 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETINAIN_0-42-6_unwrap-3 Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETINAIN_0-42-6_Z (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETINAIN_0-42-6_zz Bool)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETINAIN_0-42-6_unwrap-1 (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETINAIN_0-42-6_unwrap-2 Bool)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETINAIN_0-42-6_k Bits_n)
)
 (oracle-intermediate-state-abort_Indcpamod0_keys_top_GETINAIN_0-37-0)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETINAIN_0-37-7 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETINAIN_0-37-7_unwrap-3 Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETINAIN_0-37-7_Z (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETINAIN_0-37-7_zz Bool)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETINAIN_0-37-7_unwrap-1 (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETINAIN_0-37-7_unwrap-2 Bool)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETINAIN_0-37-7_k Bits_n)
)
)
)
(declare-datatype IntermediateOracleState_Indcpamod0_keys_top_GETAOUT ((oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-42-12 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-42-12_r Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-42-12_unwrap-1 (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-42-12_Z (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-42-12_flag (Maybe Bool)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-42-12_unwrap-2 Bool)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-42-12_zz Bool)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-42-12_k Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-42-12_rr Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-42-12_T (Maybe (Array Bool (Maybe Bits_n)
)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-42-12_unwrap-3 Bits_n)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-37-6 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-37-6_zz Bool)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-37-6_k Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-37-6_Z (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-37-6_unwrap-1 (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-37-6_unwrap-3 Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-37-6_flag (Maybe Bool)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-42-2-37-6_unwrap-2 Bool)
)
 (oracle-intermediate-state-abort_Indcpamod0_keys_top_GETAOUT_0-37-0)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-42-12 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-42-12_r Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-42-12_unwrap-1 (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-42-12_Z (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-42-12_flag (Maybe Bool)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-42-12_unwrap-2 Bool)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-42-12_zz Bool)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-42-12_k Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-42-12_rr Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-42-12_T (Maybe (Array Bool (Maybe Bits_n)
)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-42-12_unwrap-3 Bits_n)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-37-6 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-37-6_zz Bool)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-37-6_k Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-37-6_Z (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-37-6_unwrap-1 (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-37-6_unwrap-3 Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-37-6_flag (Maybe Bool)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETAOUT_0-37-3-37-6_unwrap-2 Bool)
)
)
)
(declare-datatype IntermediateOracleState_Indcpamod0_keys_top_GETKEYSOUT ((oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-42-2-42-8 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-42-2-42-8_unwrap-1 (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-42-2-42-8_T (Maybe (Array Bool (Maybe Bits_n)
)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-42-2-42-8_r Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-42-2-42-8_Z (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-42-2-42-8_flag (Maybe Bool)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-42-2-42-8_rr Bits_n)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-42-2-37-2 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-42-2-37-2_unwrap-1 (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-42-2-37-2_Z (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-42-2-37-2_flag (Maybe Bool)
)
)
 (oracle-intermediate-state-abort_Indcpamod0_keys_top_GETKEYSOUT_0-37-0)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-37-3-42-8 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-37-3-42-8_unwrap-1 (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-37-3-42-8_T (Maybe (Array Bool (Maybe Bits_n)
)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-37-3-42-8_r Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-37-3-42-8_Z (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-37-3-42-8_flag (Maybe Bool)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-37-3-42-8_rr Bits_n)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-37-3-37-2 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-37-3-37-2_unwrap-1 (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-37-3-37-2_Z (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETKEYSOUT_0-37-3-37-2_flag (Maybe Bool)
)
)
)
)
(declare-datatype IntermediateOracleState_Indcpamod0_keys_top_GETBIT ((oracle-intermediate-state-return_Indcpamod0_keys_top_GETBIT_0-42-2 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETBIT_0-42-2_zz Bool)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETBIT_0-42-2_unwrap-1 Bool)
)
 (oracle-intermediate-state-abort_Indcpamod0_keys_top_GETBIT_0-37-0)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETBIT_0-37-3 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETBIT_0-37-3_zz Bool)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_GETBIT_0-37-3_unwrap-1 Bool)
)
)
)
(declare-datatype IntermediateOracleState_Indcpamod0_keys_top_SETBIT ((oracle-intermediate-state-return_Indcpamod0_keys_top_SETBIT_0-42-1 (oracle-intermediate-state-return_Indcpamod0_keys_top_SETBIT_0-42-1_z (Maybe Bool)
)
)
 (oracle-intermediate-state-abort_Indcpamod0_keys_top_SETBIT_0-37-0)
 (oracle-intermediate-state-return_Indcpamod0_keys_top_SETBIT_0-37-2 (oracle-intermediate-state-return_Indcpamod0_keys_top_SETBIT_0-37-2_z (Maybe Bool)
)
)
)
)
(declare-datatype IntermediatePackageInstanceState_Indcpamod0_keys_top ((no-intermediate-package-instance-state_Indcpamod0_keys_top)
 (intermediate-package-instance-state_Indcpamod0_keys_top_GETKEYSIN (intermediate-package-instance-state-get_Indcpamod0_keys_top_GETKEYSIN IntermediateOracleState_Indcpamod0_keys_top_GETKEYSIN)
)
 (intermediate-package-instance-state_Indcpamod0_keys_top_GETAIN (intermediate-package-instance-state-get_Indcpamod0_keys_top_GETAIN IntermediateOracleState_Indcpamod0_keys_top_GETAIN)
)
 (intermediate-package-instance-state_Indcpamod0_keys_top_GETINAIN (intermediate-package-instance-state-get_Indcpamod0_keys_top_GETINAIN IntermediateOracleState_Indcpamod0_keys_top_GETINAIN)
)
 (intermediate-package-instance-state_Indcpamod0_keys_top_GETAOUT (intermediate-package-instance-state-get_Indcpamod0_keys_top_GETAOUT IntermediateOracleState_Indcpamod0_keys_top_GETAOUT)
)
 (intermediate-package-instance-state_Indcpamod0_keys_top_GETKEYSOUT (intermediate-package-instance-state-get_Indcpamod0_keys_top_GETKEYSOUT IntermediateOracleState_Indcpamod0_keys_top_GETKEYSOUT)
)
 (intermediate-package-instance-state_Indcpamod0_keys_top_GETBIT (intermediate-package-instance-state-get_Indcpamod0_keys_top_GETBIT IntermediateOracleState_Indcpamod0_keys_top_GETBIT)
)
 (intermediate-package-instance-state_Indcpamod0_keys_top_SETBIT (intermediate-package-instance-state-get_Indcpamod0_keys_top_SETBIT IntermediateOracleState_Indcpamod0_keys_top_SETBIT)
)
)
)
(declare-datatype IntermediateOracleState_Indcpamod0_enc_ENCN ((oracle-intermediate-state-return_Indcpamod0_enc_ENCN_4 (oracle-intermediate-state-return_Indcpamod0_enc_ENCN_4_unwrap-1 Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_enc_ENCN_4_r Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_enc_ENCN_4_K (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_enc_ENCN_4_c Bits_m)
)
)
)
(declare-datatype IntermediateOracleState_Indcpamod0_enc_ENCM ((oracle-intermediate-state-return_Indcpamod0_enc_ENCM_4 (oracle-intermediate-state-return_Indcpamod0_enc_ENCM_4_r Bits_n)
 (oracle-intermediate-state-return_Indcpamod0_enc_ENCM_4_c Bits_p)
 (oracle-intermediate-state-return_Indcpamod0_enc_ENCM_4_K (Array Bool (Maybe Bits_n)
)
)
 (oracle-intermediate-state-return_Indcpamod0_enc_ENCM_4_unwrap-1 Bits_n)
)
)
)
(declare-datatype IntermediatePackageInstanceState_Indcpamod0_enc ((no-intermediate-package-instance-state_Indcpamod0_enc)
 (intermediate-package-instance-state_Indcpamod0_enc_ENCN (intermediate-package-instance-state-get_Indcpamod0_enc_ENCN IntermediateOracleState_Indcpamod0_enc_ENCN)
)
 (intermediate-package-instance-state_Indcpamod0_enc_ENCM (intermediate-package-instance-state-get_Indcpamod0_enc_ENCM IntermediateOracleState_Indcpamod0_enc_ENCM)
)
)
)
(declare-datatype State_Indcpamod0_keys_top ((mk-state-Indcpamod0-keys_top (state-Indcpamod0-keys_top-T (Maybe (Array Bool (Maybe Bits_n)
)
)
)
 (state-Indcpamod0-keys_top-z (Maybe Bool)
)
 (state-Indcpamod0-keys_top-flag (Maybe Bool)
)
 (state--intermediate-Indcpamod0-keys_top IntermediatePackageInstanceState_Indcpamod0_keys_top)
)
)
)
(declare-datatype State_Indcpamod0_enc ((mk-state-Indcpamod0-enc (state--intermediate-Indcpamod0-enc IntermediatePackageInstanceState_Indcpamod0_enc)
)
)
)
(declare-datatype CompositionState-Indcpamod0 ((mk-composition-state-Indcpamod0 (composition-pkgstate-Indcpamod0-keys_top State_Indcpamod0_keys_top)
 (composition-pkgstate-Indcpamod0-enc State_Indcpamod0_enc)
 (composition-param-Indcpamod0-m Int)
 (composition-param-Indcpamod0-n Int)
 (composition-param-Indcpamod0-p Int)
 (composition-param-Indcpamod0-zerom Bits_m)
 (composition-param-Indcpamod0-zeron Bits_n)
 (composition-rand-Indcpamod0-0 Int)
 (composition-rand-Indcpamod0-1 Int)
 (composition-rand-Indcpamod0-2 Int)
 (composition-rand-Indcpamod0-3 Int)
 (composition-rand-Indcpamod0-4 Int)
 (composition-rand-Indcpamod0-5 Int)
 (composition-rand-Indcpamod0-6 Int)
)
)
)
(declare-datatype Return_Indcpamod0_keys_top_GETKEYSIN ((mk-return-Indcpamod0-keys_top-GETKEYSIN (return-Indcpamod0-keys_top-GETKEYSIN-state (Array Int CompositionState-Indcpamod0)
)
 (return-Indcpamod0-keys_top-GETKEYSIN-state-length Int)
 (return-Indcpamod0-keys_top-GETKEYSIN-value (Maybe (Array Bool (Maybe Bits_n)
)
)
)
 (return-Indcpamod0-keys_top-GETKEYSIN-is-abort Bool)
)
)
)
(declare-datatype Return_Indcpamod0_keys_top_GETAIN ((mk-return-Indcpamod0-keys_top-GETAIN (return-Indcpamod0-keys_top-GETAIN-state (Array Int CompositionState-Indcpamod0)
)
 (return-Indcpamod0-keys_top-GETAIN-state-length Int)
 (return-Indcpamod0-keys_top-GETAIN-value (Maybe Bits_n)
)
 (return-Indcpamod0-keys_top-GETAIN-is-abort Bool)
)
)
)
(declare-datatype Return_Indcpamod0_keys_top_GETINAIN ((mk-return-Indcpamod0-keys_top-GETINAIN (return-Indcpamod0-keys_top-GETINAIN-state (Array Int CompositionState-Indcpamod0)
)
 (return-Indcpamod0-keys_top-GETINAIN-state-length Int)
 (return-Indcpamod0-keys_top-GETINAIN-value (Maybe Bits_n)
)
 (return-Indcpamod0-keys_top-GETINAIN-is-abort Bool)
)
)
)
(declare-datatype Return_Indcpamod0_keys_top_GETAOUT ((mk-return-Indcpamod0-keys_top-GETAOUT (return-Indcpamod0-keys_top-GETAOUT-state (Array Int CompositionState-Indcpamod0)
)
 (return-Indcpamod0-keys_top-GETAOUT-state-length Int)
 (return-Indcpamod0-keys_top-GETAOUT-value (Maybe Bits_n)
)
 (return-Indcpamod0-keys_top-GETAOUT-is-abort Bool)
)
)
)
(declare-datatype Return_Indcpamod0_keys_top_GETKEYSOUT ((mk-return-Indcpamod0-keys_top-GETKEYSOUT (return-Indcpamod0-keys_top-GETKEYSOUT-state (Array Int CompositionState-Indcpamod0)
)
 (return-Indcpamod0-keys_top-GETKEYSOUT-state-length Int)
 (return-Indcpamod0-keys_top-GETKEYSOUT-value (Maybe (Array Bool (Maybe Bits_n)
)
)
)
 (return-Indcpamod0-keys_top-GETKEYSOUT-is-abort Bool)
)
)
)
(declare-datatype Return_Indcpamod0_keys_top_GETBIT ((mk-return-Indcpamod0-keys_top-GETBIT (return-Indcpamod0-keys_top-GETBIT-state (Array Int CompositionState-Indcpamod0)
)
 (return-Indcpamod0-keys_top-GETBIT-state-length Int)
 (return-Indcpamod0-keys_top-GETBIT-value (Maybe Bool)
)
 (return-Indcpamod0-keys_top-GETBIT-is-abort Bool)
)
)
)
(declare-datatype Return_Indcpamod0_keys_top_SETBIT ((mk-return-Indcpamod0-keys_top-SETBIT (return-Indcpamod0-keys_top-SETBIT-state (Array Int CompositionState-Indcpamod0)
)
 (return-Indcpamod0-keys_top-SETBIT-state-length Int)
 (return-Indcpamod0-keys_top-SETBIT-value (Maybe Empty)
)
 (return-Indcpamod0-keys_top-SETBIT-is-abort Bool)
)
)
)
(declare-datatype Return_Indcpamod0_enc_ENCN ((mk-return-Indcpamod0-enc-ENCN (return-Indcpamod0-enc-ENCN-state (Array Int CompositionState-Indcpamod0)
)
 (return-Indcpamod0-enc-ENCN-state-length Int)
 (return-Indcpamod0-enc-ENCN-value (Maybe Bits_m)
)
 (return-Indcpamod0-enc-ENCN-is-abort Bool)
)
)
)
(declare-datatype Return_Indcpamod0_enc_ENCM ((mk-return-Indcpamod0-enc-ENCM (return-Indcpamod0-enc-ENCM-state (Array Int CompositionState-Indcpamod0)
)
 (return-Indcpamod0-enc-ENCM-state-length Int)
 (return-Indcpamod0-enc-ENCM-value (Maybe Bits_p)
)
 (return-Indcpamod0-enc-ENCM-is-abort Bool)
)
)
)
; Composition of Indcpamod0
(define-fun oracle-Indcpamod0-keys_top-GETKEYSIN ((__global_state (Array Int CompositionState-Indcpamod0)
)
 (__state_length Int)
)
 Return_Indcpamod0_keys_top_GETKEYSIN (let ((__self_state (composition-pkgstate-Indcpamod0-keys_top (select __global_state __state_length)
)
)
)
 (ite (= (state-Indcpamod0-keys_top-flag __self_state)
 (mk-some true)
)
 (ite (= (state-Indcpamod0-keys_top-T __self_state)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Indcpamod0-keys_top-GETKEYSIN __global_state __state_length (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
 true)
 (let ((unwrap-1 (maybe-get (state-Indcpamod0-keys_top-T __self_state)
)
)
)
 (let ((Z unwrap-1)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 __self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-keys_top-GETKEYSIN __global_state __state_length (mk-some Z)
 false)
)
)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 __self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-keys_top-GETKEYSIN __global_state __state_length (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
 true)
)
)
)
)
(define-fun oracle-Indcpamod0-keys_top-GETAIN ((__global_state (Array Int CompositionState-Indcpamod0)
)
 (__state_length Int)
)
 Return_Indcpamod0_keys_top_GETAIN (let ((__self_state (composition-pkgstate-Indcpamod0-keys_top (select __global_state __state_length)
)
)
)
 (ite (= (state-Indcpamod0-keys_top-flag __self_state)
 (mk-some true)
)
 (ite (= (state-Indcpamod0-keys_top-T __self_state)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Indcpamod0-keys_top-GETAIN __global_state __state_length (as mk-none (Maybe Bits_n)
)
 true)
 (let ((unwrap-1 (maybe-get (state-Indcpamod0-keys_top-T __self_state)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (state-Indcpamod0-keys_top-z __self_state)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Indcpamod0-keys_top-GETAIN __global_state __state_length (as mk-none (Maybe Bits_n)
)
 true)
 (let ((unwrap-2 (maybe-get (state-Indcpamod0-keys_top-z __self_state)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z zz)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Indcpamod0-keys_top-GETAIN __global_state __state_length (as mk-none (Maybe Bits_n)
)
 true)
 (let ((unwrap-3 (maybe-get (select Z zz)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 __self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-keys_top-GETAIN __global_state __state_length (mk-some k)
 false)
)
)
)
)
)
)
)
)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 __self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-keys_top-GETAIN __global_state __state_length (as mk-none (Maybe Bits_n)
)
 true)
)
)
)
)
(define-fun oracle-Indcpamod0-keys_top-GETINAIN ((__global_state (Array Int CompositionState-Indcpamod0)
)
 (__state_length Int)
)
 Return_Indcpamod0_keys_top_GETINAIN (let ((__self_state (composition-pkgstate-Indcpamod0-keys_top (select __global_state __state_length)
)
)
)
 (ite (= (state-Indcpamod0-keys_top-flag __self_state)
 (mk-some true)
)
 (ite (= (state-Indcpamod0-keys_top-T __self_state)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Indcpamod0-keys_top-GETINAIN __global_state __state_length (as mk-none (Maybe Bits_n)
)
 true)
 (let ((unwrap-1 (maybe-get (state-Indcpamod0-keys_top-T __self_state)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (state-Indcpamod0-keys_top-z __self_state)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Indcpamod0-keys_top-GETINAIN __global_state __state_length (as mk-none (Maybe Bits_n)
)
 true)
 (let ((unwrap-2 (maybe-get (state-Indcpamod0-keys_top-z __self_state)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z (not zz)
)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Indcpamod0-keys_top-GETINAIN __global_state __state_length (as mk-none (Maybe Bits_n)
)
 true)
 (let ((unwrap-3 (maybe-get (select Z (not zz)
)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 __self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-keys_top-GETINAIN __global_state __state_length (mk-some k)
 false)
)
)
)
)
)
)
)
)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 __self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-keys_top-GETINAIN __global_state __state_length (as mk-none (Maybe Bits_n)
)
 true)
)
)
)
)
(define-fun oracle-Indcpamod0-keys_top-GETAOUT ((__global_state (Array Int CompositionState-Indcpamod0)
)
 (__state_length Int)
)
 Return_Indcpamod0_keys_top_GETAOUT (let ((__self_state (composition-pkgstate-Indcpamod0-keys_top (select __global_state __state_length)
)
)
)
 (ite (= (state-Indcpamod0-keys_top-z __self_state)
 (mk-some true)
)
 (let ((__self_state (mk-state-Indcpamod0-keys_top (state-Indcpamod0-keys_top-T __self_state)
 (state-Indcpamod0-keys_top-z __self_state)
 (mk-some true)
 no-intermediate-package-instance-state_Indcpamod0_keys_top)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (ite (= (state-Indcpamod0-keys_top-T __self_state)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((r (__sample-rand-Indcpamod0-Bits_n 1 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
)
)
)
 (let ((__global_state (store __global_state __state_length (mk-composition-state-Indcpamod0 (composition-pkgstate-Indcpamod0-keys_top (select __global_state __state_length)
)
 (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (+ 1 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (let ((Z (store Z true (mk-some r)
)
)
)
 (let ((rr (__sample-rand-Indcpamod0-Bits_n 2 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
)
)
)
 (let ((__global_state (store __global_state __state_length (mk-composition-state-Indcpamod0 (composition-pkgstate-Indcpamod0-keys_top (select __global_state __state_length)
)
 (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (+ 1 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
)
 (let ((Z (store Z false (mk-some rr)
)
)
)
 (let ((__self_state (mk-state-Indcpamod0-keys_top (mk-some Z)
 (state-Indcpamod0-keys_top-z __self_state)
 (state-Indcpamod0-keys_top-flag __self_state)
 no-intermediate-package-instance-state_Indcpamod0_keys_top)
)
)
 (ite (= (state-Indcpamod0-keys_top-T __self_state)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Indcpamod0-keys_top-GETAOUT __global_state __state_length (as mk-none (Maybe Bits_n)
)
 true)
 (let ((unwrap-1 (maybe-get (state-Indcpamod0-keys_top-T __self_state)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (state-Indcpamod0-keys_top-z __self_state)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Indcpamod0-keys_top-GETAOUT __global_state __state_length (as mk-none (Maybe Bits_n)
)
 true)
 (let ((unwrap-2 (maybe-get (state-Indcpamod0-keys_top-z __self_state)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z zz)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Indcpamod0-keys_top-GETAOUT __global_state __state_length (as mk-none (Maybe Bits_n)
)
 true)
 (let ((unwrap-3 (maybe-get (select Z zz)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 __self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-keys_top-GETAOUT __global_state __state_length (mk-some k)
 false)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (ite (= (state-Indcpamod0-keys_top-T __self_state)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Indcpamod0-keys_top-GETAOUT __global_state __state_length (as mk-none (Maybe Bits_n)
)
 true)
 (let ((unwrap-1 (maybe-get (state-Indcpamod0-keys_top-T __self_state)
)
)
)
 (let ((Z unwrap-1)
)
 (ite (= (state-Indcpamod0-keys_top-z __self_state)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Indcpamod0-keys_top-GETAOUT __global_state __state_length (as mk-none (Maybe Bits_n)
)
 true)
 (let ((unwrap-2 (maybe-get (state-Indcpamod0-keys_top-z __self_state)
)
)
)
 (let ((zz unwrap-2)
)
 (ite (= (select Z zz)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Indcpamod0-keys_top-GETAOUT __global_state __state_length (as mk-none (Maybe Bits_n)
)
 true)
 (let ((unwrap-3 (maybe-get (select Z zz)
)
)
)
 (let ((k unwrap-3)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 __self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-keys_top-GETAOUT __global_state __state_length (mk-some k)
 false)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 __self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-keys_top-GETAOUT __global_state __state_length (as mk-none (Maybe Bits_n)
)
 true)
)
)
)
)
(define-fun oracle-Indcpamod0-keys_top-GETKEYSOUT ((__global_state (Array Int CompositionState-Indcpamod0)
)
 (__state_length Int)
)
 Return_Indcpamod0_keys_top_GETKEYSOUT (let ((__self_state (composition-pkgstate-Indcpamod0-keys_top (select __global_state __state_length)
)
)
)
 (ite (not (= (state-Indcpamod0-keys_top-flag __self_state)
 (mk-some true)
)
)
 (let ((__self_state (mk-state-Indcpamod0-keys_top (state-Indcpamod0-keys_top-T __self_state)
 (state-Indcpamod0-keys_top-z __self_state)
 (mk-some true)
 no-intermediate-package-instance-state_Indcpamod0_keys_top)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (ite (= (state-Indcpamod0-keys_top-T __self_state)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (let ((r (__sample-rand-Indcpamod0-Bits_n 3 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
)
)
)
 (let ((__global_state (store __global_state __state_length (mk-composition-state-Indcpamod0 (composition-pkgstate-Indcpamod0-keys_top (select __global_state __state_length)
)
 (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (+ 1 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
)
 (let ((Z ((as const (Array Bool (Maybe Bits_n)
)
)
 (as mk-none (Maybe Bits_n)
)
)
)
)
 (let ((Z (store Z true (mk-some r)
)
)
)
 (let ((rr (__sample-rand-Indcpamod0-Bits_n 4 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
)
)
)
 (let ((__global_state (store __global_state __state_length (mk-composition-state-Indcpamod0 (composition-pkgstate-Indcpamod0-keys_top (select __global_state __state_length)
)
 (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (+ 1 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
)
 (let ((Z (store Z false (mk-some rr)
)
)
)
 (let ((__self_state (mk-state-Indcpamod0-keys_top (mk-some Z)
 (state-Indcpamod0-keys_top-z __self_state)
 (state-Indcpamod0-keys_top-flag __self_state)
 no-intermediate-package-instance-state_Indcpamod0_keys_top)
)
)
 (ite (= (state-Indcpamod0-keys_top-T __self_state)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Indcpamod0-keys_top-GETKEYSOUT __global_state __state_length (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
 true)
 (let ((unwrap-1 (maybe-get (state-Indcpamod0-keys_top-T __self_state)
)
)
)
 (let ((Z unwrap-1)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 __self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-keys_top-GETKEYSOUT __global_state __state_length (mk-some Z)
 false)
)
)
)
)
)
)
)
)
)
)
)
)
 (ite (= (state-Indcpamod0-keys_top-T __self_state)
 (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
)
 (mk-return-Indcpamod0-keys_top-GETKEYSOUT __global_state __state_length (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
 true)
 (let ((unwrap-1 (maybe-get (state-Indcpamod0-keys_top-T __self_state)
)
)
)
 (let ((Z unwrap-1)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 __self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-keys_top-GETKEYSOUT __global_state __state_length (mk-some Z)
 false)
)
)
)
)
)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 __self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-keys_top-GETKEYSOUT __global_state __state_length (as mk-none (Maybe (Array Bool (Maybe Bits_n)
)
)
)
 true)
)
)
)
)
(define-fun oracle-Indcpamod0-keys_top-GETBIT ((__global_state (Array Int CompositionState-Indcpamod0)
)
 (__state_length Int)
)
 Return_Indcpamod0_keys_top_GETBIT (let ((__self_state (composition-pkgstate-Indcpamod0-keys_top (select __global_state __state_length)
)
)
)
 (ite (not (= (state-Indcpamod0-keys_top-z __self_state)
 (as mk-none (Maybe Bool)
)
)
)
 (ite (= (state-Indcpamod0-keys_top-z __self_state)
 (as mk-none (Maybe Bool)
)
)
 (mk-return-Indcpamod0-keys_top-GETBIT __global_state __state_length (as mk-none (Maybe Bool)
)
 true)
 (let ((unwrap-1 (maybe-get (state-Indcpamod0-keys_top-z __self_state)
)
)
)
 (let ((zz unwrap-1)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 __self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-keys_top-GETBIT __global_state __state_length (mk-some zz)
 false)
)
)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 __self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-keys_top-GETBIT __global_state __state_length (as mk-none (Maybe Bool)
)
 true)
)
)
)
)
(define-fun oracle-Indcpamod0-keys_top-SETBIT ((__global_state (Array Int CompositionState-Indcpamod0)
)
 (__state_length Int)
 (zz Bool)
)
 Return_Indcpamod0_keys_top_SETBIT (let ((__self_state (composition-pkgstate-Indcpamod0-keys_top (select __global_state __state_length)
)
)
)
 (ite (= (state-Indcpamod0-keys_top-z __self_state)
 (as mk-none (Maybe Bool)
)
)
 (let ((__self_state (mk-state-Indcpamod0-keys_top (state-Indcpamod0-keys_top-T __self_state)
 (mk-some zz)
 (state-Indcpamod0-keys_top-flag __self_state)
 no-intermediate-package-instance-state_Indcpamod0_keys_top)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 __self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-keys_top-SETBIT __global_state __state_length (mk-some mk-empty)
 false)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 __self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-keys_top-SETBIT __global_state __state_length (as mk-none (Maybe Empty)
)
 true)
)
)
)
)
(define-fun oracle-Indcpamod0-enc-ENCN ((__global_state (Array Int CompositionState-Indcpamod0)
)
 (__state_length Int)
 (d Bool)
 (nzero Bits_n)
 (none Bits_n)
)
 Return_Indcpamod0_enc_ENCN (let ((__self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
)
)
 (let ((__ret (oracle-Indcpamod0-keys_top-GETKEYSIN __global_state __state_length)
)
)
 (ite (return-Indcpamod0-keys_top-GETKEYSIN-is-abort __ret)
 (let ((__global_state (return-Indcpamod0-keys_top-GETKEYSIN-state __ret)
)
 (__state_length (return-Indcpamod0-keys_top-GETKEYSIN-state-length __ret)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 (composition-pkgstate-Indcpamod0-keys_top (select __global_state __state_length)
)
 __self_state (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-enc-ENCN __global_state __state_length (as mk-none (Maybe Bits_m)
)
 true)
)
)
 (let ((__global_state (return-Indcpamod0-keys_top-GETKEYSIN-state __ret)
)
 (__state_length (return-Indcpamod0-keys_top-GETKEYSIN-state-length __ret)
)
 (K (maybe-get (return-Indcpamod0-keys_top-GETKEYSIN-value __ret)
)
)
)
 (let ((r (__sample-rand-Indcpamod0-Bits_n 5 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
)
)
)
 (let ((__global_state (store __global_state __state_length (mk-composition-state-Indcpamod0 (composition-pkgstate-Indcpamod0-keys_top (select __global_state __state_length)
)
 (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (+ 1 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
)
 (ite (= (select K d)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Indcpamod0-enc-ENCN __global_state __state_length (as mk-none (Maybe Bits_m)
)
 true)
 (let ((unwrap-1 (maybe-get (select K d)
)
)
)
 (let ((c (__func-Indcpamod0-encn unwrap-1 nzero r)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 (composition-pkgstate-Indcpamod0-keys_top (select __global_state __state_length)
)
 __self_state (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-enc-ENCN __global_state __state_length (mk-some c)
 false)
)
)
)
)
)
)
)
)
)
)
)
(define-fun oracle-Indcpamod0-enc-ENCM ((__global_state (Array Int CompositionState-Indcpamod0)
)
 (__state_length Int)
 (d Bool)
 (mzero Bits_m)
 (mone Bits_m)
)
 Return_Indcpamod0_enc_ENCM (let ((__self_state (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
)
)
 (let ((__ret (oracle-Indcpamod0-keys_top-GETKEYSIN __global_state __state_length)
)
)
 (ite (return-Indcpamod0-keys_top-GETKEYSIN-is-abort __ret)
 (let ((__global_state (return-Indcpamod0-keys_top-GETKEYSIN-state __ret)
)
 (__state_length (return-Indcpamod0-keys_top-GETKEYSIN-state-length __ret)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 (composition-pkgstate-Indcpamod0-keys_top (select __global_state __state_length)
)
 __self_state (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-enc-ENCM __global_state __state_length (as mk-none (Maybe Bits_p)
)
 true)
)
)
 (let ((__global_state (return-Indcpamod0-keys_top-GETKEYSIN-state __ret)
)
 (__state_length (return-Indcpamod0-keys_top-GETKEYSIN-state-length __ret)
)
 (K (maybe-get (return-Indcpamod0-keys_top-GETKEYSIN-value __ret)
)
)
)
 (let ((r (__sample-rand-Indcpamod0-Bits_n 6 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (let ((__global_state (store __global_state __state_length (mk-composition-state-Indcpamod0 (composition-pkgstate-Indcpamod0-keys_top (select __global_state __state_length)
)
 (composition-pkgstate-Indcpamod0-enc (select __global_state __state_length)
)
 (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (+ 1 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
)
)
 (ite (= (select K d)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Indcpamod0-enc-ENCM __global_state __state_length (as mk-none (Maybe Bits_p)
)
 true)
 (let ((unwrap-1 (maybe-get (select K d)
)
)
)
 (let ((c (__func-Indcpamod0-encm unwrap-1 mzero r)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamod0 (composition-pkgstate-Indcpamod0-keys_top (select __global_state __state_length)
)
 __self_state (composition-param-Indcpamod0-m (select __global_state __state_length)
)
 (composition-param-Indcpamod0-n (select __global_state __state_length)
)
 (composition-param-Indcpamod0-p (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamod0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-3 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-4 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-5 (select __global_state __state_length)
)
 (composition-rand-Indcpamod0-6 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamod0-enc-ENCM __global_state __state_length (mk-some c)
 false)
)
)
)
)
)
)
)
)
)
)
)
(declare-fun __sample-rand-Indcpamon0-Bits_n (Int Int)
 Bits_n)
(declare-fun __func-Indcpamon0-encm (Bits_n Bits_m Bits_n)
 Bits_p)
(declare-fun __func-Indcpamon0-encn (Bits_n Bits_n Bits_n)
 Bits_m)
(declare-datatype IntermediateOracleState_Indcpamon0_indcpamon0_SMP ((oracle-intermediate-state-return_Indcpamon0_indcpamon0_SMP_0-42-2 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_SMP_0-42-2_k_ Bits_n)
 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_SMP_0-42-2_k (Maybe Bits_n)
)
)
 (oracle-intermediate-state-abort_Indcpamon0_indcpamon0_SMP_0-37-0)
 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_SMP_0-37-3 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_SMP_0-37-3_k_ Bits_n)
 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_SMP_0-37-3_k (Maybe Bits_n)
)
)
)
)
(declare-datatype IntermediateOracleState_Indcpamon0_indcpamon0_ENCN ((oracle-intermediate-state-return_Indcpamon0_indcpamon0_ENCN_0-42-3 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_ENCN_0-42-3_r Bits_n)
 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_ENCN_0-42-3_unwrap-1 Bits_n)
 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_ENCN_0-42-3_c Bits_m)
)
 (oracle-intermediate-state-abort_Indcpamon0_indcpamon0_ENCN_0-37-0)
 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_ENCN_0-37-4 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_ENCN_0-37-4_r Bits_n)
 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_ENCN_0-37-4_unwrap-1 Bits_n)
 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_ENCN_0-37-4_c Bits_m)
)
)
)
(declare-datatype IntermediateOracleState_Indcpamon0_indcpamon0_ENCM ((oracle-intermediate-state-return_Indcpamon0_indcpamon0_ENCM_0-42-3 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_ENCM_0-42-3_c Bits_p)
 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_ENCM_0-42-3_unwrap-1 Bits_n)
 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_ENCM_0-42-3_r Bits_n)
)
 (oracle-intermediate-state-abort_Indcpamon0_indcpamon0_ENCM_0-37-0)
 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_ENCM_0-37-4 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_ENCM_0-37-4_c Bits_p)
 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_ENCM_0-37-4_unwrap-1 Bits_n)
 (oracle-intermediate-state-return_Indcpamon0_indcpamon0_ENCM_0-37-4_r Bits_n)
)
)
)
(declare-datatype IntermediatePackageInstanceState_Indcpamon0_indcpamon0 ((no-intermediate-package-instance-state_Indcpamon0_indcpamon0)
 (intermediate-package-instance-state_Indcpamon0_indcpamon0_SMP (intermediate-package-instance-state-get_Indcpamon0_indcpamon0_SMP IntermediateOracleState_Indcpamon0_indcpamon0_SMP)
)
 (intermediate-package-instance-state_Indcpamon0_indcpamon0_ENCN (intermediate-package-instance-state-get_Indcpamon0_indcpamon0_ENCN IntermediateOracleState_Indcpamon0_indcpamon0_ENCN)
)
 (intermediate-package-instance-state_Indcpamon0_indcpamon0_ENCM (intermediate-package-instance-state-get_Indcpamon0_indcpamon0_ENCM IntermediateOracleState_Indcpamon0_indcpamon0_ENCM)
)
)
)
(declare-datatype State_Indcpamon0_indcpamon0 ((mk-state-Indcpamon0-indcpamon0 (state-Indcpamon0-indcpamon0-k (Maybe Bits_n)
)
 (state--intermediate-Indcpamon0-indcpamon0 IntermediatePackageInstanceState_Indcpamon0_indcpamon0)
)
)
)
(declare-datatype CompositionState-Indcpamon0 ((mk-composition-state-Indcpamon0 (composition-pkgstate-Indcpamon0-indcpamon0 State_Indcpamon0_indcpamon0)
 (composition-param-Indcpamon0-m Int)
 (composition-param-Indcpamon0-n Int)
 (composition-param-Indcpamon0-p Int)
 (composition-param-Indcpamon0-zerom Bits_m)
 (composition-param-Indcpamon0-zeron Bits_n)
 (composition-rand-Indcpamon0-0 Int)
 (composition-rand-Indcpamon0-1 Int)
 (composition-rand-Indcpamon0-2 Int)
 (composition-rand-Indcpamon0-3 Int)
)
)
)
(declare-datatype Return_Indcpamon0_indcpamon0_SMP ((mk-return-Indcpamon0-indcpamon0-SMP (return-Indcpamon0-indcpamon0-SMP-state (Array Int CompositionState-Indcpamon0)
)
 (return-Indcpamon0-indcpamon0-SMP-state-length Int)
 (return-Indcpamon0-indcpamon0-SMP-value (Maybe Empty)
)
 (return-Indcpamon0-indcpamon0-SMP-is-abort Bool)
)
)
)
(declare-datatype Return_Indcpamon0_indcpamon0_ENCN ((mk-return-Indcpamon0-indcpamon0-ENCN (return-Indcpamon0-indcpamon0-ENCN-state (Array Int CompositionState-Indcpamon0)
)
 (return-Indcpamon0-indcpamon0-ENCN-state-length Int)
 (return-Indcpamon0-indcpamon0-ENCN-value (Maybe Bits_m)
)
 (return-Indcpamon0-indcpamon0-ENCN-is-abort Bool)
)
)
)
(declare-datatype Return_Indcpamon0_indcpamon0_ENCM ((mk-return-Indcpamon0-indcpamon0-ENCM (return-Indcpamon0-indcpamon0-ENCM-state (Array Int CompositionState-Indcpamon0)
)
 (return-Indcpamon0-indcpamon0-ENCM-state-length Int)
 (return-Indcpamon0-indcpamon0-ENCM-value (Maybe Bits_p)
)
 (return-Indcpamon0-indcpamon0-ENCM-is-abort Bool)
)
)
)
; Composition of Indcpamon0
(define-fun oracle-Indcpamon0-indcpamon0-SMP ((__global_state (Array Int CompositionState-Indcpamon0)
)
 (__state_length Int)
)
 Return_Indcpamon0_indcpamon0_SMP (let ((__self_state (composition-pkgstate-Indcpamon0-indcpamon0 (select __global_state __state_length)
)
)
)
 (ite (= (state-Indcpamon0-indcpamon0-k __self_state)
 (as mk-none (Maybe Bits_n)
)
)
 (let ((k_ (__sample-rand-Indcpamon0-Bits_n 1 (composition-rand-Indcpamon0-1 (select __global_state __state_length)
)
)
)
)
 (let ((__global_state (store __global_state __state_length (mk-composition-state-Indcpamon0 (composition-pkgstate-Indcpamon0-indcpamon0 (select __global_state __state_length)
)
 (composition-param-Indcpamon0-m (select __global_state __state_length)
)
 (composition-param-Indcpamon0-n (select __global_state __state_length)
)
 (composition-param-Indcpamon0-p (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-0 (select __global_state __state_length)
)
 (+ 1 (composition-rand-Indcpamon0-1 (select __global_state __state_length)
)
)
 (composition-rand-Indcpamon0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-3 (select __global_state __state_length)
)
)
)
)
)
 (let ((__self_state (mk-state-Indcpamon0-indcpamon0 (mk-some k_)
 no-intermediate-package-instance-state_Indcpamon0_indcpamon0)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamon0 __self_state (composition-param-Indcpamon0-m (select __global_state __state_length)
)
 (composition-param-Indcpamon0-n (select __global_state __state_length)
)
 (composition-param-Indcpamon0-p (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-3 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamon0-indcpamon0-SMP __global_state __state_length (mk-some mk-empty)
 false)
)
)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamon0 __self_state (composition-param-Indcpamon0-m (select __global_state __state_length)
)
 (composition-param-Indcpamon0-n (select __global_state __state_length)
)
 (composition-param-Indcpamon0-p (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-3 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamon0-indcpamon0-SMP __global_state __state_length (as mk-none (Maybe Empty)
)
 true)
)
)
)
)
(define-fun oracle-Indcpamon0-indcpamon0-ENCN ((__global_state (Array Int CompositionState-Indcpamon0)
)
 (__state_length Int)
 (nzero Bits_n)
 (none Bits_n)
)
 Return_Indcpamon0_indcpamon0_ENCN (let ((__self_state (composition-pkgstate-Indcpamon0-indcpamon0 (select __global_state __state_length)
)
)
)
 (ite (not (= (state-Indcpamon0-indcpamon0-k __self_state)
 (as mk-none (Maybe Bits_n)
)
)
)
 (let ((r (__sample-rand-Indcpamon0-Bits_n 2 (composition-rand-Indcpamon0-2 (select __global_state __state_length)
)
)
)
)
 (let ((__global_state (store __global_state __state_length (mk-composition-state-Indcpamon0 (composition-pkgstate-Indcpamon0-indcpamon0 (select __global_state __state_length)
)
 (composition-param-Indcpamon0-m (select __global_state __state_length)
)
 (composition-param-Indcpamon0-n (select __global_state __state_length)
)
 (composition-param-Indcpamon0-p (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-1 (select __global_state __state_length)
)
 (+ 1 (composition-rand-Indcpamon0-2 (select __global_state __state_length)
)
)
 (composition-rand-Indcpamon0-3 (select __global_state __state_length)
)
)
)
)
)
 (ite (= (state-Indcpamon0-indcpamon0-k __self_state)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Indcpamon0-indcpamon0-ENCN __global_state __state_length (as mk-none (Maybe Bits_m)
)
 true)
 (let ((unwrap-1 (maybe-get (state-Indcpamon0-indcpamon0-k __self_state)
)
)
)
 (let ((c (__func-Indcpamon0-encn unwrap-1 nzero r)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamon0 __self_state (composition-param-Indcpamon0-m (select __global_state __state_length)
)
 (composition-param-Indcpamon0-n (select __global_state __state_length)
)
 (composition-param-Indcpamon0-p (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-3 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamon0-indcpamon0-ENCN __global_state __state_length (mk-some c)
 false)
)
)
)
)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamon0 __self_state (composition-param-Indcpamon0-m (select __global_state __state_length)
)
 (composition-param-Indcpamon0-n (select __global_state __state_length)
)
 (composition-param-Indcpamon0-p (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-3 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamon0-indcpamon0-ENCN __global_state __state_length (as mk-none (Maybe Bits_m)
)
 true)
)
)
)
)
(define-fun oracle-Indcpamon0-indcpamon0-ENCM ((__global_state (Array Int CompositionState-Indcpamon0)
)
 (__state_length Int)
 (mzero Bits_m)
 (mone Bits_m)
)
 Return_Indcpamon0_indcpamon0_ENCM (let ((__self_state (composition-pkgstate-Indcpamon0-indcpamon0 (select __global_state __state_length)
)
)
)
 (ite (not (= (state-Indcpamon0-indcpamon0-k __self_state)
 (as mk-none (Maybe Bits_n)
)
)
)
 (let ((r (__sample-rand-Indcpamon0-Bits_n 3 (composition-rand-Indcpamon0-3 (select __global_state __state_length)
)
)
)
)
 (let ((__global_state (store __global_state __state_length (mk-composition-state-Indcpamon0 (composition-pkgstate-Indcpamon0-indcpamon0 (select __global_state __state_length)
)
 (composition-param-Indcpamon0-m (select __global_state __state_length)
)
 (composition-param-Indcpamon0-n (select __global_state __state_length)
)
 (composition-param-Indcpamon0-p (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-2 (select __global_state __state_length)
)
 (+ 1 (composition-rand-Indcpamon0-3 (select __global_state __state_length)
)
)
)
)
)
)
 (ite (= (state-Indcpamon0-indcpamon0-k __self_state)
 (as mk-none (Maybe Bits_n)
)
)
 (mk-return-Indcpamon0-indcpamon0-ENCM __global_state __state_length (as mk-none (Maybe Bits_p)
)
 true)
 (let ((unwrap-1 (maybe-get (state-Indcpamon0-indcpamon0-k __self_state)
)
)
)
 (let ((c (__func-Indcpamon0-encm unwrap-1 mzero r)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamon0 __self_state (composition-param-Indcpamon0-m (select __global_state __state_length)
)
 (composition-param-Indcpamon0-n (select __global_state __state_length)
)
 (composition-param-Indcpamon0-p (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-3 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamon0-indcpamon0-ENCM __global_state __state_length (mk-some c)
 false)
)
)
)
)
)
)
 (let ((__global_state (store __global_state (+ 1 __state_length)
 (mk-composition-state-Indcpamon0 __self_state (composition-param-Indcpamon0-m (select __global_state __state_length)
)
 (composition-param-Indcpamon0-n (select __global_state __state_length)
)
 (composition-param-Indcpamon0-p (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zerom (select __global_state __state_length)
)
 (composition-param-Indcpamon0-zeron (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-0 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-1 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-2 (select __global_state __state_length)
)
 (composition-rand-Indcpamon0-3 (select __global_state __state_length)
)
)
)
)
 (__state_length (+ 1 __state_length)
)
)
 (mk-return-Indcpamon0-indcpamon0-ENCM __global_state __state_length (as mk-none (Maybe Bits_p)
)
 true)
)
)
)
)
(declare-const state-left (Array Int CompositionState-Indcpamod0)
)
(declare-const state-right (Array Int CompositionState-Indcpamon0)
)
(declare-const state-length-left-old Int)
(declare-const state-length-left-new Int)
(declare-const state-length-right-old Int)
(declare-const state-length-right-new Int)
(declare-const arg-SETBIT-zz Bool)
(declare-const arg-ENCN-d Bool)
(declare-const arg-ENCN-nzero Bits_n)
(declare-const arg-ENCN-none Bits_n)
(declare-const arg-ENCM-d Bool)
(declare-const arg-ENCM-mzero Bits_m)
(declare-const arg-ENCM-mone Bits_m)
(declare-const return-left-keys_top-GETAOUT Return_Indcpamod0_keys_top_GETAOUT)
(assert (= return-left-keys_top-GETAOUT (oracle-Indcpamod0-keys_top-GETAOUT state-left state-length-left-old)
)
)
(declare-const return-left-keys_top-SETBIT Return_Indcpamod0_keys_top_SETBIT)
(assert (= return-left-keys_top-SETBIT (oracle-Indcpamod0-keys_top-SETBIT state-left state-length-left-old arg-SETBIT-zz)
)
)
(declare-const return-left-enc-ENCN Return_Indcpamod0_enc_ENCN)
(assert (= return-left-enc-ENCN (oracle-Indcpamod0-enc-ENCN state-left state-length-left-old arg-ENCN-d arg-ENCN-nzero arg-ENCN-none)
)
)
(declare-const return-left-enc-ENCM Return_Indcpamod0_enc_ENCM)
(assert (= return-left-enc-ENCM (oracle-Indcpamod0-enc-ENCM state-left state-length-left-old arg-ENCM-d arg-ENCM-mzero arg-ENCM-mone)
)
)
(declare-const return-right-indcpamon0-SMP Return_Indcpamon0_indcpamon0_SMP)
(assert (= return-right-indcpamon0-SMP (oracle-Indcpamon0-indcpamon0-SMP state-right state-length-right-old)
)
)
(declare-const return-right-indcpamon0-ENCN Return_Indcpamon0_indcpamon0_ENCN)
(assert (= return-right-indcpamon0-ENCN (oracle-Indcpamon0-indcpamon0-ENCN state-right state-length-right-old arg-ENCN-nzero arg-ENCN-none)
)
)
(declare-const return-right-indcpamon0-ENCM Return_Indcpamon0_indcpamon0_ENCM)
(assert (= return-right-indcpamon0-ENCM (oracle-Indcpamon0-indcpamon0-ENCM state-right state-length-right-old arg-ENCM-mzero arg-ENCM-mone)
)
)
(declare-const randctr-left-1 Int)
(assert (= randctr-left-1 (composition-rand-Indcpamod0-1 (select state-left state-length-left-old)
)
)
)
(declare-const randval-left-1 Bits_n)
(assert (= randval-left-1 (__sample-rand-Indcpamod0-Bits_n 1 (+ 0 randctr-left-1)
)
)
)
(declare-const randctr-left-2 Int)
(assert (= randctr-left-2 (composition-rand-Indcpamod0-2 (select state-left state-length-left-old)
)
)
)
(declare-const randval-left-2 Bits_n)
(assert (= randval-left-2 (__sample-rand-Indcpamod0-Bits_n 2 (+ 0 randctr-left-2)
)
)
)
(declare-const randctr-left-3 Int)
(assert (= randctr-left-3 (composition-rand-Indcpamod0-3 (select state-left state-length-left-old)
)
)
)
(declare-const randval-left-3 Bits_n)
(assert (= randval-left-3 (__sample-rand-Indcpamod0-Bits_n 3 (+ 0 randctr-left-3)
)
)
)
(declare-const randctr-left-4 Int)
(assert (= randctr-left-4 (composition-rand-Indcpamod0-4 (select state-left state-length-left-old)
)
)
)
(declare-const randval-left-4 Bits_n)
(assert (= randval-left-4 (__sample-rand-Indcpamod0-Bits_n 4 (+ 0 randctr-left-4)
)
)
)
(declare-const randctr-left-5 Int)
(assert (= randctr-left-5 (composition-rand-Indcpamod0-5 (select state-left state-length-left-old)
)
)
)
(declare-const randval-left-5 Bits_n)
(assert (= randval-left-5 (__sample-rand-Indcpamod0-Bits_n 5 (+ 0 randctr-left-5)
)
)
)
(declare-const randctr-left-6 Int)
(assert (= randctr-left-6 (composition-rand-Indcpamod0-6 (select state-left state-length-left-old)
)
)
)
(declare-const randval-left-6 Bits_n)
(assert (= randval-left-6 (__sample-rand-Indcpamod0-Bits_n 6 (+ 0 randctr-left-6)
)
)
)
(declare-const randctr-right-1 Int)
(assert (= randctr-right-1 (composition-rand-Indcpamon0-1 (select state-right state-length-right-old)
)
)
)
(declare-const randval-right-1 Bits_n)
(assert (= randval-right-1 (__sample-rand-Indcpamon0-Bits_n 1 (+ 0 randctr-right-1)
)
)
)
(declare-const randctr-right-2 Int)
(assert (= randctr-right-2 (composition-rand-Indcpamon0-2 (select state-right state-length-right-old)
)
)
)
(declare-const randval-right-2 Bits_n)
(assert (= randval-right-2 (__sample-rand-Indcpamon0-Bits_n 2 (+ 0 randctr-right-2)
)
)
)
(declare-const randctr-right-3 Int)
(assert (= randctr-right-3 (composition-rand-Indcpamon0-3 (select state-right state-length-right-old)
)
)
)
(declare-const randval-right-3 Bits_n)
(assert (= randval-right-3 (__sample-rand-Indcpamon0-Bits_n 3 (+ 0 randctr-right-3)
)
)
)
(push 1)(assert
(and
(= state-length-left-old 1)
(= state-length-right-old 1)
)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   Randomness naming
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-const randval-left-5+1 Bits_n)
(assert (= randval-left-5+1 (__sample-rand-Left-Bits_n 5 (+ 1 randctr-left-5)
)))

(declare-const randval-left-5+2 Bits_n)
(assert (= randval-left-5+2 (__sample-rand-Left-Bits_n 5 (+ 2 randctr-left-5)
)))

(declare-const randval-left-5+3 Bits_n)
(assert (= randval-left-5+3 (__sample-rand-Left-Bits_n 5 (+ 3 randctr-left-5)
)))

(declare-const randval-left-6+1 Bits_n)
(assert (= randval-left-6+1 (__sample-rand-Left-Bits_n 6 (+ 1 randctr-left-6)
)))

(declare-const randval-left-6+2 Bits_n)
(assert (= randval-left-6+2 (__sample-rand-Left-Bits_n 6 (+ 2 randctr-left-6)
)))

(declare-const randval-left-6+3 Bits_n)
(assert (= randval-left-6+3 (__sample-rand-Left-Bits_n 6 (+ 3 randctr-left-6)
)))

(declare-const randval-left-GETA-1 Bits_n)
(assert (= randval-left-GETA-1  (__sample-rand-Left-Bits_n  1 randctr-left-1
)))

(declare-const randval-right-GETA-1 Bits_n)
(assert (= randval-right-GETA-1 (__sample-rand-Right-Bits_n 1 randctr-right-1
)))

(declare-const randval-left-GETA-2 Bits_n)
(assert (= randval-left-GETA-2  (__sample-rand-Left-Bits_n  2 randctr-left-2
)))

(declare-const randval-right-GETA-2 Bits_n)
(assert (= randval-right-GETA-2 (__sample-rand-Right-Bits_n 2 randctr-right-2
)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   Randomness mapping
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define-fun randomness-mapping-GETAOUT () Bool
(and
;equality of values of the sample functions for the lower Key package
(= randval-left-5    randval-right-7)
(= randval-left-6    randval-right-8)

;equality of values of the sample functions for the encryptions
(= randval-left-9    randval-right-9)
(= randval-left-11   randval-right-10)
(= randval-left-9+1  randval-right-11)
(= randval-left-11+1 randval-right-12)
(= randval-left-9+2  randval-right-11)
(= randval-left-11+2 randval-right-12)
(= randval-left-9+3  randval-right-13)
(= randval-left-11+3 randval-right-14)
)
)

(define-fun randomness-mapping-SETBIT () Bool
true
)

(define-fun randomness-mapping-GETAOUT () Bool
(and
(= randval-left-GETA-1 randval-right-GETA-1)
(= randval-left-GETA-2 randval-right-GETA-2)
)
)

(define-fun randomness-mapping-GETKEYSIN () Bool
true
)




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   op is total (special-purpose glue)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(assert
(and
(not (= (select arg-GBLG-op (mk-tuple2 true  true ))(as mk-none (Maybe Bool))))
(not (= (select arg-GBLG-op (mk-tuple2 true  false))(as mk-none (Maybe Bool))))
(not (= (select arg-GBLG-op (mk-tuple2 false true ))(as mk-none (Maybe Bool))))
(not (= (select arg-GBLG-op (mk-tuple2 false false))(as mk-none (Maybe Bool))))
))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   Datatypes to extract key package state
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(declare-datatype
  State_keys
  (
    (mk-state-keys
      (state-keys-T (Array Int (Maybe (Array Bool (Maybe Bits_n)))))
      (state-keys-z (Array Int (Maybe Bool)))
      (state-keys-flag (Array Int (Maybe Bool))))))

(define-fun project-State_Left_keys_top ((in State_Left_keys_top)) State_keys
  (mk-state-keys (state-Left-keys_top-T    in)
                 (state-Left-keys_top-z    in)
                 (state-Left-keys_top-flag in)))

(define-fun project-State_Right_keys_top ((in State_Right_keys_top)) State_keys
  (mk-state-keys (state-Right-keys_top-T    in)
                 (state-Right-keys_top-z    in)
                 (state-Right-keys_top-flag in)))

(define-fun project-State_Left_keys_bottom ((in State_Left_keys_bottom)) State_keys
  (mk-state-keys (state-Left-keys_bottom-T    in)
                 (state-Left-keys_bottom-z    in)
                 (state-Left-keys_bottom-flag in)))

(define-fun project-State_Right_keys_bottom ((in State_Right_keys_bottom)) State_keys
  (mk-state-keys (state-Right-keys_bottom-T    in)
                 (state-Right-keys_bottom-z    in)
                 (state-Right-keys_bottom-flag in)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   Well-definedness of tables
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;If T h != none => T h b != none (for both b=0 and b=1)

(define-fun well-defined ((T (Array Int (Maybe (Array Bool (Maybe Bits_n)))))) Bool
  (forall ((h Int))
    (or
      (= (select T h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
      (forall ((b Bool))
        (not
          (= (select (maybe-get (select T h)) b) (as mk-none (Maybe Bits_n)))
)))))

; captures the possible states which a Key package can be in when
; the "top" queries are GETKEYS queries 
;
(define-fun well-defined-Key-bool ((key-state State_keys)) Bool
(let ((T    (state-keys-T    key-state))
      (flag (state-keys-flag key-state))
      (z    (state-keys-z    key-state)))

; flag is true <=> key has been chosen 
(and

;If T h != none => T h b != none (for both b=0 and b=1)
(well-defined T)

(forall ((hhh Int))
(or
    (= (select flag hhh) (as mk-none (Maybe Bool)))
    (= (select flag hhh) (   mk-some        true )))
)

;If flag h != true => T h  = none
;If flag h  = true => T h != none (for both b=0 and b=1)

(forall ((hhh Int)) 
(and 
(=>
    (not (= (select flag hhh) (mk-some true)))
    (= (select T hhh) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
)
(=>
    (= (select flag hhh) (mk-some true))
    (and
       (not (= (select T hhh)                            (as mk-none (Maybe (Array Bool (Maybe Bits_n))))))
       (not (= (select (maybe-get (select T hhh)) true ) (as mk-none (Maybe Bits_n))))
       (not (= (select (maybe-get (select T hhh)) false) (as mk-none (Maybe Bits_n))))
    )
))))))

; captures the possible states which a Key package can be in when
; the "top" queries are GETA and SETBIT queries 
;
(define-fun well-defined-Key-active ((key-state State_keys)) Bool
(let ((T    (state-keys-T    key-state))
      (flag (state-keys-flag key-state))
      (z    (state-keys-z    key-state)))

(and

;If T h != none => T h b != none (for both b=0 and b=1)
(well-defined T)

(forall ((hhh Int))
(or
  (= (select flag hhh) (as mk-none (Maybe Bool)))
  (= (select flag hhh) (   mk-some        true ))))

; flag has been set  => bit has been set
(forall ((hhh Int)) (=> (=  (mk-some true ) (select flag hhh))  
                    (or (=  (mk-some true ) (select z    hhh))
                        (=  (mk-some false) (select z    hhh))
                    )))

; key has been set => flag has been set
(forall ((hhh Int)) (=>
                    (not
                    (= (select T hhh) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
                    )
                    (= (select flag hhh) (mk-some true)))
                    ))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Invariant
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; This is supposed to be an invariant
(define-fun invariant-GBLG          (
        (state-left  (Array Int CompositionState-Left ))
        (state-right (Array Int CompositionState-Right))
        (state-length-left  Int) ;old index
        (state-length-right Int) ;old index
        (state-left-new  Return_Left_gate_GBLG)
        (state-right-new Return_Right_simgate_GBLG)
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     (select state-left  state-length-left))))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    (select state-right state-length-right))))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  (select state-left  state-length-left))))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom (select state-right state-length-right))))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))


(define-fun invariant-SETBIT      (
        (state-left  (Array Int CompositionState-Left ))
        (state-right (Array Int CompositionState-Right))
        (state-length-left  Int) ;old index
        (state-length-right Int) ;old index
        (state-left-new  Return_Left_keys_top_SETBIT)
        (state-right-new Return_Right_keys_top_SETBIT)
        (h Int)
        (zz Bool))
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     (select state-left  state-length-left))))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    (select state-right state-length-right))))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  (select state-left  state-length-left))))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom (select state-right state-length-right))))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))


(define-fun invariant-SETBIT-post          (
        (state-left  (Array Int CompositionState-Left ))
        (state-right (Array Int CompositionState-Right))
        (state-length-left  Int) ;old index
        (state-length-right Int) ;old index
        (state-left-new  Return_Left_keys_top_SETBIT)
        (state-right-new Return_Right_keys_top_SETBIT)
        (h Int)
        (zz Bool))
    Bool
(let (
      (state-left-nov  (select  (return-Left-keys_top-SETBIT-state        state-left-new)
                                (return-Left-keys_top-SETBIT-state-length state-left-new)
                                ))
      (state-right-nov (select  (return-Right-keys_top-SETBIT-state        state-right-new)
                                (return-Right-keys_top-SETBIT-state-length state-right-new)
                                ))
     )

    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left-nov  )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right-nov )))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left-nov  )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right-nov )))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
)))))))

(define-fun invariant-GETAOUT      (
        (state-left  (Array Int CompositionState-Left ))
        (state-right (Array Int CompositionState-Right))
        (state-length-left  Int) ;old index
        (state-length-right Int) ;old index
        (state-left-new  Return_Left_keys_top_GETAOUT)
        (state-right-new Return_Right_keys_top_GETAOUT)
        (h Int))
    Bool
    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     (select state-left  state-length-left))))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    (select state-right state-length-right))))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  (select state-left  state-length-left))))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom (select state-right state-length-right))))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
))))))


(define-fun invariant-GETAOUT-post          (
        (state-left  (Array Int CompositionState-Left ))
        (state-right (Array Int CompositionState-Right))
        (state-length-left  Int) ;old index
        (state-length-right Int) ;old index
        (state-left-new  Return_Left_keys_top_GETAOUT)
        (state-right-new Return_Right_keys_top_GETAOUT)
        (h Int))
    Bool
(let (
      (state-left-nov  (select  (return-Left-keys_top-GETAOUT-state        state-left-new)
                                (return-Left-keys_top-GETAOUT-state-length state-left-new)
                                ))
      (state-right-nov (select  (return-Right-keys_top-GETAOUT-state        state-right-new)
                                (return-Right-keys_top-GETAOUT-state-length state-right-new)
                                ))
     )

    (let

; state of the key packages
(
(top-key-package-left  (project-State_Left_keys_top      (composition-pkgstate-Left-keys_top     state-left-nov  )))
(top-key-package-right (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top    state-right-nov )))
(bot-key-package-left  (project-State_Left_keys_bottom   (composition-pkgstate-Left-keys_bottom  state-left-nov  )))
(bot-key-package-right (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom state-right-nov )))
)

(let

; table of the bottom key package
(
(table-bot-left  (state-keys-T    bot-key-package-left))
(table-bot-right (state-keys-T    bot-key-package-right))
(    z-bot-left  (state-keys-z    bot-key-package-left))
(    z-bot-right (state-keys-z    bot-key-package-right))
(flag-bot-left   (state-keys-flag bot-key-package-left))
(flag-bot-right  (state-keys-flag bot-key-package-right))
)

(and
;top key package states are equal
(= top-key-package-left top-key-package-right)

;for bottom key package, tables are equal
(= table-bot-left table-bot-right)

;top key package state is "good"
(well-defined-Key-active top-key-package-left )
(well-defined-Key-active top-key-package-right)

;bottom key packages state is "good"
(well-defined-Key-bool   bot-key-package-left )
(well-defined-Key-active bot-key-package-right)
(forall ((h Int))
(and
    (= (select  flag-bot-left  h) 
       (select  flag-bot-right h))
(=> (= (select table-bot-left  h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (= (select  flag-bot-left  h) (   mk-some        false)))
(=> (= (select table-bot-right h) (as mk-none (Maybe (Array Bool (Maybe Bits_n)))))
    (and
    (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool )))))
(=> (= (select  flag-bot-right h) (   mk-some        false))
    (= (select     z-bot-right h) (as mk-none (Maybe Bool ))))
)))))))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    LEFT aborts
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



(define-fun left-all-aborts          (
        (state-left (Array Int CompositionState-Left))
        (state-right (Array Int CompositionState-Right))
        (state-length-left Int)  ; old index
        (state-length-right Int) ; old index
        (state-left-NEU Return_Left_gate_GBLG)      
        (state-right-NEU Return_Right_simgate_GBLG) 
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool


    (let (
      (state-left-1  (select  (return-Left-gate-GBLG-state state-left-NEU)
                                1))
    )

  (let

; state of the key packages
(
(top-key-package-left-1     (project-State_Left_keys_top     (composition-pkgstate-Left-keys_top     state-left-1)))
(bottom-key-package-left-1  (project-State_Left_keys_bottom  (composition-pkgstate-Left-keys_bottom  state-left-1)))
)

(let

; table of the top key package
;        T: Table(Integer,Table(Bool,Bits(n))),
;        z: Table(Integer,Bool),
(
(T-top-left-1        (state-keys-T       top-key-package-left-1))
(z-top-left-1        (state-keys-z       top-key-package-left-1))
(flag-top-left-1     (state-keys-flag    top-key-package-left-1))
(flag-bot-left-1     (state-keys-flag bottom-key-package-left-1))
)

;;; if l is undefined, then abort
(=>
(or
(= (select    z-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l)    (mk-some        false))
(= (select    z-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r)    (mk-some        false))
(= (select flag-bot-left-1 j)    (mk-some        true ))
)
(= (return-Left-gate-GBLG-is-abort state-left-NEU) true)
)))))

(define-fun left-inverse-all-aborts          (
        (state-left  (Array Int CompositionState-Left))
        (state-right (Array Int CompositionState-Right))
        (state-length-left  Int) ; old index
        (state-length-right Int) ; old index
        (state-left-NEU  Return_Left_gate_GBLG)      
        (state-right-NEU Return_Right_simgate_GBLG) 
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool


    (let (
      (state-left-1  (select  (return-Left-gate-GBLG-state state-left-NEU)
                                ;(return-Left-gate-GBLG-state-length state-left-NEU)
                                1))
    )

  (let

; state of the key packages
(
(top-key-package-left-1     (project-State_Left_keys_top     (composition-pkgstate-Left-keys_top     state-left-1)))
(bottom-key-package-left-1  (project-State_Left_keys_bottom  (composition-pkgstate-Left-keys_bottom  state-left-1)))
;(top-key-package-left-2     (project-State_Left_keys_top  (composition-pkgstate-Left-keys_top state-left-2)))
)

(let

; table of the top key package
;        T: Table(Integer,Table(Bool,Bits(n))),
;        z: Table(Integer,Bool),
(
(T-top-left-1        (state-keys-T    top-key-package-left-1))
(z-top-left-1        (state-keys-z    top-key-package-left-1))
(flag-top-left-1     (state-keys-flag top-key-package-left-1))
(flag-bot-left-1  (state-keys-flag bottom-key-package-left-1))
)

;;; abort => z[l] or z[r] is undefined or flag[j]=true
(=>
(= (return-Left-gate-GBLG-is-abort state-left-NEU) true)
(or
(= (select    z-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 l)    (mk-some        false))
(= (select    z-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-left-1 r)    (mk-some        false))
(= (select flag-bot-left-1 j)    (mk-some        true ))
)
)))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    RIGHT aborts
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-fun right-all-aborts          (
        (state-left     (Array Int CompositionState-Left))
        (state-right    (Array Int CompositionState-Right))
        (state-length-left Int)  ; old index
        (state-length-right Int) ; old index
        (state-left-NEU  Return_Left_gate_GBLG)      ; old index
        (state-right-NEU Return_Right_simgate_GBLG) ; old index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool


    (let (
      (state-right-1  (select  state-right state-length-right)
                                ;(return-Left-gate-GBLG-state-length state-left-NEU)
                                ;1))
    ))

  (let

; state of the key packages
(
(bottom-key-package-right-1    (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom  state-right-1)))
(top-key-package-right-1       (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top     state-right-1)))
)


(let

; tables of the top and bottom key package
(
(   T-top-right-1  (state-keys-T       top-key-package-right-1))
(   z-top-right-1  (state-keys-z       top-key-package-right-1))
(flag-top-right-1  (state-keys-flag    top-key-package-right-1))
(flag-bot-right-1  (state-keys-flag bottom-key-package-right-1))
(   z-bot-right-1  (state-keys-z    bottom-key-package-right-1))
)

;;; if j is true, then abort
(=>
(or
(= (select    z-top-right-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 l) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 l)    (mk-some        false))
(= (select    z-top-right-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 r) (as mk-none (Maybe Bool)))
(= (select flag-top-right-1 r)    (mk-some        false))
(= (select flag-bot-right-1 j)    (mk-some        true ))
(= (select    z-bot-right-1 j)    (mk-some        true ))
(= (select    z-bot-right-1 j)    (mk-some        false))
)
(= (return-Right-simgate-GBLG-is-abort state-right-NEU) true)
)))))


(define-fun right-all-aborts-inverse          (
        (state-left        (Array Int CompositionState-Left ))
        (state-right       (Array Int CompositionState-Right))
        (state-length-left  Int) ; old index
        (state-length-right Int) ; old index
        (state-left-NEU     Return_Left_gate_GBLG)     ; contains own index
        (state-right-NEU    Return_Right_simgate_GBLG) ; contains own index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool

  (let

; state of the key packages
(
(bottom-key-package-right-1    (project-State_Right_keys_bottom  (composition-pkgstate-Right-keys_bottom  (select state-right state-length-right))))
(   top-key-package-right-1    (project-State_Right_keys_top     (composition-pkgstate-Right-keys_top     (select state-right state-length-right))))
)


(let

; table of the bottom key package
(
(   T-top-right-1     (state-keys-T       top-key-package-right-1))
(   z-top-right-1     (state-keys-z       top-key-package-right-1))
(flag-top-right-1     (state-keys-flag    top-key-package-right-1))
(flag-bottom-right-1  (state-keys-flag bottom-key-package-right-1))
(   z-bottom-right-1  (state-keys-z    bottom-key-package-right-1))
)

;;; abort => input on l or z not defined or output was already defined.
(=>
(= (return-Right-simgate-GBLG-is-abort state-right-NEU) true)
(or
(= (select    z-top-right-1    l)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    l)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    l)       (mk-some        false))
(= (select    z-top-right-1    r)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    r)    (as mk-none (Maybe Bool)))
(= (select flag-top-right-1    r)       (mk-some        false))
(= (select flag-bottom-right-1 j)       (mk-some        true ))
(= (select    z-bottom-right-1 j)       (mk-some        true ))
(= (select    z-bottom-right-1 j)       (mk-some        false))
)
))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    LEFT aborts = RIGHT aborts
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-fun aborts-equal-ENC          (
        (state-left  (Array Int CompositionState-Left))
        (state-right (Array Int CompositionState-Right))
        (state-length-left  Int) ; old index = 1
        (state-length-right Int) ; old index = 1
        (state-left-NEU Return_Left_gate_GBLG)      ; also contains new index    
        (state-right-NEU Return_Right_simgate_GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool


(= (return-Left-gate-GBLG-is-abort     state-left-NEU)
   (return-Right-simgate-GBLG-is-abort state-right-NEU))
)

(define-fun aborts-equal-SETBIT          (
        (state-left  (Array Int CompositionState-Left))
        (state-right (Array Int CompositionState-Right))
        (state-length-left  Int) ; old index = 1
        (state-length-right Int) ; old index = 1
        (state-left-NEU Return_Left_keys_top_SETBIT)      ; also contains new index    
        (state-right-NEU Return_Right_keys_top_SETBIT) ; also contains new index
        (h Int)
        (zz Bool))
        Bool


(= (return-Left-keys_top-SETBIT-is-abort     state-left-NEU)
   (return-Right-keys_top-SETBIT-is-abort state-right-NEU))
)

(define-fun aborts-equal-GETAOUT          (
        (state-left  (Array Int CompositionState-Left))
        (state-right (Array Int CompositionState-Right))
        (state-length-left  Int) ; old index = 1
        (state-length-right Int) ; old index = 1
        (state-left-NEU Return_Left_keys_top_GETAOUT)      ; also contains new index    
        (state-right-NEU Return_Right_keys_top_GETAOUT) ; also contains new index
        (h Int))
        Bool


(= (return-Left-keys_top-GETAOUT-is-abort  state-left-NEU)
   (return-Right-keys_top-GETAOUT-is-abort state-right-NEU))
)




; no-abort

(define-fun no-abort-ENC          (
        (state-left  (Array Int CompositionState-Left))
        (state-right (Array Int CompositionState-Right))
        (state-length-left  Int) ; old index = 1
        (state-length-right Int) ; old index = 1
        (state-left-NEU Return_Left_gate_GBLG)      ; also contains new index    
        (state-right-NEU Return_Right_simgate_GBLG) ; also contains new index
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool

(and
(= (return-Left-gate-GBLG-is-abort     state-left-NEU)
   false)
(= (return-Right-simgate-GBLG-is-abort     state-right-NEU)
   false)
))

(define-fun no-abort-SETBIT          (
        (state-left  (Array Int CompositionState-Left))
        (state-right (Array Int CompositionState-Right))
        (state-length-left  Int) ; old index = 1
        (state-length-right Int) ; old index = 1
        (state-left-NEU  Return_Left_keys_top_SETBIT)  ; also contains new index    
        (state-right-NEU Return_Right_keys_top_SETBIT) ; also contains new index
        (h Int)
        (zz Bool))
        Bool

(and
(= (return-Left-keys_top-SETBIT-is-abort     state-left-NEU)
   false)
(= (return-Right-keys_top-SETBIT-is-abort     state-right-NEU)
   false)
))

(define-fun no-abort-GETAOUT          (
        (state-left  (Array Int CompositionState-Left))
        (state-right (Array Int CompositionState-Right))
        (state-length-left  Int) ; old index = 1
        (state-length-right Int) ; old index = 1
        (state-left-NEU  Return_Left_keys_top_GETAOUT)  ; also contains new index    
        (state-right-NEU Return_Right_keys_top_GETAOUT) ; also contains new index
        (h Int))
        Bool

(and
(= (return-Left-keys_top-GETAOUT-is-abort     state-left-NEU)
   false)
(= (return-Right-keys_top-GETAOUT-is-abort     state-right-NEU)
   false)
))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    State lemma: top left = top right
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define-fun top-whole-left-neu-right-neu          (
        (state-left (Array Int CompositionState-Left))
        (state-right (Array Int CompositionState-Right))
        (state-length-left  Int) ;old index
        (state-length-right Int) ;old index
        (state-left-NEU Return_Left_gate_GBLG)
        (state-right-NEU Return_Right_simgate_GBLG)
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool


    (let (
      (state-left-neu (select   (return-Left-gate-GBLG-state state-left-NEU)
                                (return-Left-gate-GBLG-state-length state-left-NEU)))
      (state-right-neu (select  (return-Right-simgate-GBLG-state state-right-NEU)
                                (return-Right-simgate-GBLG-state-length state-right-NEU)))
    )

  (let

; state of the key packages
(
(   top-key-package-left-neu  (project-State_Left_keys_top     (composition-pkgstate-Left-keys_top     state-left-neu)))
(   top-key-package-right-neu (project-State_Right_keys_top    (composition-pkgstate-Right-keys_top    state-right-neu)))
(bottom-key-package-left-neu  (project-State_Left_keys_bottom  (composition-pkgstate-Left-keys_bottom  state-left-neu)))
(bottom-key-package-right-neu (project-State_Right_keys_bottom (composition-pkgstate-Right-keys_bottom state-right-neu)))
)


;;; top key packages have equal state
(= top-key-package-left-neu top-key-package-right-neu)


)))





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    State lemmas Left
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;    State lemmas Right
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Same Output 
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-fun same-output-ENC          (
        (state-left (Array Int CompositionState-Left))
        (state-right (Array Int CompositionState-Right))
        (state-length-left-old Int)
        (state-length-right-old Int)
        (state-left-NEU Return_Left_gate_GBLG)
        (state-right-NEU Return_Right_simgate_GBLG)
        (h Int)
        (l Int)
        (r Int)
        (op (Array (Tuple2 Bool Bool) (Maybe Bool)))
        (j Int))
        Bool
(=
(return-Left-gate-GBLG-value return-left-gate-GBLG)
(return-Right-simgate-GBLG-value return-right-simgate-GBLG)
)
)

(define-fun same-output-SETBIT          (
        (state-left (Array Int CompositionState-Left))
        (state-right (Array Int CompositionState-Right))
        (state-length-left-old Int)
        (state-length-right-old Int)
        (state-left-NEU Return_Left_keys_top_SETBIT)
        (state-right-NEU Return_Right_keys_top_SETBIT)
        (h Int)
        (zz Bool))
        Bool
(=
(return-Left-keys_top-SETBIT-value return-left-keys_top-SETBIT)
(return-Right-keys_top-SETBIT-value return-right-keys_top-SETBIT)
)
)

(define-fun same-output-GETAOUT          (
        (state-left (Array Int CompositionState-Left))
        (state-right (Array Int CompositionState-Right))
        (state-length-left-old Int)
        (state-length-right-old Int)
        (state-left-NEU Return_Left_keys_top_GETAOUT)
        (state-right-NEU Return_Right_keys_top_GETAOUT)
        (h Int))
        Bool
(=
(return-Left-keys_top-GETAOUT-value return-left-keys_top-GETAOUT)
(return-Right-keys_top-GETAOUT-value return-right-keys_top-GETAOUT)
)
)
;;;i: 