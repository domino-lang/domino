package OT {
    params {
        t:     Integer,
        n:     Integer,
        v:     Integer,
        q:     Integer,
        view:  fn Table(Integer,Bool),Bits(q),Integer -> (Bits(q),Table(Integer,Table(Bool,Bits(n)))),
    }

    types {
    }

    state {
        T:    Table(Integer,Table(Bool,Bits(n))),
        z:    Table(Integer,Bool),
        flag: Table(Integer,Bool),
    }

    oracle SETBIT(h: Integer, zz:Bool) -> () {
        assert (h == t);
        assert (z[h] == None as Bool);
        z[h] <- Some(zz);
        return ;
    }

    oracle VIEW() -> Bits(q) {
        for i: 1<= i <= t {
            assert not (z[i] == None as Bool);
            flag[i] <- Some(true);
                          }
        r <-$ Bits(q); 
        tmp <- view(z,r,t);
        (vw,keys) <- parse tmp;
        T <- keys;
        return vw;
    }

    oracle GETKEYSIN(h: Integer) -> Table(Bool,Bits(n)) {
        assert (flag[h]==Some(true));
        Z <- Unwrap(T[h]);
        return Z;
    }

}
