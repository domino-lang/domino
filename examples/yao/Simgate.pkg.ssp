package Simgate {
    params {
        n: Integer,
        m: Integer,
        p: Integer,
        encn: fn Bits(n),Bits(n),Bits(n) -> Bits(m),
        encm: fn Bits(n),Bits(m),Bits(n) -> Bits(p),
        zeron: Bits(n),
        zerom: Bits(m),
    }

    state {
    }

       import oracles {
        GETAIN(h: Integer) -> Bits(n),
        GETINAIN(h: Integer) -> Bits(n),
        EVAL(j: Integer,l: Integer,r: Integer,op: fn (Bool,Bool) -> Bool) -> (),
        GETAOUT(h: Integer) -> Bits(n),
    }


    oracle GBLG(h: Integer, l: Integer, r: Integer, op: fn (Bool,Bool) -> Bool, j: Integer) -> Table(Bits(p),Bool) {
        _ <- invoke EVAL(j,l,r,op);
        Sl[true] <- invoke GETAIN(l);
        Sl[false] <- invoke GETINAIN(l);
        Sr[true] <- invoke GETAIN(r);
        Sr[true] <- invoke GETINAIN(r);
        Sj[false] <- invoke GETAOUT(j);
        dl <- false;
        dr <- false;
           kl <- Sl[dl];
           kr <- Sr[dr];
           if ((not dl) and (not dr))
              {kj <- Sj[false];}
           rin <-$ Bits(n);
           rout <-$ Bits(n);
           cin  <- encn(kr,kj,rin);
           cout  <- encm(kl,cin,rout);
           C[cout] <- true;
        dl <- true;
        dr <- false;
           kl <- Sl[dl];
           kr <- Sr[dr];
           if ((not dl) and (not dr))
              {kj <- Sj[false];}
           rin <-$ Bits(n);
           rout <-$ Bits(n);
           cin  <- encn(kr,kj,rin);
           cout  <- encm(kl,cin,rout);
           C[cout] <- true;
        dl <- false;
        dr <- true;
           kl <- Sl[dl];
           kr <- Sr[dr];
           if ((not dl) and (not dr))
              {kj <- Sj[false];}
           else {kj <- zeron;}
           rin <-$ Bits(n);
           rout <-$ Bits(n);
           cin  <- encn(kr,kj,rin);
           cout  <- encm(kl,cin,rout);
           C[cout] <- true;
        dl <- true;
        dr <- true;
           kl <- Sl[dl];
           kr <- Sr[dr];
           if ((not dl) and (not dr))
              {kj <- Sj[false];}
           else {kj <- zeron;}
           rin <-$ Bits(n);
           rout <-$ Bits(n);
           cin  <- encn(kr,kj,rin);
           cout  <- encm(kl,cin,rout);
           C[cout] <- true;
        return C;
    }

}