WHITESPACE = _{ " " | "\r" | "\n" | "\t" }

kw_package = { "package" }
kw_params = { "params" }
kw_state = { "state" }
kw_import = { "import" }
kw_oracles = { "oracles" }
kw_oracle = { "oracle" }
kw_return = { "return" }
kw_abort = { "abort" }


package = { kw_package ~ identifier ~ "{" ~ package_spec_list ~ "}" }

package_spec_list = { package_spec* }

package_spec = {
    params | state | import_oracles | oracle_def
}

params = { kw_params ~ ("{" ~ decl_list ~ "}" | "{" ~ "}") }
decl_list = { decl_spec ~ ( "," ~ decl_spec)* ~ ","? }
decl_spec = { identifier ~ ":" ~ tipe  }

countspec = { identifier | num | "*" }

tipe = { "Integer" | "String" | "Bool" | type_bits | type_maybe | type_fn | type_tuple | type_table |type_list | type_empty }
    type_bits = { "Bits(" ~ countspec ~ ")" }
    type_maybe = { "Maybe(" ~ tipe ~ ")" }
    type_fn = { "fn" ~ fn_arglist ~ "->" ~ tipe }
        fn_arglist = { fn_arg_spec ~ ( "," ~ fn_arg_spec )* }
        fn_arg_spec = { ( identifier ~ ":" )? ~ tipe }
    type_tuple = { "(" ~ tipe ~ ( "," ~ tipe )* ~ ")"}
    type_empty = { "()" }
    type_list = { "List(" ~ tipe ~ ")"}
    type_table = { "Table(" ~ tipe ~ "," ~ tipe ~ ")" }

state = { kw_state ~ "{" ~ decl_list? ~ "}"  }

import_oracles = {kw_import ~ kw_oracles ~ ( "{" ~ ( oracle_sig ~ ("," ~ oracle_sig)* ~ ","? )? ~ "}" )  }
oracle_sig = { identifier ~ "(" ~ fn_arglist? ~ ")" ~ ("->" ~ tipe)? }

oracle_def = { kw_oracle ~ oracle_sig ~ "{" ~ code ~ "}" }


identifier = { (ASCII_ALPHA | "_")+ }
num = { ASCII_DIGIT+ }


code = { (stmt )* }
stmt = { assign | return_stmt | abort | ite}

ite = {"if" ~ expression ~ "{" ~ code ~ "}" ~ ( "else" ~ "{" ~ code ~ "}" )? }

assign = { identifier ~ "<-" ~ expression ~ ";" }
return_stmt = { kw_return ~ expression ~ ";" }
abort = { kw_abort ~ ";" }

expression = {expr_equals | expr_not_equals | fn_call | table_access | identifier }

table_access = { identifier ~ "[" ~ expression ~ "]" }
fn_call =  { identifier ~ "(" ~ fn_call_arglist? ~ ")" }
fn_call_arglist = { expression ~ ( "," ~ expression)* }
expr_equals     = { "("  ~ expression ~ ("==" ~ expression)* ~ ")" }
expr_not_equals = { "("  ~ expression ~ ("!=" ~ expression)* ~ ")" }