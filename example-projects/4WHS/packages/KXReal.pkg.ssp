package KXReal {
    params {
        n: Integer,
        zeron: Bits(n),
        prf: fn Bits(n), Integer, Integer, Bits(n), Bits(n) -> (Bits(n), Bits(n)),
        mac: fn Bits(n), Bits(n), Integer -> Bits(n),
    }
    
    state {
          LTK:   Table(Integer, Bits(n)),       /* administrative kid, keys    */
          H:     Table(Integer, Bool),          /* administrative kid, honesty */
          ctr_:  Integer,                       /* administrative sid  */
          kid_:  Integer,                       /* administrative kid  */
          Keys:  Table((Integer,Integer,Maybe(Bits(n)),Maybe(Bits(n)),Maybe(Bits(n))),(Bits(n),Maybe(Bool))), /* session key table  */
          State: Table(Integer,
                  /*    administrative sid  */
                (
                 Integer,
                  /*    ID of owner of the session */
                 Bool,
                  /*    false: initiator, 
                        true : responder,*/ 
                 Integer,
                  /* Intended Peer */
                 Bool,
                  /*    false: initiator, 
                        true : responder,*/ 
                 Bits(n),
                  /*    ltk          */
                 Maybe(Bool),
                  /* None: running, 
                        true: accepted, 
                        false: rejected   */
                 Maybe(Bits(n)),
                        /* session key */
                 Maybe(Bits(n)),
                        /* initiator nonce */
                 Maybe(Bits(n)),
                        /* responder nonce */
                 Maybe(Bits(n)),
                        /* MAC key */
                 Maybe((Integer,Integer,Maybe(Bits(n)),Maybe(Bits(n)),Maybe(Bits(n)))),
                        /* SID */
                 Integer))
                        /* nbr of messages sent */

          }

              import oracles {
        Set(sid: (Integer,Integer,Maybe(Bits(n)),Maybe(Bits(n)),Maybe(Bits(n))), k: Bits(n)),
    }

oracle NewKey(ltk: Maybe(Bits(n))) -> Integer {
      kid_ <- (kid_ + 1);
      if (ltk == None)
      {
        ltk_ <-$Bits(n);
        LTK[kid_] <- Some(ltk_);
        H[kid_]   <- Some(true); 
      }
      else {
        LTK[kid_] <- ltk;
        H[kid_]   <- Some(false);}
      return kid_;
    }


oracle NewSession(U: Integer, u: Bool, V: Integer, v: Bool, kid: Integer) -> Integer {
        assert not (u == v);            /* Different roles */
        assert not (LTK[kid] == None);  /* key exists */
        ctr_        <- (ctr_ + 1) ; 
        ltk         <- Unwrap(LTK[kid]);
        State[ctr_] <- Some((U,u,V,v,ltk,None,None,None,None,None,None,0));
        return ctr_;
    }

oracle Send1(ctr: Integer) -> Bits(n)
    {
        assert not (State[ctr] == None);     /* session has been initialized */
        (U,u,V,v,ltk,acc,k,ni_,nr,kmac,sid,mess) <- parse Unwrap(State[ctr]);
        assert (u == false);                 /* session belongs to initiator */
        assert (mess == 0);                  /* session has not yet sent its first message */
        assert (acc  == None );              /* session is still running           */
        ni         <-$ Bits(n);
        State[ctr] <-  Some((U,u,V,v,ltk,acc,k,Some(ni),nr,kmac,sid,1));
        return ni;
    } 

oracle Send2(ctr: Integer, ni: Bits(n)) -> (Bits(n),Bits(n))
    {
        assert not (State[ctr] == None);     /* session has been initialized */
        (V,v,U,u,ltk,acc,k_,ni_,nr_,kmac_,sid_,mess)   <- parse Unwrap(State[ctr]);
        assert (v    == true );              /* session belongs to responder */
        assert (mess == 0    );              /* session has not yet sent its first message */
        assert (acc  == None );              /* session is still running           */
        nr         <-$ Bits(n);
        (k, kmac)  <-  parse prf(U,V,ni,nr); /* need role agreement here, to be fixed */
        tau        <-  mac(kmac,U,V,ni,nr,2);
        sid        <- (U,V,Some(ni),Some(nr),Some(tau));
        State[ctr] <-  Some((V,v,U,u,ltk,acc,Some(k),Some(ni),Some(nr),Some(kmac),Some(sid),1));
        return (nr,tau);
    } 

oracle Send3(ctr: Integer, nr: Bits(n), tau: Bits(n)) -> (Bits(n), Bits(n))
    {
        assert not (State[ctr] == None);    /* session has been initialized */
        (U,u,V,v,ltk,acc,k_,ni,nr_,kmac_,sid_,mess)     <- parse Unwrap(State[ctr]);
        assert (u    == false);              /* session belongs to initiator       */
        assert (mess == 1);                  /* session has sent its first message */
        assert (acc  == None);               /* session is still running           */
        (k, kmac)  <- parse prf(U,V,Unwrap(ni),nr);
        if not (mac(kmac,U,V,Unwrap(ni),nr,2) == tau) {return (zeron,zeron);}
        tau_       <- mac(kmac,U,V,Unwrap(ni),nr,3);
        sid        <- (U,V,ni,Some(nr),Some(tau));
        State[ctr] <- Some((U,u,V,v,ltk,Some(true),Some(k),ni,Some(nr),Some(kmac),Some(sid),2));
        entry      <- Keys[sid];
        k__        <- Unwrap(k);
        assert ((entry == None) or 
                (Unwrap(entry) == (k__,Some(true )  ))   or
                (Unwrap(entry) == (k__,Some(false)  ))   or
                (Unwrap(entry) == (k__,None as Bool ))
               );
        if (entry == None)
            {
        Keys[sid]  <- Some((k__,None as Bool));
            }
        return (Unwrap(ni),tau_);
    } 

oracle Send4(ctr: Integer, ni: Bits(n), tau:Bits(n)) -> Bool
    {
        assert not (State[ctr] == None);     /* session has been initialized */
        (V,v,U,u,ltk,acc,k,ni_,nr,kmac,sid_,mess)     <- parse Unwrap(State[ctr]);
        assert (v    == true);                /* session belongs to responder       */
        assert (mess == 1);                   /* session has sent its first message */
        assert (acc  == None);                /* session is still running           */
        if (not (mac(Unwrap(kmac),U,V,ni,Unwrap(nr),3) == tau) or
            not (ni == Unwrap(ni_)))
            {
             acc <- Some(false);
             State[ctr] <- Some((V,v,U,u,ltk,acc,k,ni_,nr,kmac,sid_,mess));
             return false;
            }
        acc <- Some(true);
        sid        <- (U,V,Some(ni),nr,Some(tau));
        State[ctr] <- Some((V,v,U,u,ltk,acc,k,ni_,nr,kmac,Some(sid),mess));
        entry      <- Keys[sid];
        k__        <- Unwrap(k);
        assert ((entry == None) or
                (Unwrap(entry) == (k__,Some(true )  ))   or
                (Unwrap(entry) == (k__,Some(false)  ))   or
                (Unwrap(entry) == (k__,None  as Bool))
               );
        if (entry == None)
            {
        Keys[sid]  <- Some((k,None as Bool));
            }
       return true;  
    } 
}

oracle Test(ctr) -> Bits(n)
    {
    (U,u,V,v,ltk,acc,k,ni,nr,kmac,sid,mess) <- parse Unwrap(State[ctr]);
    assert (Some(Keys[Unwrap(sid)]) == (k,None as Bool) ) /* only allowed to test/reveal sid once */
    Keys[Unwrap(sid)] <- (k,true)                 /* mark key as tested */
    return k
    }

oracle Reveal(ctr) -> Bits(n)
    {
    (U,u,V,v,ltk,acc,k,ni,nr,kmac,sid,mess) <- parse Unwrap(State[ctr]);
    assert (Some(Keys[Unwrap(sid)]) == (k,None as Bool) ) /* only allowed to test/reveal sid once */
    Keys[Unwrap(sid)] <- (k,false)                 /* mark key as revealed */
    return k
    }