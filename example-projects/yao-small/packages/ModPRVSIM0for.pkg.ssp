package ModPRVSIM0for {
    params {
        w: Integer,
        d: Integer,
        p: Integer,
        n: Integer,
    }

    import oracles {
        SETBIT(j: Integer, x:Bool) -> (),
        GBL(C:  Table(Integer,Table(Integer,(Integer,Integer,Table((Bool,Bool),Bool))))) 
                                   -> Table(Integer,Table(Integer,Table(Bits(p), Bool))),
        GETDINF()                  -> Table(Integer,Table(Bool,Bits(n))),
        GETAOUT(j: Integer)        -> Bits(n),
    }

    state {
    }

    oracle GARBLE(C: Table(Integer,Table(Integer,(Integer,Integer,Table((Bool,Bool),Bool)))),
                  x:Table(Integer,Bool)) 
                 -> (Table(Integer,Table(Integer,Table(Bits(p), Bool))),
                     Table(Integer, Bits(n)),
                     Table(Integer,Table(Bool,Bits(n))))

                     {
        xtilde <- new Table(Integer, Bits(n));
        for j: 1 <= j <= w {
            assert (x[j] == None as Bool);
            z <- Unwrap(x[j]);
            _ <- invoke SETBIT(j,z);
             k <- invoke GETAOUT(i);
             xtilde[j] <- Some(k);
        }
        Ctilde <- invoke GBL(C);
        dinf   <- invoke GETDINF();
        return (Ctilde,xtilde,dinf);
    }

}