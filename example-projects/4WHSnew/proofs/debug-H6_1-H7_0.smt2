

(define-fun <relation-lemma-abort-left-H6_1-H7_0-Send2>
    ((H61-old <GameState_H6_<$<!n!><!b!><!true!><!zeron!>$>>)
     (H70-old <GameState_H7_<$<!n!><!b!><!false!><!zeron!>$>>)
     (H61-return <OracleReturn-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (H70-return <OracleReturn-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (ctr Int) (msg Bits_256))
  Bool
  (let ((state-H61 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H61-return))
        (state-H70 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H70-return))
        (retval0 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H61-return))
        (retval1 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H70-return)))
    (let ((nonce-ctr-61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-2> H61-old))
          (nonces-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> state-H61))
          (nonces-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> H61-old))
          (nonces-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  state-H70))
          (game-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H61))
          (game-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H61-old))
          (game-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H70))
          (game-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  H70-old))
          (prf-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> state-H61))
          (prf-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> H61-old))
          (prf-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-PRF>  state-H70)))
      (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H61))
            (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H70))
            (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61))
            (State0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61-old))
            (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70))
            (State1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70-old))
            (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61))
            (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61-old))
            (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H70))
            (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61))
            (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61-old))
            (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70))
            (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70-old))
            (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H61))
            (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H70))
            (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61))
            (Nonces0-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61-old))
            (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70))
            (Ltk0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-LTK> prf-H61))
            (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H70))
            (Prf0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61))
            (Prf0-old (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61-old))
            (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H70))
            (H0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-H> prf-H61))
            (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H70)))
        (let ((state (select State0-old ctr))
              (none (as mk-none (Maybe (Tuple11 Int Bool Int Int (Maybe Bool) (Maybe Bits_256)
                                                (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
                                                (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int)))))
          (and
           (=> (= retval0 (as mk-abort (ReturnValue (Tuple2 Bits_256 Bits_256))))
              (=> (not (= state none))
                  (let  ((U    (el11-1  (maybe-get state)))
                         (u    (el11-2  (maybe-get state)))
                         (V    (el11-3  (maybe-get state)))
                         (kid  (el11-4  (maybe-get state)))
                         (acc  (el11-5  (maybe-get state)))
                         (k    (el11-6  (maybe-get state)))
                         (ni   (el11-7  (maybe-get state)))
                         (nr   (el11-8  (maybe-get state)))
                         (kmac (el11-9  (maybe-get state)))
                         (sid  (el11-10 (maybe-get state)))
                         (mess (el11-11 (maybe-get state))))
                    (or (not (= u true))
                        (not (= mess 0))
                        (not (= acc (as mk-none (Maybe Bool))))
                        (let ((sampled-rand (__sample-rand-H6_1-Bits_256 2 nonce-ctr-61)))
                          (not (= (select Nonces0-old sampled-rand)
                                  (as mk-none (Maybe Bool)))))))))
           (=> (=> (not (= state none))
                   (let  ((U    (el11-1  (maybe-get state)))
                          (u    (el11-2  (maybe-get state)))
                          (V    (el11-3  (maybe-get state)))
                          (kid  (el11-4  (maybe-get state)))
                          (acc  (el11-5  (maybe-get state)))
                          (k    (el11-6  (maybe-get state)))
                          (ni   (el11-7  (maybe-get state)))
                          (nr   (el11-8  (maybe-get state)))
                          (kmac (el11-9  (maybe-get state)))
                          (sid  (el11-10 (maybe-get state)))
                          (mess (el11-11 (maybe-get state))))
                     (or (not (= u true))
                         (not (= mess 0))
                         (not (= acc (as mk-none (Maybe Bool))))
                         (let ((sampled-rand (__sample-rand-H6_1-Bits_256 2 nonce-ctr-61)))
                           (not (= (select Nonces0-old sampled-rand)
                                   (as mk-none (Maybe Bool))))))))
               (= retval0 (as mk-abort (ReturnValue (Tuple2 Bits_256 Bits_256)))))))))))


(define-fun <relation-lemma-abort-right-H6_1-H7_0-Send2>
    ((H61-old <GameState_H6_<$<!n!><!b!><!true!><!zeron!>$>>)
     (H70-old <GameState_H7_<$<!n!><!b!><!false!><!zeron!>$>>)
     (H61-return <OracleReturn-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (H70-return <OracleReturn-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (ctr Int) (msg Bits_256))
  Bool
  (let ((state-H61 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H61-return))
        (state-H70 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H70-return))
        (retval0 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H61-return))
        (retval1 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H70-return)))
    (let ((nonce-ctr-61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-2> H61-old))
          (nonce-ctr-70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-rand-3> H70-old))
          (nonces-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> state-H61))
          (nonces-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> H61-old))
          (nonces-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  state-H70))
          (nonces-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  H70-old))
          (game-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H61))
          (game-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H61-old))
          (game-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H70))
          (game-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  H70-old))
          (prf-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> state-H61))
          (prf-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> H61-old))
          (prf-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-PRF>  state-H70)))
      (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H61))
            (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H70))
            (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61))
            (State0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61-old))
            (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70))
            (State1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70-old))
            (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61))
            (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61-old))
            (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H70))
            (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61))
            (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61-old))
            (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70))
            (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70-old))
            (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H61))
            (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H70))
            (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61))
            (Nonces0-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61-old))
            (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70))
            (Nonces1-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70-old))
            (Ltk0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-LTK> prf-H61))
            (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H70))
            (Prf0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61))
            (Prf0-old (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61-old))
            (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H70))
            (H0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-H> prf-H61))
            (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H70)))
        (let ((state (select State1-old ctr))
              (none (as mk-none (Maybe (Tuple11 Int Bool Int Int (Maybe Bool) (Maybe Bits_256)
                                                (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
                                                (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int)))))
          (and
           (=> (= retval1 (as mk-abort (ReturnValue (Tuple2 Bits_256 Bits_256))))
              (=> (not (= state none))
                  (let  ((U    (el11-1  (maybe-get state)))
                         (u    (el11-2  (maybe-get state)))
                         (V    (el11-3  (maybe-get state)))
                         (kid  (el11-4  (maybe-get state)))
                         (acc  (el11-5  (maybe-get state)))
                         (k    (el11-6  (maybe-get state)))
                         (ni   (el11-7  (maybe-get state)))
                         (nr   (el11-8  (maybe-get state)))
                         (kmac (el11-9  (maybe-get state)))
                         (sid  (el11-10 (maybe-get state)))
                         (mess (el11-11 (maybe-get state))))
                    (or (not (= u true))
                        (not (= mess 0))
                        (not (= acc (as mk-none (Maybe Bool))))
                        (let ((sampled-rand (__sample-rand-H7_0-Bits_256 3 nonce-ctr-70)))
                          (not (= (select Nonces1-old sampled-rand)
                                  (as mk-none (Maybe Bool)))))))))
           (=> (=> (not (= state none))
                   (let  ((U    (el11-1  (maybe-get state)))
                          (u    (el11-2  (maybe-get state)))
                          (V    (el11-3  (maybe-get state)))
                          (kid  (el11-4  (maybe-get state)))
                          (acc  (el11-5  (maybe-get state)))
                          (k    (el11-6  (maybe-get state)))
                          (ni   (el11-7  (maybe-get state)))
                          (nr   (el11-8  (maybe-get state)))
                          (kmac (el11-9  (maybe-get state)))
                          (sid  (el11-10 (maybe-get state)))
                          (mess (el11-11 (maybe-get state))))
                     (or (not (= u true))
                         (not (= mess 0))
                         (not (= acc (as mk-none (Maybe Bool))))
                         (let ((sampled-rand (__sample-rand-H7_0-Bits_256 3 nonce-ctr-70)))
                           (not (= (select Nonces1-old sampled-rand)
                                   (as mk-none (Maybe Bool))))))))
               (= retval1 (as mk-abort (ReturnValue (Tuple2 Bits_256 Bits_256)))))))))))


(define-fun <relation-lemma-abort-right-implies-left-H6_1-H7_0-Send2>
    ((H61-old <GameState_H6_<$<!n!><!b!><!true!><!zeron!>$>>)
     (H70-old <GameState_H7_<$<!n!><!b!><!false!><!zeron!>$>>)
     (H61-return <OracleReturn-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (H70-return <OracleReturn-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (ctr Int) (msg Bits_256))
  Bool
  (let ((state-H61 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H61-return))
        (state-H70 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H70-return))
        (retval0 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H61-return))
        (retval1 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H70-return)))
    (let ((nonce-ctr-61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-2> H61-old))
          (nonce-ctr-70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-rand-3> H70-old))
          (nonces-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> state-H61))
          (nonces-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> H61-old))
          (nonces-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  state-H70))
          (nonces-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  H70-old))
          (game-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H61))
          (game-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H61-old))
          (game-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H70))
          (game-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  H70-old))
          (prf-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> state-H61))
          (prf-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> H61-old))
          (prf-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-PRF>  state-H70)))
      (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H61))
            (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H70))
            (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61))
            (State0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61-old))
            (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70))
            (State1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70-old))
            (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61))
            (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61-old))
            (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H70))
            (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61))
            (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61-old))
            (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70))
            (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70-old))
            (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H61))
            (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H70))
            (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61))
            (Nonces0-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61-old))
            (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70))
            (Nonces1-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70-old))
            (Ltk0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-LTK> prf-H61))
            (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H70))
            (Prf0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61))
            (Prf0-old (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61-old))
            (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H70))
            (H0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-H> prf-H61))
            (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H70)))
        (=> (= retval1 (as mk-abort (ReturnValue (Tuple2 Bits_256 Bits_256))))
            (= retval0 (as mk-abort (ReturnValue (Tuple2 Bits_256 Bits_256)))))))))


(define-fun <relation-lemma-abort-left-implies-right-H6_1-H7_0-Send2>
    ((H61-old <GameState_H6_<$<!n!><!b!><!true!><!zeron!>$>>)
     (H70-old <GameState_H7_<$<!n!><!b!><!false!><!zeron!>$>>)
     (H61-return <OracleReturn-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (H70-return <OracleReturn-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (ctr Int) (msg Bits_256))
  Bool
  (let ((state-H61 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H61-return))
        (state-H70 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H70-return))
        (retval0 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H61-return))
        (retval1 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H70-return)))
    (let ((nonce-ctr-61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-2> H61-old))
          (nonce-ctr-70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-rand-3> H70-old))
          (nonces-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> state-H61))
          (nonces-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> H61-old))
          (nonces-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  state-H70))
          (nonces-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  H70-old))
          (game-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H61))
          (game-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H61-old))
          (game-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H70))
          (game-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  H70-old))
          (prf-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> state-H61))
          (prf-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> H61-old))
          (prf-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-PRF>  state-H70)))
      (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H61))
            (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H70))
            (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61))
            (State0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61-old))
            (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70))
            (State1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70-old))
            (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61))
            (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61-old))
            (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H70))
            (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61))
            (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61-old))
            (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70))
            (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70-old))
            (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H61))
            (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H70))
            (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61))
            (Nonces0-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61-old))
            (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70))
            (Nonces1-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70-old))
            (Ltk0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-LTK> prf-H61))
            (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H70))
            (Prf0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61))
            (Prf0-old (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61-old))
            (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H70))
            (H0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-H> prf-H61))
            (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H70)))
        (=> (= retval0 (as mk-abort (ReturnValue (Tuple2 Bits_256 Bits_256))))
            (= retval1 (as mk-abort (ReturnValue (Tuple2 Bits_256 Bits_256)))))))))
