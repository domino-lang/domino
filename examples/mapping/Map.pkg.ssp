package Map {

    params{
          n: Integer,
          }

    state {
        Input_Map:  Table(Integer,Integer),
        Output_Map: Table((Integer,Bits(*)),(Integer,Bits(*))),   
          }

    import oracles {
        SET(h: Integer, k: Bits(n)) -> Integer,
        EVAL(h: Integer, m: Bits(*)) -> (Integer,Bits(*)),
        GET(h: Integer, m: Bits(*)) -> Bits(n),
    }

    oracle EVAL(h: Integer, m: Bits(*)) -> (Integer,Bits(*)) {
        assert (Input_Map[h] != None as Integer);
        if (Output_Map[(h,m)] != None as (Integer,Bits(*)))
            {hhh <- Unwrap(Output_Map[(h,m)]);
                return hhh;}
        else {hhh <- Unwrap(Input_Map[h]);
            hh <- invoke EVAL(hhh,m);
           Output_Map[(h,m)] <- Some(hh);
           hhhh <- Unwrap(Output_Map[(h,m)]);
           return hhhh;}
    }

    oracle SET(h: Integer, k: Bits(n)) -> Integer {
        hh <- invoke SET(h,k);
        if (Input_Map[h] == None as Integer)
           {Input_Map[h] <- Some(hh);
           return hh;}
        else {return hh;}
    }

    oracle GET(h: Integer, m:Bits(*)) -> Bits(n) {
        assert (Output_Map[(h,m)] != None as (Integer,Bits(*)));
        hh <- Unwrap(Output_Map[(h,m)]);
        (hhh,mmm) <- parse hh;
        k <- invoke GET(hhh,mmm);
        return k;
        }
}