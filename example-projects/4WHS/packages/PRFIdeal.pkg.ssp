package PRFIdeal {
    params {
        n: Integer,
    }
    
    state {
          LTK:   Table(Integer, Bits(n)),       /* administrative kid, keys    */
          H:     Table(Integer, Bool),          /* administrative kid, honesty */
          K:     Table((Integer,Integer,Integer,Bits(n),Bits(n),Bool), Bits(n)), /* output keys */
          kid_:   Integer,
    }

oracle NewKey(ltk: Maybe(Bits(n))) -> Integer {
      kid_ <- (kid_ + 1);
      if (ltk == None)
      {
        ltk_ <-$Bits(n);
        LTK[kid_] <- Some(ltk_);
        H[kid_]   <- Some(true); 
      }
      else {
        LTK[kid_] <- ltk;
        H[kid_]   <- Some(false);}
      return kid_;
    }

    oracle Eval(h: Integer, a: Integer, b: Integer, c: Bits(n), d: Bits(n), e: Bool) {
        assert not (LTK[h] == None);
        if (K[(h,a,b,c,d,e)] == None) {
                        temp <-$Bits(n);
            K[(h,a,b,c,d,e)] <- Some(temp);
        }
    }

        oracle Get(h: (Integer,Integer,Integer,Bits(n),Bits(n),Bool)) -> Bits(n) {
        return Unwrap(K[h]);
    } 
}