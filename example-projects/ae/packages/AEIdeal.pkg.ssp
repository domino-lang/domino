package AEIdeal {
    params {
        n: Integer,
        enc: fn Bits(n), Bits(n), Bits(n) -> Bits(n),
    }

    state {
	K: Table(Bits(n), Bits(n)),
	T: Table((Bits(n),Bits(n)), Bits(n)),
    }
     
    oracle Set(k: Bits(n), h: Bits(n))  {
        if K[h]==None as Bits(n) {
            K[h] <- Some(k);
	}
    }

    oracle Enc(h: Bits(n), msg: Bits(n)) -> Bits(n) {
        k <- Unwrap(K(h));   
        T[(h, enc(k,msg,r))] <- Some(enc(k,msg,r));
        return enc(k,msg,r);
    }

    oracle Dec(h: Bits(n), c: Bits(n)) -> Bits(n) {
        return Unwrap(T[(h,enc(k,msg,r))]);
    }
}
