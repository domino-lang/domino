composition SNPRF_g1 {
    const n: Integer; /* key length */
    const m: Integer; /* message length */

    const prf_hdl_type_top: String;
    const prf_hdl_type_bottom: String;
    const xor3_hdl_type: String;

    const f: fn Bits(n), Message -> Bits(n); /* PRF */
    
    /* sorting function; needs to be adequately constrained in SMT code.*/
    const sort3hdl: fn HandleIn, HandleIn, HandleIn -> (HandleIn, HandleIn, HandleIn); 

    instance key_one = Key {
        types {
            Handle: Integer,
        }

        params {
            ideal: true,
            n: n,
        }
    }

    instance key_two = Key {
        types {
            Handle: (String, Integer, Bits(m)),
        }

        params {
            ideal: true,
            n:n,
        }
    }

    instance key_three = Key {
        types {
            Handle: (String, ((String, Integer, Bits(m)), (String, Integer, Bits(m)), (String, Integer, Bits(m)))),
        }

        params {
            ideal: false,
            n:n,
        }
    }

    instance key_four = Key {
        types {
            Handle: (String, (String, ((String, Integer, Bits(m)), (String, Integer, Bits(m)), (String, Integer, Bits(m)))), Bits(m)),
        }

        params {
            ideal: false,
            n:n,
        }
    }

    instance prf_top = PRF {
        types {
            Message:    Bits(m),
            HandleIn:   Integer,
        }

        params {
            f: f,
            hdl_type: prf_hdl_type_top,
            n:n,
        }
    }

    instance xor = XOR3 {
        types {
            HandleIn:   (String, Integer, Bits(m)),
        }

        params {
            sort3hdl: sort3hdl,
            hdl_type: xor3_hdl_type,
            n:n,
        }
    }

    instance prf2 = PRF2 {
        types {
            Message: Bits(m),
            HandleIn: (String, ((String, Integer, Bits(m)), (String, Integer, Bits(m)), (String, Integer, Bits(m)))),
        }
    }

    instance prf_bottom = PRF {
        types {
            Message: Bits(m),
            HandleIn: (String, ((String, Integer, Bits(m)), (String, Integer, Bits(m)), (String, Integer, Bits(m)))),
        }

        params {
            f: f,
            hdl_type: prf_hdl_type_bottom,
            n:n,
        }
    }

    compose {
        adversary: {
            Set: key_one,
            Eval: prf_top,
            Xor: xor,
            Eval2: prf2,
            Get: key_four,
            PR: key_four,
        },

        prf_top: {
            Get: key_one,
            PR: key_one,
            Set: key_two,
        },

        xor: {
            Get: key_two,
            PR: key_two,
            Set: key_three,
        },

        prf2: {
            Eval: prf_bottom,
        },

        prf_bottom: {
            Get: key_three,
            PR: key_three,
            Set: key_four
        }
    }
}