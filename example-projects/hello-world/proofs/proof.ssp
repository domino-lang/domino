proof Proof {
    const n: Integer;
  
    instance small_composition = SmallComposition {
        params {
            n: n,
        }
    }

    instance composition = Composition {
        params {
            n: n,
        }
    }

    instance composition_2 = Composition {
        params {
            n: n,
        }
    }

    instance big_composition = BigComposition {
        params {
            n: n,
        }
    }

    assumptions {
    Assumption: composition ~ small_composition
    }

        equivalence composition small_composition {
            Oracle: {
                invariant: [
                    ./proofs/invariant.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
        }

    gamehops {
        reduction big_composition composition_2  
        {
            assumption Assumption

            map small_composition composition_2 {
                rand    : rand
            }

            map composition big_composition {
                rand    : rand
                fwd     : fwd
            }
        }
    }
}
