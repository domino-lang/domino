package Key {
    types {
        Handle,
    }

    params {
        ideal: Bool,
        n: Integer,
    }

    state {
        keys: Table(Handle, Bits(n)),
        prs:  Table(Handle, Bool), /* is_pseudorandom */
    }

    oracle Set(hdl: Handle, k: Bits(n), pr: Bool) {
        /* _should_ imply the rest is unset as well */
        if not(keys[hdl] == None as Bits(n)) {
            abort;
        }

        if (pr and ideal) {
            k <-$ Bits(n);
        }

        keys[hdl] <- Some(k);
        prs[hdl] <- Some(pr);
    }

    oracle Get(hdl: Handle) -> Bits(n) {
        mk <- keys[hdl];
        return Unwrap(mk);
    }

    oracle PR(hdl: Handle) -> Bool {
        mpr <- prs[hdl];
        return Unwrap(mpr);
    }
}