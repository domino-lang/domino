package Simgate {
    params {
        n: Integer,
        m: Integer,
        p: Integer,
        encn: fn Bits(n),Bits(n),Bits(n) -> Bits(m),
        encm: fn Bits(n),Bits(m),Bits(n) -> Bits(p),
    }

    state {
    }

    oracle GBLG(h: Integer, l: Integer, r: Integer, op: fn (Bool,Bool) -> Bool, j: Integer) -> Set) {
        EVAL(j,l,r,op);
        Sl[0] <- invoke GETAOUT(l);
        Sl[1] <- invoke GETINAOUT(l);
        Sr[0] <- invoke GETAOUT(r);
        Sr[1] <- invoke GETINAOUT(r);
        Sj[0] <- invoke GETAIN(j);
        dl <- 0;
        dr <- 0;
           kl <- Sl[dl];
           kr <- Sr[dr];
           if ((not dl) and (not dr)):
              kj <- Sj[0];
           else kj <- 0^n
           rin <-* Bits(n);
           rout <-* Bits(n);
           cin  <- encn(kr,kj,rin);
           cout  <- encm(kl,cin,rout);
           C[cout] <- true;
        dl <- 1;
        dr <- 0;
           kl <- Sl[dl];
           kr <- Sr[dr];
           if dl=dr=false:
              kj <- Sj[0];
           else kj <- 0^n
           rin <-* Bits(n);
           rout <-* Bits(n);
           cin  <- encn(kr,kj,rin);
           cout  <- encm(kl,cin,rout);
           C[cout] <- true;
        dl <- 0;
        dr <- 1;
           kl <- Sl[dl];
           kr <- Sr[dr];
           if dl=dr=0:
              kj <- Sj[0];
           else kj <- 0^n
           rin <-* Bits(n);
           rout <-* Bits(n);
           cin  <- encn(kr,kj,rin);
           cout  <- encm(kl,cin,rout);
           C[cout] <- true;
        dl <- 1;
        dr <- 1;
           kl <- Sl[dl];
           kr <- Sr[dr];
           if dl=dr=0:
              kj <- Sj[0];
           else kj <- 0^n
           rin <-* Bits(n);
           rout <-* Bits(n);
           cin  <- encn(kr,kj,rin);
           cout  <- encm(kl,cin,rout);
           C[cout] <- true;
        return C;
    }

}