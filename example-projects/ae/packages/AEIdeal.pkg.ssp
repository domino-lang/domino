package AEIdeal {
    params {
        n: Integer,
        m: Integer,
        enc: fn Bits(n), Bits(n), Bits(n) -> Bits(m),
    }

    state {
          K: Table(Bits(n), Bits(n)),
          T: Table((Bits(n),Bits(m)), Bits(n)),
    }
     
    oracle Set(k: Bits(n), h: Bits(n))  {
        if (K[h]==None as Bits(n)) {
            K[h] <- Some(k);
        }
    }

    oracle Enc(h: Bits(n), msg: Bits(n)) -> Bits(m) {
        k <- Unwrap(K[h]);   
        r <-$ Bits(n);
        T[(h, enc(k,msg,r))] <- Some(msg);
        return enc(k,msg,r);
    }

    oracle Dec(h: Bits(n), c: Bits(m)) -> Bits(n) {
        return h; /*TODO: should actually be Unwrap(T[(h,c)]);*/ 
    }
}
