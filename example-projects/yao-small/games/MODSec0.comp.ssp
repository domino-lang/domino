composition MODSec0 {
    const w: Integer;
    const n: Integer;
    const d: Integer;
    const m: Integer;
    const p: Integer;
    const zeron: Bits(n);
    const zerom: Bits(m);
    const encn: fn Bits(n),Bits(n),Bits(n) -> Bits(m);
    const encm: fn Bits(n),Bits(m),Bits(n) -> Bits(p);

    instance mod = Mod {
        params {
            w: w,
            d: d,
            p: p,
            n: n,
        }

    }
    for dd: 0 <= dd <= d {

        instance keys[dd] = Keys {
            params {
                n: n,
                i: dd,
            }

            types {
                Handle: Integer,
            }

        }
    }
    for dd: 1 <= dd <= d {

        instance modgb[dd] = MODGB {
            params {
                w: w,
                p: p,
                n: n,
                i: dd,
            }

        }

        instance gate[dd] = Gate {
            params {
                n: n,
                m: m,
                p: p,
                h: dd,
                zeron: zeron,
                i: dd,
            }

        }

        instance enc[dd] = Enc0 {
            params {
                n: n,
                m: m,
                p: p,
                encn: encn,
                encm: encm,
                i: dd,
            }

        }
    }
    for dd: 1 <= dd <= d {
        compose {
            mod: {
                with index [dd] GBL: modgb,
            }
            modgb[dd]: {
                with index [dd] GBLG: gate,
            }
            gate[dd]: {
                with index [dd] ENCM: enc,
                with index [dd] ENCN: enc,
                with index [dd] GETKEYSOUT: keys,
            }
            enc[dd]: {
                with index [(dd - 1)] GETKEYSIN: keys,
            }
        }
    }
    compose {
        adversary: {
            GARBLE: mod,
        }
        mod: {
            with index [0] GETAOUT: keys,
            with index [0] SETBIT: keys,
            with index [d] GETKEYSIN: keys,
        }
    }
}
