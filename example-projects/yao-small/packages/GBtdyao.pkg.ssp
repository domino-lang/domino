package GBtdyao {
    params {
        w: Integer,
        d: Integer,
        p: Integer,
        n: Integer,
        m: Integer,
     encn: fn Bits(n),Bits(n),Bits(n) -> Bits(m),
     encm: fn Bits(n),Bits(m),Bits(n) -> Bits(p),
    }

    import oracles {
        SETKEYS(j: Integer, Z: Table(Bool,Bits(n))) -> (),
        SETDINF(dinf: Table(Integer,Table(Bool,Bits(n)))) -> (),
    }

    state {
        Ctilde: Table(Integer, Table(Integer, Table(Bits(p), Bool))),
    }

    oracle GBL(C: Table(Integer, Table(Integer,(Integer,Integer, Table((Bool,Bool),Bool))))) 
                 -> Table(Integer, Table(Integer, Table(Bits(p), Bool)))
                     {
        Z           <- new Table(Integer, Table(Integer, Table(Bool,Bits(n))));
        ZZ          <-                new Table(Integer, Table(Bool,Bits(n)));
        ZZZ         <-                               new Table(Bool,Bits(n)) ;
        layertilde  <-                new Table(Integer, Table(Bits(p),Bool));
        gtilde      <-                               new Table(Bits(p),Bool);
        for i: 0 <= i <= d {
            assert (Ctilde[i] == None as Table(Integer, Table(Bits(p), Bool)));
            for j: 1 <= j <= w {
                r  <-$ Bits(n);
                rr <-$ Bits(n);
         ZZZ[true]  <-  Some(r);
         ZZZ[false] <-  Some(rr);
              ZZ[j] <-  Some(ZZZ);
                 }
              Z[i]  <-  Some(ZZ);}
        for ii: 1 <= ii <= d {
             assert not (C[ii] == None as Table(Integer,(Integer,Integer, Table((Bool,Bool),Bool))));
             for jj: 1 <= jj <= w {
             layer    <- Unwrap(C[ii]);
             gate     <- Unwrap(layer[jj]);
             (l,r,op) <- parse gate;
             assert not (op[(true,  true)] == None as Bool);
             assert not (op[(true, false)] == None as Bool);
             assert not (op[(false, true)] == None as Bool);
             assert not (op[(false,false)] == None as Bool);
             bl  <- true; br <- true;
             z   <- Unwrap(op[(bl,br)]);
             YY      <- Unwrap(Z[ii]); XX <- Unwrap(Z[(ii-1)]);
             ZZZ     <- Unwrap(YY[jj]);
             k       <- Unwrap(ZZZ[z]);
             ZZZ     <- Unwrap(XX[l]);
             kleft   <- Unwrap(ZZZ[bl]);
             ZZZ     <- Unwrap(XX[r]);
             kright  <- Unwrap(ZZZ[br]);
             rrr     <-$ Bits(n);
             rrrr    <-$ Bits(n);
             cin     <-  encn(kleft,k,rrr);
             c       <-  encm(kright,cin,rrrr);
             gtilde[c] <- Some(true); 
             bl  <- false; br <- true;
             z   <- Unwrap(op[(bl,br)]);
             YY      <- Unwrap(Z[ii]); XX <- Unwrap(Z[(ii-1)]);
             ZZZ     <- Unwrap(YY[jj]);
             k       <- Unwrap(ZZZ[z]);
             ZZZ     <- Unwrap(XX[l]);
             kleft   <- Unwrap(ZZZ[bl]);
             ZZZ     <- Unwrap(XX[r]);
             kright  <- Unwrap(ZZZ[br]);
             rrr     <-$ Bits(n);
             rrrr    <-$ Bits(n);
             cin     <-  encn(kleft,k,rrr);
             c       <-  encm(kright,cin,rrrr);
             gtilde[c] <- Some(true);
             bl  <- true; br <- false;
             z   <- Unwrap(op[(bl,br)]);
             YY      <- Unwrap(Z[ii]); XX <- Unwrap(Z[(ii-1)]);
             ZZZ     <- Unwrap(YY[jj]);
             k       <- Unwrap(ZZZ[z]);
             ZZZ     <- Unwrap(XX[l]);
             kleft   <- Unwrap(ZZZ[bl]);
             ZZZ     <- Unwrap(XX[r]);
             kright   <- Unwrap(ZZZ[br]);
             rrr     <-$ Bits(n);
             rrrr    <-$ Bits(n);
             cin     <-  encn(kleft,k,rrr);
             c       <-  encm(kright,cin,rrrr);
             gtilde[c] <- Some(true); 
             bl  <- false; br <- false;
             z   <- Unwrap(op[(bl,br)]);
             YY      <- Unwrap(Z[ii]); XX <- Unwrap(Z[(ii-1)]);
             ZZZ     <- Unwrap(YY[jj]);
             k       <- Unwrap(ZZZ[z]);
             ZZZ     <- Unwrap(XX[l]);
             kleft   <- Unwrap(ZZZ[bl]);
             ZZZ     <- Unwrap(XX[r]);
             kright   <- Unwrap(ZZZ[br]);
             rrr     <-$ Bits(n);
             rrrr    <-$ Bits(n);
             cin     <-  encn(kleft,k,rrr);
             c       <-  encm(kright,cin,rrrr);
             gtilde[c] <- Some(true); 
            layertilde[jj] <- Some(gtilde);
            }
            Ctilde[ii] <- Some(layertilde);
            }
         ZZ <- Unwrap(Z[d]);
         for jjj: 1 <= jjj <= w {
            ZZZ <- Unwrap(ZZ[jjj]);
            _ <- invoke SETKEYS(jjj,ZZZ);
            }
            _ <- invoke SETDINF(ZZ);
        return Ctilde;
    }
}
