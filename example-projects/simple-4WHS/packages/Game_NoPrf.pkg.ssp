package Game_NoPrf {
    params {
        b: Bool,
        n: Integer,
        zeron: Bits(256),
    }
    
    state {
          LTK:   Table(Integer, Bits(256)),       /* administrative kid, keys    */
          H:     Table(Integer, Bool),          /* administrative kid, honesty */
          ctr_:  Integer,                       /* administrative sid  */
          kid_:  Integer,                       /* administrative kid  */
		  /* session key table, reveal -> (.,false) ; test -> (.,true) */
          RevTested:  Table((Integer,Integer,Bits(256),Bits(256),Bits(256)),
		               Bool),
		  RevTestEval: Table((Integer,Integer,Integer,Bits(256),Bits(256)),Integer),
		  Fresh: Table(Integer, Bool),
          /* Authentication */
          State: Table(Integer,
                  /*    administrative sid  */
                (
                 Integer,
                  /*    ID of owner of the session */
                 Bool,
                  /*    false: initiator, 
                        true : responder,*/ 
                 Integer,
                  /* Intended Peer */
                 Integer,
                  /*    ltk          */
                 Maybe(Bool),
                  /* None: running, 
                        true: accepted, 
                        false: rejected   */
                 Maybe(Bits(256)),
                        /* session key */
                 Maybe(Bits(256)),
                        /* initiator nonce */
                 Maybe(Bits(256)),
                        /* responder nonce */
                 Maybe(Bits(256)),
                        /* MAC key */
                 Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        /* SID */
                 Integer))
                        /* nbr of messages sent */

          }

    import oracles {
    	 Hon(h: Integer) -> Bool,
		 Eval(h: Integer, a: Integer, aa: Integer, c: Bits(256), d: Bits(256), e: Bool) -> Bits(256),

         Run1(state: (Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer))                            
         -> ((Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer),
            (Bits(256))), 
         Run2(state: (Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer), ni: Bits(256))               
         -> ((Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer),
            (Bits(256),Bits(256))), 
         Run3(state: (Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer), msg: (Bits(256), Bits(256))) 
         -> ((Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer),
            (Bits(256),Bits(256))), 
         Run4(state: (Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer), msg: (Bits(256), Bits(256))) 
         -> ((Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer),
            (Bits(256))), 
         Run5(state: (Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer), tau: Bits(256))              
         -> ((Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer),
            (Bool)),
    }


oracle NewSession(U: Integer, u: Bool, V: Integer, kid: Integer) -> Integer {
        assert not (LTK[kid] == None);  /* key exists */
        ctr_        <- (ctr_ + 1) ; 
        ltk         <- 12; /*Unwrap(LTK[kid]);*/
        State[ctr_] <- Some((U,u,V,ltk,None,None,None,None,None,None,0));
		Fresh[ctr_] <- H[kid];
        return ctr_;
    }

oracle Send1(ctr: Integer) -> (Bits(256))
    {
        assert not (State[ctr] == None);     /* session has been initialized */
        state <- Unwrap(State[ctr]);
        (U,u,V,ltk,acc,k,ni,nr,kmac,sid,mess) <- parse state;
        assert (u == false);                 /* session belongs to initiator */
        return      <- invoke Run1(state);
        (state,msg) <- parse return;
        State[ctr]  <- Some(state);
        return msg;
    } 

oracle Send2(ctr: Integer, msg: Bits(256)) -> (Bits(256),Bits(256))
    {
        assert not (State[ctr] == None);     /* session has been initialized */
        state   <- Unwrap(State[ctr]);
        (V,v,U,ltk,acc,k,ni_,nr,kmac,sid,mess) <- parse state;
        assert (v    == true );              /* session belongs to responder */
        return         <- invoke Run2(state,msg);
        (state,msg_)   <- parse return;
        State[ctr]     <-  Some(state);
        return msg_;
    } 

oracle Send3(ctr: Integer, msg: (Bits(256),Bits(256))) -> (Bits(256), Bits(256))
    {
        assert not (State[ctr] == None);    /* session has been initialized */
        state                                           <- Unwrap(State[ctr]);
        (U,u,V,ltk,acc,k_,ni_,nr_,kmac_,sid_,mess)    <- parse state;
        assert (u    == false);              /* session belongs to initiator       */
        return         <- invoke Run3(state,msg);
        (state,msg_)   <- parse return;

        State[ctr]     <-  Some(state);
        return msg_;
    } 

oracle Send4(ctr: Integer, msg: (Bits(256),Bits(256))) -> (Bits(256))
    {
        assert not (State[ctr] == None);     /* session has been initialized */
        state                                          <- Unwrap(State[ctr]);
        (V,v,U,ltk,acc,k,ni_,nr,kmac,sid_,mess)      <- parse state;
		
        assert (v    == true);                /* session belongs to responder       */

        return       <- invoke Run4(state,msg);
        (state,msg_) <- parse return;
        State[ctr]   <- Some(state);

        return msg_;  
    } 

oracle Send5(ctr: Integer, msg: Bits(256)) -> (Bool)
    {
        assert not (State[ctr] == None);    /* session has been initialized */
        state                                       <- Unwrap(State[ctr]);
        (U,u,V,ltk,acc,k,ni,nr,kmac,sid,mess)     <- parse state;
		
        assert (u    == false);              /* session belongs to initiator       */
		
        return      <- invoke Run5(state,msg);
        (state,stop) <- parse return;
        State[ctr] <- Some(state);
        return stop;
    } 

oracle Reveal(ctr: Integer) -> Bits(256)
    {
    (U,u,V,ltk,acc,_k,ni,nr,kmac,sid,mess) <- parse Unwrap(State[ctr]);

	/* Session accepted */
    assert (acc == Some(true));

	/* only allowed to test/reveal sid once */
    assert (RevTested[Unwrap(sid)] == None);

	/* mark key as revealed */
    RevTested[Unwrap(sid)] <- Some(false);    
    if u {
	  RevTestEval[(ltk,V,U,Unwrap(ni),Unwrap(nr))] <- Some(ctr);
      k <- invoke Eval(ltk,V,U,Unwrap(ni),Unwrap(nr),true);
	} else {
	  RevTestEval[(ltk,U,V,Unwrap(ni),Unwrap(nr))] <- Some(ctr);
      k <- invoke Eval(ltk,U,V,Unwrap(ni),Unwrap(nr),true);
    }
    }

oracle Test(ctr: Integer) -> Bits(256)
    {
    (U,u,V,ltk,acc,_k,ni,nr,kmac,sid,mess) <- parse Unwrap(State[ctr]);
	
	/* Session accepted */
    assert (acc == Some(true));
    assert Unwrap(Fresh[ctr]);

	/* only allowed to test/reveal sid once */
    assert (RevTested[Unwrap(sid)] == None);

	/* mark key as tested */
    RevTested[Unwrap(sid)] <- Some(true);
	
     if b {
	  k <-$ Bits(256);
	} else {
       if u {
	     RevTestEval[(ltk,V,U,Unwrap(ni),Unwrap(nr))] <- Some(ctr);
         k <- invoke Eval(ltk,V,U,Unwrap(ni),Unwrap(nr) ,true);
	   } else {
	     RevTestEval[(ltk,U,V,Unwrap(ni),Unwrap(nr))] <- Some(ctr);
         k <- invoke Eval(ltk,U,V,Unwrap(ni),Unwrap(nr) ,true);
       }
    }
    return k;
    }
}