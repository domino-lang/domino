package MAC {
    /*
     * Handle: (kid,U,V,ni,nr)
     */
    params {
        n: Integer,
        mac: fn Bits(256), Bits(256), Integer -> Bits(256),
        b: Bool,
    }

    state {
        Handles: Table((Integer, Integer,Integer,Bits(256),Bits(256)),Bits(256)),
        Values: Table(((Integer, Integer,Integer,Bits(256),Bits(256)),
                       (Bits(256), Integer)), Bits(256)),
    }

    oracle Init(handle: (Integer, Integer,Integer,Bits(256),Bits(256))) {
        assert (Handles[handle] == None);

        key <-$ Bits(256);
        Handles[handle] <- Some(key);
    }

    oracle Mac(handle: (Integer, Integer,Integer,Bits(256),Bits(256)),
               value: (Bits(256), Integer))
           -> Bits(256) {
        key <- Handles[handle];
        assert (key != None);

        val1, val2 <- parse value;
        tag <- mac(Unwrap(key), val1, val2);

        Values[(handle, value)] <- Some(tag);
        return tag;
    }

    oracle Verify(handle: (Integer, Integer,Integer,Bits(256),Bits(256)),
                  value: (Bits(256), Integer),
                  tag: Bits(256)
           -> Boolean {

        entry <- Values[(handle, value)];
        if (entry == None) {
            return false;
        }
        if (Unwrap(entry) !- tag) {
            return false;
        }
        return true;
    }
}
