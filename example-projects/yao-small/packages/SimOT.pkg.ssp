package SimOT {
    types {
    }

    params {
        t: Integer,
        n: Integer,
        v: Integer,
        q: Integer,
        sim: fn Table(Integer,Bool),Table(Integer,Bits(n)),Bits(q),Integer -> Bits(q),
    }

    state {
    }

    import oracles {
        GETA(h: Integer) -> Bits(n),
        SETBIT(h: Integer, zz: Bool),
        GETBIT(h: Integer) -> Bool,
    }


    oracle SETBIT(h: Integer, zz: Bool) {
        _ <- invoke SETBIT(h, zz);
        return;
    }

    oracle VIEW() -> Bits(q) {
        z <- new Table(Integer, Bool);
        K <- new Table(Integer, Bits(n));
        for i: 1 <= i <= t {
            a <- invoke GETBIT(i);
            z[i] <- Some(a);
            k <- invoke GETA(i);
            K[i] <- Some(k);
        }
        r <-$ Bits(q);
        vw <- sim(z, K, r, t);
        return vw;
    }
}
