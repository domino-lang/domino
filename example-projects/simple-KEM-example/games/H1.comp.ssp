composition H1 {
    const isideal_kem_cpa_security: Bool;                           /* real-ideal-bit */
    const isideal_kem_correctness: Bool;                            /* real-ideal-bit */
    const    kgen: fn Bits(256)             ->  Bits(256);          /* takes sk, returns pk  */
    const  encaps: fn Bits(256),Bits(256) -> (Bits(256),Bits(256)); /* (pk,rand) -> (ctxt,k) */
    const  decaps: fn Bits(256),Bits(256) ->  Bits(256);            /* (sk,ctxt) -> k        */

    instance Corr_KEM = Corr_KEM {
        params {
          isideal_kem_correctness:   isideal_kem_correctness,
             kgen:   kgen,
           encaps:   encaps,
           decaps:   decaps,
        }
    }

    instance Corr_reduction = Corr_reduction {
        params {
          isideal_kem_cpa_security:   isideal_kem_cpa_security,
             kgen:   kgen,
           encaps:   encaps,
           decaps:   decaps,
        }
    }

    compose {
        adversary: {
            GetPK: Corr_reduction,
            Run:   Corr_reduction,
            TestSender:   Corr_reduction,
            TestReceiver: Corr_reduction,
        },
        Corr_reduction: {
            GetPK:        Corr_KEM,
            ENC_and_DEC:  Corr_KEM,
        },
    }
}
