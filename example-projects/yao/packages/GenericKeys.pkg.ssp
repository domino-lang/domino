package GenericKeys {
    params {
        n: Integer,
    }

    types {
        Handle,
    }

    state {
        T: Table(Handle,Table(Bool,Bits(n))),
        z: Table(Handle,Bool),
        flag: Table(Handle,Bool),
    }

    oracle GETKEYSIN(h: Handle) -> Table(Bool,Bits(n)) {
        assert (flag[h]==Some(true));
        Z <- Unwrap(T[h]);
        return Z;
    }

    oracle GETAIN(h: Handle) -> Bits(n) {
        assert (flag[h]==Some(true));
        Z <- Unwrap(T[h]);
        zz <- Unwrap(z[h]);
        k <- Unwrap(Z[zz]);
        return k;
    }

    oracle GETINAIN(h: Handle) -> Bits(n) {
        assert (flag[h] == Some(true));
        Z <- Unwrap(T[h]);
        zz <- Unwrap(z[h]);
        k <- Unwrap(Z[not zz]);
        return k;
    }

    oracle GETAOUT(h: Handle) -> Bits(n) {
        assert (z[h] == Some(true));
        flag[h] <- Some(true);
        Z <- new Table(Bool,Bits(n));
        if (T[h] == None as Table(Bool,Bits(n)))
           {r <-$ Bits(n);
            Z[true] <- Some(r); 
            rr <-$ Bits(n);
            Z[false] <-Some(rr);
            T[h] <- Some(Z);}
        Z <- Unwrap(T[h]);
        zz <- Unwrap(z[h]);
        k <- Unwrap(Z[zz]);
        return k;
    }

    oracle GETKEYSOUT(h: Handle) -> Table(Bool,Bits(n)) {
        assert (flag[h] != Some(true));
        flag[h]<- Some(true);
        Z <- new Table(Bool,Bits(n));
        if (T[h] == None as Table(Bool,Bits(n)))
           {r <-$ Bits(n);
            Z[true] <- Some(r); 
            rr <-$ Bits(n);
            Z[false] <-Some(rr);
            T[h] <- Some(Z);}
        Z <- Unwrap(T[h]);
        return Z;
    }

    oracle GETBIT(h: Handle) -> Bool {
        assert (z[h] != None as Bool);
        zz <- Unwrap(z[h]);
        return zz;
    }

    oracle SETBIT(h: Handle, zz:Bool) -> () {
        assert (z[h] == None as Bool);
        z[h] <- Some(zz);
        return ;
    }

}