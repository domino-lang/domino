package SIMtdyaofor {
    params {
        w: Integer,
        d: Integer,
        p: Integer,
        n: Integer,
     encn: fn Bits(n),Bits(n),Bits(n) -> Bits(m),
     encm: fn Bits(n),Bits(m),Bits(n) -> Bits(p),
    zeron: Bits(n),
    }

    import oracles {
        GETBIT[d](j: Integer) -> Bool,
        for i: 1 <= i <= d {
            EVAL[i](C:  Table(Integer,(Integer,Integer,Table((Bool,Bool),Bool)))) -> (),
        }
    }

    state {
        Ctilde: Table(Integer, Table(Integer, Table(Bits(p), Bool))),
        dinf:   Table(Integer, Table(Bool, Bits(n))),
        S:      Table(Integer, Table(Integer, Table(Bool, Bits(n))))
    }


    oracle GETAOUT(j: Integer) 
                 -> Bits(n)
                     {
                       r          <-$ Bits(n);
                       rr         <-$ Bits(n);
                       ZZZ        <- new Table(Bool,Bits(n));
                       ZZZ[false] <- Some(r);
                       ZZZ[true]  <- Some(rr);
                       ZZ         <- Unwrap(S[0]);
                       ZZ[j]      <- Some(ZZZ);
                       return r;
                     }

    oracle GBL(C: Table(Integer, Table(Integer,(Integer,Integer, Table((Bool,Bool),Bool))))) 
                 -> Table(Integer, Table(Integer, Table(Bits(p), Bool)))
                     {
        for i: 1 <= i <= d { 
             layertilde  <- new Table(Integer, Table(Bits(p),Bool));
             ZZ          <- new Table(Integer,Table(Bool,Bits(n)));
             assert (not (C[i] == None as Table(Integer,(Integer,Integer, Table((Bool,Bool),Bool)))));
             assert (Ctilde[i] == None as Table(Integer, Table(Bits(p), Bool)));
             layer    <- Unwrap(C[i]);
             _        <- invoke EVAL[i](layer);
             for jj: 1 <= jj <= w {
             gtilde   <- new Table(Bits(p),Bool);
             gate     <- Unwrap(layer[jj]);
             (l,r,op) <- parse gate;
             assert (not (op[(true,  true)] == None as Bool));
             assert (not (op[(true, false)] == None as Bool));
             assert (not (op[(false, true)] == None as Bool));
             assert (not (op[(false,false)] == None as Bool));
                 rrr  <-$ Bits(n);
                 rrrr <-$ Bits(n);
         ZZZ          <-  new Table(Bool,Bits(n));
         ZZZ[true]    <-  Some(rrr);
         ZZZ[false]   <-  Some(rrrr);
          ZZ[jj]      <-  Some(ZZZ);
            dl   <- true; 
            dr   <- true;
             k         <- zeron;
             XX        <- Unwrap(S[(i-1)]);
             ZZZ       <- Unwrap(XX[l]);
             kleft     <- Unwrap(ZZZ[bl]);
             ZZZ       <- Unwrap(XX[r]);
             kright    <- Unwrap(ZZZ[br]);
             rrr       <-$ Bits(n);
             rrrr      <-$ Bits(n);
             cin       <-  encn(kleft,k,rrr);
             c         <-  encm(kright,cin,rrrr);
             gtilde[c] <- Some(true); 
             dl <- false; 
             dr <- true;
             k       <- zeron;
             XX      <- Unwrap(S[(i-1)]);
             ZZZ     <- Unwrap(XX[l]);
             kleft   <- Unwrap(ZZZ[bl]);
             ZZZ     <- Unwrap(XX[r]);
             kright  <- Unwrap(ZZZ[br]);
             rrr     <-$ Bits(n);
             rrrr    <-$ Bits(n);
             cin     <-  encn(kleft,k,rrr);
             c       <-  encm(kright,cin,rrrr);
             gtilde[c] <- Some(true); 
             dl  <- true; 
             dr  <- false;
             k       <- zeron;
             XX      <- Unwrap(S[(i-1)]);
             ZZZ     <- Unwrap(XX[l]);
             kleft   <- Unwrap(ZZZ[bl]);
             ZZZ     <- Unwrap(XX[r]);
             kright  <- Unwrap(ZZZ[br]);
             rrr     <-$ Bits(n);
             rrrr    <-$ Bits(n);
             cin     <-  encn(kleft,k,rrr);
             c       <-  encm(kright,cin,rrrr);
             gtilde[c] <- Some(true); 
                   dl  <- false; 
                   dr  <- false;
             ZZZ     <- Unwrap(ZZ[ji]);
             k       <- Unwrap(ZZZ[false]);
             XX      <- Unwrap(S[(i-1)]);
             ZZZ     <- Unwrap(XX[l]);
             kleft   <- Unwrap(ZZZ[bl]);
             ZZZ     <- Unwrap(XX[r]);
             kright  <- Unwrap(ZZZ[br]);
             rrr     <-$ Bits(n);
             rrrr    <-$ Bits(n);
             cin     <-  encn(kleft,k,rrr);
             c       <-  encm(kright,cin,rrrr);
             gtilde[c] <- Some(true);
             layertilde[jj] <- Some(gtilde);
             }
             S[i]      <- Some(ZZ);
             Ctilde[i] <- Some(layertilde);
             }
        return Ctilde;
    }

    oracle GETDINF() 
                 -> Table(Integer, Table(Bool,Bits(n)))
                     {
                  T <- Unwrap(S[(d)]);
               old <- new Table(Bool,Bits(n));
               new <- new Table(Bool,Bits(n));
                  for jj: 1 <= jj <= w {
                old <- Unwrap(T[jj]);
                  z <- invoke GETBIT(jj);
               notz <- not z;
             new[z] <- old[false];
          new[notz] <- old[true];
            dinf[jj] <- Some(new);
                  }
                  return dinf;          
                     }

}
