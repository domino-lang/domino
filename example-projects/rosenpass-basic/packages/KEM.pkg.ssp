package KEM {
  params {
    sk_len: Integer,
    pk_len: Integer,
    ct_len: Integer,
    shk_len: Integer,
    encaps_coins_len: Integer,

    encaps: fn (Bits(encaps_coins_len), Bits(pk_len)) -> (Bits(shk_len), Bits(ct_len)),
  }

  import oracles {
    Set(ct: Bits(ct_len), pk: Bits(pk_len), shk: Bits(shk_len), is_hon: Bool),
    Get(pk: Bits(pk_len)) -> (Bits(sk_len), Bool),
  }

  oracle Encaps(pk: Bits(pk_len)) -> Bits(ct_len) {
    get <-invoke Get(pk);
    (_sk, sk_is_honest) <-parse get;

    coins <-$ Bits(encaps_coins_len);
    (k, ct) <-parse encaps(coins, pk);

    _unit <-invoke Set(ct, pk, k, sk_is_honest);

    return ct;
  }
}


