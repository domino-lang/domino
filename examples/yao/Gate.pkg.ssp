package Gate {
    params {
        n: Integer,
        m: Integer,
        p: Integer,
        zeron: Bits(n),
    }

    state {
    }

    oracle GBLG(h: Integer, l: Integer, r: Integer, op: fn (Bool,Bool) -> Bool, j: Integer) -> Table(Bits(p),Bool) {
        C <- emptyset;
        Z <- invoke GETKEYSOUT(j);
        bl <- false;
        br <- false;
           bj <- op(bl,br);
           kzero <- Z[bj];
           czeroin  <- invoke ENC(l,bl,kzero,zeron);
           conein  <- invoke ENC(l,bl,zeron,zeron);
           cout  <- invoke ENC(l,bl,conein,czeroin);
           C[cout] <- true;
        bl <- true;
        br <- false;
           bj <- op(bl,br);
           kzero <- Z[bj];
           czeroin  <- invoke ENC(l,bl,kzero,zeron);
           conein  <- invoke ENC(l,bl,zeron,zeron);
           cout  <- invoke ENC(l,bl,conein,czeroin);
           C[cout] <- true;
        bl <- false;
        br <- true;
           bj <- op(bl,br);
           kzero <- Z[bj];
           czeroin  <- invoke ENC(l,bl,kzero,zeron);
           conein  <- invoke ENC(l,bl,zeron,zeron);
           cout  <- invoke ENC(l,bl,conein,czeroin);
           C[cout] <- true;
        bl <- true;
        br <- true;
           bj <- op(bl,br);
           kzero <- Z[bj];
           czeroin  <- invoke ENC(l,bl,kzero,zeron);
           conein  <- invoke ENC(l,bl,zeron,zeron);
           cout  <- invoke ENC(l,bl,conein,czeroin);
           C[cout] <- true;
        return C;
    }

}