package KEM {
  params {
    sk_len: Integer,
    pk_len: Integer,
    ct_len: Integer,
    shk_len: Integer,
    encaps_coins_len: Integer,

    encaps: fn (Bits(encaps_coins_len), Bits(pk_len)) -> (Bits(shk_len), Bits(ct_len)),
  }

  import oracles {
    Set(key_id: Integer, key: Bits(shk_len), is_uncorrupted: Bool),
    Get(pk: Bits(pk_len)) -> (Bits(sk_len), Bool),
    GetRand(key_id: Integer) -> (Bits(encaps_coins_len), Bool),
  }

  oracle Encaps(key_id: Integer, pk: Bits(pk_len)) -> Bits(ct_len) {
    get <-invoke Get(pk);
    (_sk, sk_is_honest) <-parse get;

    getRand <-invoke GetRand(key_id);
    (coins, coins_are_honest) <-parse getRand;

    (k, ct) <-parse encaps(coins, pk);

    hon <- (sk_is_honest and coins_are_honest);
    /* TODO this is the Set from RandomKeysWithKeyID, not from AsymmetricKeys */
    _unit <-invoke Set((ct, pk), hon, k);

    return ct;
  }
}


