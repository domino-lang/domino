package Key {
    types {
        Handle,
        Key,
    }

    params {
        ideal: Bool,
    }

    state {
        keys: Table(Handle, Key),
        pr:  Table(Handle, Bool), /* is_pseudorandom */
    }

    oracle Set(hdl: Handle, k: Key, pr: Bool) {
        /* _should_ imply the rest is unset as well */
        if not(keys[hdl] == None) {
            abort;
        }

        if (pr and ideal) {
            keys[hdl] <-$ Key;
        } else {
            keys[hdl] <- keys;
        }

        hon[hdl] <- pr;    
    }

    oracle Get(hdl: Handle) -> Maybe(Key) {
        mk <- keys[hdl];
        return Unwrap(mk);
    }

    oracle PR(hdl: Handle) -> Maybe(Bool) {
        mpr <- pr[hdl];
        return Unwrap(mpr);
    }
}