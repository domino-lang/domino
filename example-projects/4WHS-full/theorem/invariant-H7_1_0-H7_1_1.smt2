(define-fun freshness-and-honesty-matches
    ((state (Array Int (Maybe (Tuple11 Int Bool Int Int (Maybe Bool) (Maybe Bits_256)
                                       (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
                                       (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int))))
     (fresh (Array Int (Maybe Bool)))
     (honest (Array Int (Maybe Bool))))
  Bool
  (forall ((ctr Int))
          (let ((state (select state ctr)))
            (=> (not (is-mk-none state))
                (let ((kid (el11-4  (maybe-get state))))
                  (= (select fresh ctr)
                     (select honest kid)))))))

(define-fun no-overwriting-prf
    ((kid Int)
     (Prf (Array (Tuple6 Int Int Int Bits_256 Bits_256 Bool) (Maybe Bits_256)))
     (H (Array Int (Maybe Bool)))
     (Keys (Array (Tuple5 Int Int Int Bits_256 Bits_256) (Maybe Bits_256)))
     (Ltk (Array Int (Maybe Bits_256))))
  Bool
    (forall ((i Int) (U Int) (V Int) (ni Bits_256) (nr Bits_256))
            (and
             (=> (= (select H i) (as mk-none (Maybe Bool)))
                 (= (select Ltk i) (as mk-none (Maybe Bits_256))))
             (=> (= (select Ltk i) (as mk-none (Maybe Bits_256)))
                 (= (select H i) (as mk-none (Maybe Bool))))
             (=> (> i kid)
                 (and
                  (is-mk-none (select H i))
                  (is-mk-none (select Ltk i))
                  (is-mk-none (select Keys (mk-tuple5 i U V ni nr)))
                  (is-mk-none (select Prf (mk-tuple6 i U V ni nr true)))
                  (is-mk-none (select Prf (mk-tuple6 i U V ni nr false))))))))

(define-fun no-overwriting-game
    ((state (Array Int (Maybe (Tuple11 Int Bool Int Int (Maybe Bool) (Maybe Bits_256)
                                       (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
                                       (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int))))
     (ctr Int))
  Bool
  (forall ((i Int))
          (=> (> i ctr)
              (is-mk-none (select state i)))))

(define-fun sid-matches
    ((state (Array Int (Maybe (Tuple11 Int Bool Int Int (Maybe Bool) (Maybe Bits_256)
                                       (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
                                       (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int))))
     (prf (Array (Tuple6 Int Int Int Bits_256 Bits_256 Bool) (Maybe Bits_256))))
  Bool
  (let ((none (as mk-none (Maybe (Tuple11 Int Bool Int Int (Maybe Bool) (Maybe Bits_256)
                                          (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
                                          (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int)))))
    (forall ((ctr1 Int) (ctr2 Int))
            (let ((state1 (select state ctr1))
                  (state2 (select state ctr2)))
            (=> (and (not (= none state1))
                     (not (= none state2)))
                (let ((U1    (el11-1 (maybe-get state1)))
                      (U2    (el11-1 (maybe-get state2)))
                      (u1    (el11-2 (maybe-get state1)))
                      (u2    (el11-2 (maybe-get state2)))
                      (V1    (el11-3 (maybe-get state1)))
                      (V2    (el11-3 (maybe-get state2)))
                      (kid1  (el11-4 (maybe-get state1)))
                      (kid2  (el11-4 (maybe-get state2)))
                      (ni1   (el11-7 (maybe-get state1)))
                      (ni2   (el11-7 (maybe-get state2)))
                      (nr1   (el11-8 (maybe-get state1)))
                      (nr2   (el11-8 (maybe-get state2)))
                      (kmac1 (el11-9 (maybe-get state1)))
                      (kmac2 (el11-9 (maybe-get state2)))
                      (sid1  (el11-10 (maybe-get state1)))
                      (sid2  (el11-10 (maybe-get state2))))
                  (=> (and (not (= sid1 (as mk-none (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)))))
                           (not (= sid2 (as mk-none (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)))))
                           (= (mk-tuple5 kid1 (ite u1 V1 U1) (ite u1 U1 V1) ni1 nr1)
                              (mk-tuple5 kid2 (ite u2 V2 U2) (ite u2 U2 V2) ni2 nr2)))
                      (= sid1 sid2))))))))


(define-fun sid-is-wellformed
    ((state (Array Int (Maybe (Tuple11 Int Bool Int Int (Maybe Bool) (Maybe Bits_256)
                                       (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
                                       (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int))))
     (prf (Array (Tuple6 Int Int Int Bits_256 Bits_256 Bool) (Maybe Bits_256)))
     (Fresh (Array Int (Maybe Bool)))
     (Keys (Array (Tuple5 Int Int Int Bits_256 Bits_256) (Maybe Bits_256))))
  Bool
  (forall ((ctr Int))
          (let ((state (select state ctr)))
            (=> (not (is-mk-none state))
                (let  ((U    (el11-1  (maybe-get state)))
                       (u    (el11-2  (maybe-get state)))
                       (V    (el11-3  (maybe-get state)))
                       (kid  (el11-4  (maybe-get state)))
                       (acc  (el11-5  (maybe-get state)))
                       (k    (el11-6  (maybe-get state)))
                       (ni   (el11-7  (maybe-get state)))
                       (nr   (el11-8  (maybe-get state)))
                       (kmac (el11-9  (maybe-get state)))
                       (sid  (el11-10 (maybe-get state)))
                       (mess (el11-11 (maybe-get state))))
                  (=> (not (is-mk-none sid))
                      (let ((kmac (ite (= (select Fresh ctr) (mk-some true))
                                       (select Keys (mk-tuple5 kid (ite u V U) (ite u U V)
                                                               (maybe-get ni) (maybe-get nr)))
                                       kmac)))
                        (and
                         (not (is-mk-none kmac))
                         (let ((tau (<<func-mac>> (maybe-get kmac) (maybe-get nr) 2)))
                           (= (mk-tuple5 (ite u V U) (ite u U V)
                                         (maybe-get ni) (maybe-get nr) tau)
                              (maybe-get sid)))))))))))


(define-fun invariant
    ((state-H710  <GameState_H7_<$<!n!>$>>)
     (state-H711  <GameState_H7_<$<!n!>$>>))
  Bool
  (let ((nonces-H710 (<game-H7-<$<!n!>$>-pkgstate-Nonces> state-H710))
        (nonces-H711 (<game-H7-<$<!n!>$>-pkgstate-Nonces>  state-H711))
        (mac-H710 (<game-H7-<$<!n!>$>-pkgstate-MAC> state-H710))
        (mac-H711 (<game-H7-<$<!n!>$>-pkgstate-MAC>  state-H711))
        (game-H710 (<game-H7-<$<!n!>$>-pkgstate-Game> state-H710))
        (game-H711 (<game-H7-<$<!n!>$>-pkgstate-Game>  state-H711))
        (prf-H710 (<game-H7-<$<!n!>$>-pkgstate-PRF> state-H710))
        (prf-H711 (<game-H7-<$<!n!>$>-pkgstate-PRF>  state-H711)))
    (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!n!>$>-ctr_> game-H710))
          (ctr1 (<pkg-state-Game_noprfkey-<$<!n!>$>-ctr_> game-H711))
          (State0 (<pkg-state-Game_noprfkey-<$<!n!>$>-State> game-H710))
          (State1 (<pkg-state-Game_noprfkey-<$<!n!>$>-State> game-H711))
          (First0 (<pkg-state-Game_noprfkey-<$<!n!>$>-First> game-H710))
          (First1 (<pkg-state-Game_noprfkey-<$<!n!>$>-First> game-H711))
          (Second0 (<pkg-state-Game_noprfkey-<$<!n!>$>-Second> game-H710))
          (Second1 (<pkg-state-Game_noprfkey-<$<!n!>$>-Second> game-H711))
          (RevTested0 (<pkg-state-Game_noprfkey-<$<!n!>$>-RevTested> game-H710))
          (RevTested1 (<pkg-state-Game_noprfkey-<$<!n!>$>-RevTested> game-H711))
          (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!n!>$>-RevTestEval> game-H710))
          (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!n!>$>-RevTestEval> game-H711))
          (Fresh0 (<pkg-state-Game_noprfkey-<$<!n!>$>-Fresh> game-H710))
          (Fresh1 (<pkg-state-Game_noprfkey-<$<!n!>$>-Fresh> game-H711))
          (Nonces0 (<pkg-state-Nonces-<$<!n!>$>-Nonces> nonces-H710))
          (Nonces1 (<pkg-state-Nonces-<$<!n!>$>-Nonces> nonces-H711))
          (Keys0 (<pkg-state-MAC-<$<!n!>$>-Keys> mac-H710))
          (Keys1 (<pkg-state-MAC-<$<!n!>$>-Keys> mac-H711))
          (Values0 (<pkg-state-MAC-<$<!n!>$>-Values> mac-H710))
          (Values1 (<pkg-state-MAC-<$<!n!>$>-Values> mac-H711))
          (kid0 (<pkg-state-PRF-<$<!n!>$>-kid_> prf-H710))
          (kid1 (<pkg-state-PRF-<$<!n!>$>-kid_> prf-H711))
          (Ltk0 (<pkg-state-PRF-<$<!n!>$>-LTK> prf-H710))
          (Ltk1 (<pkg-state-PRF-<$<!n!>$>-LTK> prf-H711))
          (Prf0 (<pkg-state-PRF-<$<!n!>$>-PRF> prf-H710))
          (Prf1 (<pkg-state-PRF-<$<!n!>$>-PRF> prf-H711))
          (H0 (<pkg-state-PRF-<$<!n!>$>-H> prf-H710))
          (H1 (<pkg-state-PRF-<$<!n!>$>-H> prf-H711)))
      (and (= nonces-H710 nonces-H711)
           (= Ltk0 Ltk1)
           (= H0 H1)
           (= kid0 kid1)
           (= ctr0 ctr1)
           (= State0 State1)
           (= RevTested0 RevTested1)
           (= Fresh0 Fresh1)
           (= Keys0 Keys1)
           (= Values0 Values1)
           (= First0 First1)
           (= Second0 Second1)

           (freshness-and-honesty-matches State0 Fresh0 H0)
           
           (no-overwriting-prf kid0 Prf0 H0 Keys0 Ltk0)
           (no-overwriting-game State0 ctr0)

           ;; (sid-is-wellformed State0 Prf0 Fresh0 Keys0)
           ;; (sid-matches State0 Prf0)

           ))))
