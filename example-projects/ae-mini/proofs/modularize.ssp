proof Modularize {
    const n: Integer;
    const prf: fn Bits(n), Bits(n) -> Bits(n);
  
    instance monprfreal = Monprfreal {
        params {
            n  : n  ,
            prf: prf,
        }
    }

    instance modprfreal = Modprfreal {
        params {
            n  : n  ,
            prf: prf,
        }
    }

    instance monprfideal = Monprfideal {
        params {
            n  : n  ,
        }
    }

    instance modprfideal = Modprfreal {
        params {
            n  : n  ,
            prf: prf,
        }
    }


    assumptions {
        MonPRF: monprfreal ~ monprfideal
    }

    gamehops {
    equivalence modprfreal monprfreal 
        {
            Eval:
            {
                invariant: [
                    ./proofs/invariant-PRF.smt2
                ]

                lemmas {
                    aborts-equal-EVAL:   []
                    invariant-PRF:      [no-abort-EVAL]
                    same-output-EVAL:    [no-abort-EVAL]
                }
            }
            Get:
            {
                invariant: [
                    ./proofs/invariant-PRF.smt2
                ]

                lemmas {
                    aborts-equal-GET:   []
                    invariant-PRF:      [no-abort-GET]
                    same-output-GET:    [no-abort-GET]
                }
            }
        }

    }
}
